Compilation warnings/errors on /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:
Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1017:5:
     |
1017 |     address operator,
     |     ^^^^^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1018:5:
     |
1018 |     address from,
     |     ^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1019:5:
     |
1019 |     uint id,
     |     ^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1020:5:
     |
1020 |     uint value,
     |     ^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1021:5:
     |
1021 |     bytes calldata data
     |     ^^^^^^^^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1027:5:
     |
1027 |     address operator,
     |     ^^^^^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1028:5:
     |
1028 |     address from,
     |     ^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1029:5:
     |
1029 |     uint[] calldata ids,
     |     ^^^^^^^^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1030:5:
     |
1030 |     uint[] calldata values,
     |     ^^^^^^^^^^^^^^^^^^^^^^

Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1031:5:
     |
1031 |     bytes calldata data
     |     ^^^^^^^^^^^^^^^^^^^

Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet. Consider enabling the optimizer (with a low "runs" value!), turning off revert strings, or using libraries.
    --> /sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol:1062:1:
     |
1062 | contract HomoraBank is Initializable, Governable, ERC1155NaiveReceiver, IBank {
     | ^ (Relevant source part starts here and spans across multiple lines).


[91m
Reentrancy in HomoraBank.liquidate(uint256,address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1382-1401):
	External calls:
	- (amountPaid,share) = repayInternal(positionId,debtToken,amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1391)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#758)
		- IERC20(token).safeTransferFrom(msg.sender,address(this),amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1570)
		- (success,returndata) = target.call{value: weiValue}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#677)
		- require(bool,string)(cToken.repayBorrow(amountCall) == 0,bad repay) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1559)
	- poke(debtToken) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1386)
		- debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
	External calls sending eth:
	- (amountPaid,share) = repayInternal(positionId,debtToken,amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1391)
		- (success,returndata) = target.call{value: weiValue}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#677)
	State variables written after the call(s):
	- pos.collateralSize = pos.collateralSize.sub(bounty) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1398)
Reentrancy in HomoraBank.repayInternal(uint256,address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1462-1487):
	External calls:
	- paid = doRepay(token,doERC20TransferIn(token,amountCall)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1477)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#758)
		- IERC20(token).safeTransferFrom(msg.sender,address(this),amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1570)
		- require(bool,string)(cToken.repayBorrow(amountCall) == 0,bad repay) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1559)
		- (success,returndata) = target.call{value: weiValue}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#677)
	External calls sending eth:
	- paid = doRepay(token,doERC20TransferIn(token,amountCall)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1477)
		- (success,returndata) = target.call{value: weiValue}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#677)
	State variables written after the call(s):
	- bank.totalShare = totalShare.sub(lessShare) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1480)
	- pos.debtShareOf[token] = newShare (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1482)
	- pos.debtMap &= ~ (1 << uint256(bank.index)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1484)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities[0m
[93m
HomoraBank.borrowBalanceStored(uint256,address) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1208-1217) uses a dangerous strict equality:
	- share == 0 || totalDebt == 0 (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1212)
HomoraBank.doRepay(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1555-1563) uses a dangerous strict equality:
	- require(bool,string)(cToken.repayBorrow(amountCall) == 0,bad repay) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1559)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
[93m
Reentrancy in HomoraBank.accrue(address) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1161-1177):
	External calls:
	- debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
	State variables written after the call(s):
	- bank.totalDebt = debt (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1168)
	- bank.pendingReserve = bank.pendingReserve.add(fee) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1169)
	- bank.totalDebt = debt (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1175)
Reentrancy in HomoraBank.addBank(address,address) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1338-1351):
	External calls:
	- IERC20(token).safeApprove(cToken,0) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1347)
	- IERC20(token).safeApprove(cToken,uint256(- 1)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1348)
	State variables written after the call(s):
	- allBanks.push(token) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1349)
Reentrancy in HomoraBank.borrow(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1433-1448):
	External calls:
	- poke(token) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1433)
		- debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
	State variables written after the call(s):
	- bank.totalShare = bank.totalShare.add(share) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1440)
Reentrancy in HomoraBank.borrow(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1433-1448):
	External calls:
	- IERC20(token).safeTransfer(msg.sender,doBorrow(token,amount)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1446)
		- require(bool,string)(ICErc20(bank.cToken).borrow(amountCall) == 0,bad borrow) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1545)
	- poke(token) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1433)
		- debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
	State variables written after the call(s):
	- IERC20(token).safeTransfer(msg.sender,doBorrow(token,amount)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1446)
		- bank.totalDebt = bank.totalDebt.add(amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1547)
Reentrancy in HomoraBank.doBorrow(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1542-1549):
	External calls:
	- require(bool,string)(ICErc20(bank.cToken).borrow(amountCall) == 0,bad borrow) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1545)
	State variables written after the call(s):
	- bank.totalDebt = bank.totalDebt.add(amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1547)
Reentrancy in HomoraBank.doRepay(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1555-1563):
	External calls:
	- require(bool,string)(cToken.repayBorrow(amountCall) == 0,bad repay) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1559)
	State variables written after the call(s):
	- bank.totalDebt = newDebt (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1561)
Reentrancy in HomoraBank.putCollateral(address,uint256,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1501-1516):
	External calls:
	- amount = doERC1155TransferIn(collToken,collId,amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1513)
		- IERC1155(token).safeTransferFrom(msg.sender,address(this),id,amountCall,) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1585)
	State variables written after the call(s):
	- pos.collateralSize = pos.collateralSize.add(amount) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1514)
Reentrancy in HomoraBank.resolveReserve(address) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1189-1195):
	External calls:
	- poke(token) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1189)
		- debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
	State variables written after the call(s):
	- bank.pendingReserve = 0 (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1193)
Reentrancy in HomoraBank.resolveReserve(address) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1189-1195):
	External calls:
	- bank.reserve = bank.reserve.add(doBorrow(token,pendingReserve)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1194)
		- require(bool,string)(ICErc20(bank.cToken).borrow(amountCall) == 0,bad borrow) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1545)
	- poke(token) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1189)
		- debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
	State variables written after the call(s):
	- bank.reserve = bank.reserve.add(doBorrow(token,pendingReserve)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1194)
		- bank.totalDebt = bank.totalDebt.add(amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1547)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
[92m
Governable.acceptGovernor() (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#931-935) should emit an event for: 
	- governor = msg.sender (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#934) 
HomoraBank.execute(uint256,address,bytes) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1407-1428) should emit an event for: 
	- SPELL = spell (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1420) 
	- SPELL = _NO_ADDRESS (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1426) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-access-control[0m
[92m
HomoraBank.execute(uint256,address,bytes) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1407-1428) should emit an event for: 
	- POSITION_ID = positionId (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1419) 
	- POSITION_ID = _NO_ID (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1425) 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-events-arithmetic[0m
[92m
HomoraCaster.cast(address,bytes).target (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1045) lacks a zero-check on :
		- (ok,returndata) = target.call{value: msg.value}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1046)
Governable.setPendingGovernor(address)._pendingGovernor (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#926) lacks a zero-check on :
		- pendingGovernor = _pendingGovernor (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#927)
HomoraBank.execute(uint256,address,bytes).spell (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1409) lacks a zero-check on :
		- SPELL = spell (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1420)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#missing-zero-address-validation[0m
[92m
HomoraBank.accrue(address) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1161-1177) has external calls inside a loop: debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
HomoraBank.doBorrow(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1542-1549) has external calls inside a loop: balanceBefore = IERC20(token).balanceOf(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1544)
HomoraBank.doBorrow(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1542-1549) has external calls inside a loop: require(bool,string)(ICErc20(bank.cToken).borrow(amountCall) == 0,bad borrow) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1545)
HomoraBank.doBorrow(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1542-1549) has external calls inside a loop: balanceAfter = IERC20(token).balanceOf(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1546)
HomoraBank.getBorrowETHValue(uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1315-1333) has external calls inside a loop: value = value.add(oracle.asETHBorrow(token,debt,owner)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1327)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop[0m
[92m
Reentrancy in HomoraBank.borrow(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1433-1448):
	External calls:
	- poke(token) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1433)
		- debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
	State variables written after the call(s):
	- pos.debtShareOf[token] = newShare (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1442)
	- pos.debtMap |= (1 << uint256(bank.index)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1444)
Reentrancy in HomoraBank.execute(uint256,address,bytes) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1407-1428):
	External calls:
	- HomoraCaster(caster).cast{value: msg.value}(spell,data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1421)
	State variables written after the call(s):
	- POSITION_ID = _NO_ID (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1425)
	- SPELL = _NO_ADDRESS (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1426)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
[92m
Reentrancy in HomoraBank.addBank(address,address) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1338-1351):
	External calls:
	- IERC20(token).safeApprove(cToken,0) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1347)
	- IERC20(token).safeApprove(cToken,uint256(- 1)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1348)
	Event emitted after the call(s):
	- AddBank(token,cToken) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1350)
Reentrancy in HomoraBank.borrow(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1433-1448):
	External calls:
	- IERC20(token).safeTransfer(msg.sender,doBorrow(token,amount)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1446)
		- require(bool,string)(ICErc20(bank.cToken).borrow(amountCall) == 0,bad borrow) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1545)
	- poke(token) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1433)
		- debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
	Event emitted after the call(s):
	- Borrow(POSITION_ID,msg.sender,token,amount,share) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1447)
Reentrancy in HomoraBank.liquidate(uint256,address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1382-1401):
	External calls:
	- (amountPaid,share) = repayInternal(positionId,debtToken,amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1391)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#758)
		- IERC20(token).safeTransferFrom(msg.sender,address(this),amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1570)
		- (success,returndata) = target.call{value: weiValue}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#677)
		- require(bool,string)(cToken.repayBorrow(amountCall) == 0,bad repay) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1559)
	- IERC1155(pos.collToken).safeTransferFrom(address(this),msg.sender,pos.collId,bounty,) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1399)
	- poke(debtToken) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1386)
		- debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
	External calls sending eth:
	- (amountPaid,share) = repayInternal(positionId,debtToken,amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1391)
		- (success,returndata) = target.call{value: weiValue}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#677)
	Event emitted after the call(s):
	- Liquidate(positionId,msg.sender,debtToken,amountPaid,share,bounty) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1400)
Reentrancy in HomoraBank.putCollateral(address,uint256,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1501-1516):
	External calls:
	- amount = doERC1155TransferIn(collToken,collId,amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1513)
		- IERC1155(token).safeTransferFrom(msg.sender,address(this),id,amountCall,) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1585)
	Event emitted after the call(s):
	- PutCollateral(POSITION_ID,msg.sender,collToken,collId,amount) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1515)
Reentrancy in HomoraBank.repay(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1453-1456):
	External calls:
	- (amount,share) = repayInternal(POSITION_ID,token,amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1454)
		- returndata = address(token).functionCall(data,SafeERC20: low-level call failed) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#758)
		- IERC20(token).safeTransferFrom(msg.sender,address(this),amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1570)
		- (success,returndata) = target.call{value: weiValue}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#677)
		- require(bool,string)(cToken.repayBorrow(amountCall) == 0,bad repay) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1559)
	- poke(token) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1453)
		- debt = ICErc20(bank.cToken).borrowBalanceCurrent(address(this)) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1165)
	External calls sending eth:
	- (amount,share) = repayInternal(POSITION_ID,token,amountCall) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1454)
		- (success,returndata) = target.call{value: weiValue}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#677)
	Event emitted after the call(s):
	- Repay(POSITION_ID,msg.sender,token,amount,share) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1455)
Reentrancy in HomoraBank.takeCollateral(address,uint256,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1522-1536):
	External calls:
	- IERC1155(collToken).safeTransferFrom(address(this),msg.sender,collId,amount,) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1534)
	Event emitted after the call(s):
	- TakeCollateral(POSITION_ID,msg.sender,collToken,collId,amount) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1535)
Reentrancy in HomoraBank.withdrawReserve(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1370-1376):
	External calls:
	- IERC20(token).safeTransfer(msg.sender,amount) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1374)
	Event emitted after the call(s):
	- WithdrawReserve(msg.sender,token,amount) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1375)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
[92m
Initializable._isConstructor() (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#131-142) uses assembly
	- INLINE ASM (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#140)
Address.isContract(address) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#580-589) uses assembly
	- INLINE ASM (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#587)
Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#673-694) uses assembly
	- INLINE ASM (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#686-689)
HomoraCaster.cast(address,bytes) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1045-1059) uses assembly
	- INLINE ASM (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1051-1054)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
[92m
HomoraBank.lock() (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1111-1116) has costly operations inside a loop:
	- _GENERAL_LOCK = _ENTERED (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1113)
HomoraBank.lock() (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1111-1116) has costly operations inside a loop:
	- _GENERAL_LOCK = _NOT_ENTERED (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1115)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop[0m
[92m
Address.functionCall(address,bytes) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#633-635) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#658-660) is never used and should be removed
Address.functionCallWithValue(address,bytes,uint256,string) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#668-671) is never used and should be removed
Address.sendValue(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#607-613) is never used and should be removed
Math.average(uint256,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#897-900) is never used and should be removed
Math.max(uint256,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#882-884) is never used and should be removed
SafeERC20.safeDecreaseAllowance(IERC20,address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#742-745) is never used and should be removed
SafeERC20.safeIncreaseAllowance(IERC20,address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#737-740) is never used and should be removed
SafeMath.mod(uint256,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#282-284) is never used and should be removed
SafeMath.mod(uint256,uint256,string) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#298-301) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code[0m
[92m
Low level call in Address.sendValue(address,uint256) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#607-613):
	- (success) = recipient.call{value: amount}() (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#611)
Low level call in Address._functionCallWithValue(address,bytes,uint256,string) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#673-694):
	- (success,returndata) = target.call{value: weiValue}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#677)
Low level call in HomoraCaster.cast(address,bytes) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1045-1059):
	- (ok,returndata) = target.call{value: msg.value}(data) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1046)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
[92m
Function IBank.POSITION_ID() (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#473) is not in mixedCase
Function IBank.SPELL() (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#476) is not in mixedCase
Function IBank.EXECUTOR() (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#479) is not in mixedCase
Function Governable.__Governable__init() (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#919-922) is not in mixedCase
Parameter Governable.setPendingGovernor(address)._pendingGovernor (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#926) is not in mixedCase
Parameter HomoraBank.initialize(IOracle,uint256)._oracle (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1137) is not in mixedCase
Parameter HomoraBank.initialize(IOracle,uint256)._feeBps (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1137) is not in mixedCase
Function HomoraBank.EXECUTOR() (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1153-1157) is not in mixedCase
Parameter HomoraBank.setOracle(IOracle)._oracle (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1355) is not in mixedCase
Parameter HomoraBank.setFeeBps(uint256)._feeBps (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1362) is not in mixedCase
Variable HomoraBank._GENERAL_LOCK (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1090) is not in mixedCase
Variable HomoraBank._IN_EXEC_LOCK (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1091) is not in mixedCase
Variable HomoraBank.POSITION_ID (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1092) is not in mixedCase
Variable HomoraBank.SPELL (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#1093) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
[92m
supportsInterface(bytes4) should be declared external:
	- ERC165.supportsInterface(bytes4) (../../sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol#979-981)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
/sb/0x33bf0bb8e1405dc440eccb97ffd92fef438c8a27.sol analyzed (18 contracts with 78 detectors), 67 result(s) found
