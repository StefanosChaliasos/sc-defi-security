{"SourceCode": "/**\r\n *Submitted for verification at BscScan.com on 2021-09-20\r\n*/\r\n\r\n// Dependency file: @pancakeswap/pancake-swap-lib/contracts/token/BEP20/IBEP20.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// pragma solidity >=0.4.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// Dependency file: @pancakeswap/pancake-swap-lib/contracts/math/SafeMath.sol\r\n\r\n\r\n// pragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, 'SafeMath: addition overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, 'SafeMath: subtraction overflow');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, 'SafeMath: division by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, 'SafeMath: modulo by zero');\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint256 x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @pancakeswap/pancake-swap-lib/contracts/utils/Address.sol\r\n\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}('');\r\n        require(success, 'Address: unable to send value, recipient may have reverted');\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, 'Address: low-level call failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, 'Address: insufficient balance for call');\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), 'Address: call to non-contract');\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\r\n\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            'SafeBEP20: approve from non-zero to non-zero allowance'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            'SafeBEP20: decreased allowance below zero'\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, 'SafeBEP20: low-level call failed');\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), 'SafeBEP20: BEP20 operation did not succeed');\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/math/Math.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\r\n\r\n\r\n// pragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/proxy/Initializable.sol\r\n\r\n\r\n// solhint-disable-next-line compiler-version\r\n// pragma solidity >=0.4.24 <0.8.0;\r\n\r\n// import \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n// import \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IMasterChef.sol\r\n\r\n// pragma solidity 0.6.12;\r\n\r\ninterface IMasterChef {\r\n    function cakePerBlock() view external returns(uint);\r\n    function totalAllocPoint() view external returns(uint);\r\n\r\n    function poolInfo(uint _pid) view external returns(address lpToken, uint allocPoint, uint lastRewardBlock, uint accCakePerShare);\r\n    function userInfo(uint _pid, address _account) view external returns(uint amount, uint rewardDebt);\r\n    function poolLength() view external returns(uint);\r\n\r\n    function deposit(uint256 _pid, uint256 _amount) external;\r\n    function withdraw(uint256 _pid, uint256 _amount) external;\r\n    function emergencyWithdraw(uint256 _pid) external;\r\n\r\n    function enterStaking(uint256 _amount) external;\r\n    function leaveStaking(uint256 _amount) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IHunnyMinter.sol\r\n\r\n// pragma solidity 0.6.12;\r\n\r\ninterface IHunnyMinter {\r\n    function isMinter(address) view external returns(bool);\r\n    function amountHunnyToMint(uint bnbProfit) view external returns(uint);\r\n    function amountHunnyToMintForHunnyBNB(uint amount, uint duration) view external returns(uint);\r\n    function withdrawalFee(uint amount, uint depositedAt) view external returns(uint);\r\n    function performanceFee(uint profit) view external returns(uint);\r\n    function mintFor(address flip, uint _withdrawalFee, uint _performanceFee, address to, uint depositedAt) external;\r\n    function mintForHunnyBNB(uint amount, uint duration, address to) external;\r\n\r\n\r\n    function hunnyPerProfitBNB() view external returns(uint);\r\n    function WITHDRAWAL_FEE_FREE_PERIOD() view external returns(uint);\r\n    function WITHDRAWAL_FEE() view external returns(uint);\r\n\r\n    function setMinter(address minter, bool canMint) external;\r\n\r\n    // v2 functions\r\n    // V2 functions\r\n    function mint(uint amount) external;\r\n    function safeHunnyTransfer(address to, uint256 amount) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/legacy/IStrategyHelper.sol\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n/*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 HunnyFinance\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n// import \"contracts/interfaces/IHunnyMinter.sol\";\r\n\r\ninterface IStrategyHelper {\r\n    function tokenPriceInBNB(address _token) view external returns(uint);\r\n    function cakePriceInBNB() view external returns(uint);\r\n    function bnbPriceInUSD() view external returns(uint);\r\n\r\n    function flipPriceInBNB(address _flip) view external returns(uint);\r\n    function flipPriceInUSD(address _flip) view external returns(uint);\r\n\r\n    function profitOf(IHunnyMinter minter, address _flip, uint amount) external view returns (uint _usd, uint _hunny, uint _bnb);\r\n\r\n    function tvl(address _flip, uint amount) external view returns (uint);    // in USD\r\n    function tvlInBNB(address _flip, uint amount) external view returns (uint);    // in BNB\r\n    function apy(IHunnyMinter minter, uint pid) external view returns(uint _usd, uint _hunny, uint _bnb);\r\n    function compoundingAPY(uint pid, uint compoundUnit) view external returns(uint);\r\n}\r\n\r\n\r\n// Dependency file: @pancakeswap/pancake-swap-lib/contracts/GSN/Context.sol\r\n\r\n\r\n// pragma solidity >=0.4.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @pancakeswap/pancake-swap-lib/contracts/access/Ownable.sol\r\n\r\n\r\n// pragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @pancakeswap/pancake-swap-lib/contracts/token/BEP20/BEP20.sol\r\n\r\n\r\n// pragma solidity >=0.4.0;\r\n\r\n/**\r\n * @dev Implementation of the {IBEP20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {BEP20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-BEP20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of BEP20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IBEP20-approve}.\r\n */\r\ncontract BEP20 is Context, IBEP20, Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external override view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() public override view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() public override view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() public override view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-totalSupply}.\r\n     */\r\n    function totalSupply() public override view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public override view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public override view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {BEP20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {BEP20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(amount, 'BEP20: transfer amount exceeds allowance')\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {BEP20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender].sub(subtractedValue, 'BEP20: decreased allowance below zero')\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\r\n     * the total supply.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `msg.sender` must be the token owner\r\n     */\r\n    function mint(uint256 amount) public onlyOwner returns (bool) {\r\n        _mint(_msgSender(), amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), 'BEP20: transfer from the zero address');\r\n        require(recipient != address(0), 'BEP20: transfer to the zero address');\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, 'BEP20: transfer amount exceeds balance');\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), 'BEP20: mint to the zero address');\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), 'BEP20: burn from the zero address');\r\n\r\n        _balances[account] = _balances[account].sub(amount, 'BEP20: burn amount exceeds balance');\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(owner != address(0), 'BEP20: approve from the zero address');\r\n        require(spender != address(0), 'BEP20: approve to the zero address');\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(\r\n            account,\r\n            _msgSender(),\r\n            _allowances[account][_msgSender()].sub(amount, 'BEP20: burn amount exceeds allowance')\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IPancakeRouter01.sol\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IPancakeRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IPancakeRouter02.sol\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\n// import 'contracts/interfaces/IPancakeRouter01.sol';\r\n\r\ninterface IPancakeRouter02 is IPancakeRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IPancakePair.sol\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// Dependency file: contracts/library/PoolConstant.sol\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n/*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 HunnyFinance\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n\r\nlibrary PoolConstant {\r\n\r\n    enum PoolTypes {\r\n        HunnyStake, // no perf fee\r\n        HunnyFlip_deprecated, // deprecated\r\n        CakeStake, FlipToFlip, FlipToCake,\r\n        Hunny, // no perf fee\r\n        HunnyBNB,\r\n        Alpaca,\r\n        Venus\r\n    }\r\n\r\n    struct PoolInfoBSC {\r\n        address pool;\r\n        uint balance;\r\n        uint principal;\r\n        uint available;\r\n        uint tvl;\r\n        uint utilized;\r\n        uint liquidity;\r\n        uint pBASE;\r\n        uint pHUNNY;\r\n        uint depositedAt;\r\n        uint feeDuration;\r\n        uint feePercentage;\r\n    }\r\n\r\n    struct PoolInfoETH {\r\n        address pool;\r\n        uint collateralETH;\r\n        uint collateralBSC;\r\n        uint bnbDebt;\r\n        uint leverage;\r\n        uint tvl;\r\n        uint updatedAt;\r\n        uint depositedAt;\r\n        uint feeDuration;\r\n        uint feePercentage;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IVaultController.sol\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n/*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 HunnyFinance\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\ninterface IVaultController {\r\n    function minter() external view returns (address);\r\n    function hunnyChef() external view returns (address);\r\n    function stakingToken() external view returns (address);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IStrategy.sol\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n/*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 HunnyFinance\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n// import \"contracts/library/PoolConstant.sol\";\r\n// import \"contracts/interfaces/IVaultController.sol\";\r\n\r\ninterface IStrategy is IVaultController {\r\n    function deposit(uint _amount) external;\r\n    function depositAll() external;\r\n    function withdraw(uint _amount) external;    // HUNNY STAKING POOL ONLY\r\n    function withdrawAll() external;\r\n    function getReward() external;                  // HUNNY STAKING POOL ONLY\r\n    function harvest() external;\r\n\r\n    function totalSupply() external view returns (uint);\r\n    function balance() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function sharesOf(address account) external view returns (uint);\r\n    function principalOf(address account) external view returns (uint);\r\n    function earned(address account) external view returns (uint);\r\n    function withdrawableBalanceOf(address account) external view returns (uint);   // HUNNY STAKING POOL ONLY\r\n    function priceShare() external view returns (uint);\r\n\r\n    /* ========== Strategy Information ========== */\r\n\r\n    function pid() external view returns (uint);\r\n    function poolType() external view returns (PoolConstant.PoolTypes);\r\n    function depositedAt(address account) external view returns (uint);\r\n    function rewardsToken() external view returns (address);\r\n\r\n    event Deposited(address indexed user, uint amount);\r\n    event Withdrawn(address indexed user, uint amount, uint withdrawalFee);\r\n    event ProfitPaid(address indexed user, uint profit, uint performanceFee);\r\n    event HunnyPaid(address indexed user, uint profit, uint performanceFee);\r\n    event Harvested(uint profit);\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IHunnyMinterV2.sol\r\n\r\n// pragma solidity 0.6.12;\r\n\r\ninterface IHunnyMinterV2 {\r\n    function isMinter(address) view external returns(bool);\r\n    function amountHunnyToMint(uint bnbProfit) view external returns(uint);\r\n    function amountHunnyToMintForHunnyBNB(uint amount, uint duration) view external returns(uint);\r\n    function withdrawalFee(uint amount, uint depositedAt) view external returns(uint);\r\n    function performanceFee(uint profit) view external returns(uint);\r\n    function mintFor(address flip, uint _withdrawalFee, uint _performanceFee, address to, uint depositedAt) external payable;\r\n    function mintForHunnyBNB(uint amount, uint duration, address to) external;\r\n\r\n    function hunnyPerProfitBNB() view external returns(uint);\r\n    function WITHDRAWAL_FEE_FREE_PERIOD() view external returns(uint);\r\n    function WITHDRAWAL_FEE() view external returns(uint);\r\n\r\n    function setMinter(address minter, bool canMint) external;\r\n\r\n    // V2 functions\r\n    function mint(uint amount) external;\r\n    function safeHunnyTransfer(address to, uint256 amount) external;\r\n    function mintGov(uint amount) external;\r\n}\r\n\r\n\r\n// Dependency file: contracts/interfaces/IHunnyChef.sol\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n/*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 HunnyFinance\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\ninterface IHunnyChef {\r\n\r\n    struct UserInfo {\r\n        uint balance;\r\n        uint pending;\r\n        uint rewardPaid;\r\n    }\r\n\r\n    struct VaultInfo {\r\n        address token;\r\n        uint allocPoint;       // How many allocation points assigned to this pool. HUNNYs to distribute per block.\r\n        uint lastRewardBlock;  // Last block number that HUNNYs distribution occurs.\r\n        uint accHunnyPerShare; // Accumulated HUNNYs per share, times 1e12. See below.\r\n    }\r\n\r\n    function hunnyPerBlock() external view returns (uint);\r\n    function totalAllocPoint() external view returns (uint);\r\n\r\n    function vaultInfoOf(address vault) external view returns (VaultInfo memory);\r\n    function vaultUserInfoOf(address vault, address user) external view returns (UserInfo memory);\r\n    function pendingHunny(address vault, address user) external view returns (uint);\r\n\r\n    function notifyDeposited(address user, uint amount) external;\r\n    function notifyWithdrawn(address user, uint amount) external;\r\n    function safeHunnyTransfer(address user) external returns (uint);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n// import \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\r\n\r\n\r\n// pragma solidity >=0.6.0 <0.8.0;\r\n\r\n// import \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\r\n// import \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/library/PausableUpgradeable.sol\r\n\r\n/*\r\n   ____            __   __        __   _\r\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\r\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\r\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\r\n     /___/\r\n\r\n* Docs: https://docs.synthetix.io/\r\n*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 Synthetix\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n// pragma solidity ^0.6.2;\r\n\r\n// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\n\r\nabstract contract PausableUpgradeable is OwnableUpgradeable {\r\n    uint public lastPauseTime;\r\n    bool public paused;\r\n\r\n    event PauseChanged(bool isPaused);\r\n\r\n    modifier notPaused {\r\n        require(!paused, \"PausableUpgradeable: cannot be performed while the contract is paused\");\r\n        _;\r\n    }\r\n\r\n    function __PausableUpgradeable_init() internal initializer {\r\n        __Ownable_init();\r\n        require(owner() != address(0), \"PausableUpgradeable: owner must be set\");\r\n    }\r\n\r\n    function setPaused(bool _paused) external onlyOwner {\r\n        if (_paused == paused) {\r\n            return;\r\n        }\r\n\r\n        paused = _paused;\r\n        if (paused) {\r\n            lastPauseTime = now;\r\n        }\r\n\r\n        emit PauseChanged(paused);\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/library/WhitelistUpgradeable.sol\r\n\r\n// pragma solidity 0.6.12;\r\n\r\n/*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 HunnyFinance\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\ncontract WhitelistUpgradeable is OwnableUpgradeable {\r\n    mapping (address => bool) private _whitelist;\r\n    bool private _disable;                      // default - false means whitelist feature is working on. if true no more use of whitelist\r\n\r\n    event Whitelisted(address indexed _address, bool whitelist);\r\n    event EnableWhitelist();\r\n    event DisableWhitelist();\r\n\r\n    modifier onlyWhitelisted {\r\n        require(_disable || _whitelist[msg.sender], \"Whitelist: caller is not on the whitelist\");\r\n        _;\r\n    }\r\n\r\n    function __WhitelistUpgradeable_init() internal initializer {\r\n        __Ownable_init();\r\n    }\r\n\r\n    function isWhitelist(address _address) public view returns(bool) {\r\n        return _whitelist[_address];\r\n    }\r\n\r\n    function setWhitelist(address _address, bool _on) external onlyOwner {\r\n        _whitelist[_address] = _on;\r\n\r\n        emit Whitelisted(_address, _on);\r\n    }\r\n\r\n    function disableWhitelist(bool disable) external onlyOwner {\r\n        _disable = disable;\r\n        if (disable) {\r\n            emit DisableWhitelist();\r\n        } else {\r\n            emit EnableWhitelist();\r\n        }\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\n\r\n// Dependency file: contracts/vaults/VaultController.sol\r\n\r\n// pragma solidity 0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n/*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 HunnyFinance\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n// import \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\";\r\n// import \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/BEP20.sol\";\r\n\r\n// import \"contracts/interfaces/IPancakeRouter02.sol\";\r\n// import \"contracts/interfaces/IPancakePair.sol\";\r\n// import \"contracts/interfaces/IStrategy.sol\";\r\n// import \"contracts/interfaces/IMasterChef.sol\";\r\n// import \"contracts/interfaces/IHunnyMinterV2.sol\";\r\n// import \"contracts/interfaces/IHunnyChef.sol\";\r\n// import \"contracts/library/PausableUpgradeable.sol\";\r\n// import \"contracts/library/WhitelistUpgradeable.sol\";\r\n\r\n\r\nabstract contract VaultController is IVaultController, PausableUpgradeable, WhitelistUpgradeable {\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    /* ========== CONSTANT VARIABLES ========== */\r\n    BEP20 private constant HUNNY = BEP20(0x565b72163f17849832A692A3c5928cc502f46D69);\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    address public keeper;\r\n    IBEP20 internal _stakingToken;\r\n    IHunnyMinterV2 internal _minter;\r\n    IHunnyChef internal _hunnyChef;\r\n\r\n    /* ========== VARIABLE GAP ========== */\r\n\r\n    uint256[49] private __gap;\r\n\r\n    /* ========== Event ========== */\r\n\r\n    event Recovered(address token, uint amount);\r\n\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyKeeper {\r\n        require(msg.sender == keeper || msg.sender == owner(), 'VaultController: caller is not the owner or keeper');\r\n        _;\r\n    }\r\n\r\n    /* ========== INITIALIZER ========== */\r\n\r\n    function __VaultController_init(IBEP20 token) internal initializer {\r\n        __PausableUpgradeable_init();\r\n        __WhitelistUpgradeable_init();\r\n\r\n        keeper = 0xe5F7E3DD9A5612EcCb228392F47b7Ddba8cE4F1a;\r\n        _stakingToken = token;\r\n    }\r\n\r\n    /* ========== VIEWS FUNCTIONS ========== */\r\n\r\n    function minter() external view override returns (address) {\r\n        return canMint() ? address(_minter) : address(0);\r\n    }\r\n\r\n    function canMint() internal view returns (bool) {\r\n        return address(_minter) != address(0) && _minter.isMinter(address(this));\r\n    }\r\n\r\n    function hunnyChef() external view override returns (address) {\r\n        return address(_hunnyChef);\r\n    }\r\n\r\n    function stakingToken() external view override returns (address) {\r\n        return address(_stakingToken);\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    function setKeeper(address _keeper) external onlyKeeper {\r\n        require(_keeper != address(0), 'VaultController: invalid keeper address');\r\n        keeper = _keeper;\r\n    }\r\n\r\n    function setMinter(address newMinter) virtual public onlyOwner {\r\n        // can zero\r\n        _minter = IHunnyMinterV2(newMinter);\r\n        if (newMinter != address(0)) {\r\n            require(newMinter == HUNNY.getOwner(), 'VaultController: not hunny minter');\r\n            _stakingToken.safeApprove(newMinter, 0);\r\n            _stakingToken.safeApprove(newMinter, uint(~0));\r\n        }\r\n    }\r\n\r\n    function setHunnyChef(IHunnyChef newHunnyChef) virtual public onlyOwner {\r\n        require(address(_hunnyChef) == address(0), 'VaultController: setHunnyChef only once');\r\n        _hunnyChef = newHunnyChef;\r\n    }\r\n\r\n    /* ========== SALVAGE PURPOSE ONLY ========== */\r\n\r\n    function recoverToken(address _token, uint amount) virtual external onlyOwner {\r\n        require(_token != address(_stakingToken), 'VaultController: cannot recover underlying token');\r\n        IBEP20(_token).safeTransfer(owner(), amount);\r\n\r\n        emit Recovered(_token, amount);\r\n    }\r\n}\r\n\r\n\r\n// Root file: contracts/vaults/VaultStrategyAlpacaRabbit.sol\r\n\r\npragma solidity 0.6.12;\r\n\r\n/*\r\n*\r\n* MIT License\r\n* ===========\r\n*\r\n* Copyright (c) 2020 HunnyFinance\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in all\r\n* copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n*/\r\n\r\n// import \"@pancakeswap/pancake-swap-lib/contracts/token/BEP20/SafeBEP20.sol\";\r\n// import \"@openzeppelin/contracts/math/Math.sol\";\r\n// import \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\";\r\n\r\n// import \"contracts/interfaces/IMasterChef.sol\";\r\n// import \"contracts/interfaces/IHunnyMinter.sol\";\r\n// import \"contracts/interfaces/legacy/IStrategyHelper.sol\";\r\n// import \"contracts/vaults/VaultController.sol\";\r\n\r\ninterface IWBNB {\r\n    function deposit() external payable;\r\n    function withdraw(uint256 amount) external;\r\n}\r\n\r\ninterface IAlpacaBearToken {\r\n    function totalToken() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function deposit(uint256 _amount) external payable;\r\n    function withdraw(uint256 _share) external;\r\n}\r\n\r\ninterface IFairLaunch {\r\n    function userInfo(uint256 _pid, address _user) external view returns (uint256 amount, uint256 rewardDebt, uint256 bonusDebt, address fundedBy);\r\n\r\n    function deposit(address _for, uint256 _pid, uint256 _amount) external;\r\n    function withdraw(address _for, uint256 _pid, uint256 _amount) external;\r\n    function harvest(uint256 _pid) external;\r\n}\r\n\r\ninterface IRabbitBank {\r\n    function totalToken(address token) external view returns (uint256);\r\n\r\n    function deposit(address token, uint256 _amount) external payable;\r\n\r\n    function withdraw(address token, uint256 _share) external;\r\n}\r\n\r\ncontract VaultStrategyAlpacaRabbit is VaultController, ReentrancyGuardUpgradeable {\r\n    using SafeBEP20 for IBEP20;\r\n    using SafeMath for uint;\r\n\r\n    enum STRATEGY {\r\n        ALPACA,\r\n        RABBIT\r\n    }\r\n\r\n    uint256 constant DUST = 1000;\r\n\r\n    address constant STAKING_TOKEN = 0x14016E85a25aeb13065688cAFB43044C2ef86784;\r\n\r\n    // alpaca\r\n    uint256 constant ALPACA_STAKE_PID = 20;\r\n    IBEP20 constant ALPACA_TOKEN = IBEP20(0x8F0528cE5eF7B51152A59745bEfDD91D97091d2F);\r\n    IFairLaunch constant ALPACA_FAIR_LAUNCH = IFairLaunch(0xA625AB01B08ce023B2a342Dbb12a16f2C8489A8F);\r\n    IAlpacaBearToken constant ALPACA_IB = IAlpacaBearToken(0x3282d2a151ca00BfE7ed17Aa16E42880248CD3Cd);\r\n\r\n    // rabbit\r\n    uint256 constant RABBIT_STAKE_PID = 1;\r\n    IBEP20 constant RABBIT_TOKEN = IBEP20(address(0));\r\n    IFairLaunch constant RABBIT_FAIR_LAUNCH = IFairLaunch(address(0));\r\n    IBEP20 constant RABBIT_IB = IBEP20(address(0));\r\n    IRabbitBank constant RABBIT_BANK = IRabbitBank(address(0));\r\n\r\n    // pancake\r\n    IPancakeRouter02 private constant PANCAKE_ROUTER = IPancakeRouter02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\r\n\r\n    IStrategyHelper constant STRATEGY_HELPER = IStrategyHelper(0x486B662A191E29cF767862ACE492c89A6c834fB4);\r\n\r\n    STRATEGY public currentStrategy;\r\n    uint public totalShares;\r\n    mapping (address => uint) private _shares;\r\n    mapping (address => uint) private _principal;\r\n    mapping (address => uint) private _depositedAt;\r\n\r\n    event Deposited(address indexed user, uint amount);\r\n    event Withdrawn(address indexed user, uint amount, uint withdrawalFee);\r\n    event ProfitPaid(address indexed user, uint profit, uint performanceFee);\r\n    event HunnyPaid(address indexed user, uint profit, uint performanceFee);\r\n    event Harvested(uint profit);\r\n\r\n    // require a duration to withdraw or getReward\r\n    modifier safeDuration(address account) {\r\n        uint256 duration = block.timestamp.sub(_depositedAt[account]);\r\n        require(duration > 10 seconds, \"VaultStrategyAlpacaRabbit: locked, try after 10s\");\r\n        _;\r\n    }\r\n\r\n    /* ========== INITIALIZER ========== */\r\n\r\n    function initialize() external initializer {\r\n        __VaultController_init(IBEP20(STAKING_TOKEN));\r\n        __ReentrancyGuard_init();\r\n\r\n        currentStrategy = STRATEGY.ALPACA;\r\n\r\n        setMinter(0xf6F47e12C2BA03566aC90276eA76Daa9c8216E14);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalShares;\r\n    }\r\n\r\n    function balance() public view returns (uint256 amount) {\r\n        if (currentStrategy == STRATEGY.ALPACA) {\r\n            (uint256 ibAmount, , , ) = ALPACA_FAIR_LAUNCH.userInfo(_getStakePid(), address(this));\r\n            amount = ibAmount.mul(ALPACA_IB.totalToken()).div(ALPACA_IB.totalSupply());\r\n        } else {\r\n            (uint256 ibAmount, , , ) = RABBIT_FAIR_LAUNCH.userInfo(_getStakePid(), address(this));\r\n            amount = ibAmount.mul(RABBIT_BANK.totalToken(address(_stakingToken))).div(RABBIT_IB.totalSupply());\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        if (totalShares == 0) return 0;\r\n        return balance().mul(sharesOf(account)).div(totalShares);\r\n    }\r\n\r\n    function sharesOf(address account) public view returns (uint256) {\r\n        return _shares[account];\r\n    }\r\n\r\n    function principalOf(address account) public view returns (uint256) {\r\n        return _principal[account];\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        if (balanceOf(account) >= principalOf(account) + DUST) {\r\n            return balanceOf(account).sub(principalOf(account));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // helper function returns reward in cake + hunny\r\n    function profitOf(address account) public view returns (uint _cake, uint _hunny) {\r\n        uint amount = earned(account);\r\n        uint performanceFee = canMint() ? _minter.performanceFee(amount) : 0;\r\n\r\n        if (canMint()) {\r\n            uint performanceFee = _minter.performanceFee(amount);\r\n            // cake amount\r\n            _cake = amount.sub(performanceFee);\r\n            _hunny = _minter.amountHunnyToMint(STRATEGY_HELPER.tvlInBNB(address(_stakingToken), performanceFee));\r\n        } else {\r\n            _cake = amount;\r\n            _hunny = 0;\r\n        }\r\n    }\r\n\r\n    function priceShare() external view returns(uint) {\r\n        if (totalShares == 0) return 1e18;\r\n        return balance().mul(1e18).div(totalShares);\r\n    }\r\n\r\n    function depositedAt(address account) external view returns (uint) {\r\n        return _depositedAt[account];\r\n    }\r\n\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"less amount\");\r\n\r\n        uint256 rewardAmount = _depositStakingToken(0);\r\n        _harvest(rewardAmount);\r\n\r\n        uint256 poolBalance = balance();\r\n        uint256 shares = 0;\r\n        if (totalShares == 0) {\r\n            shares = amount;\r\n        } else {\r\n            shares = (amount.mul(totalShares)).div(poolBalance);\r\n        }\r\n\r\n        totalShares = totalShares.add(shares);\r\n        _shares[msg.sender] = _shares[msg.sender].add(shares);\r\n        _principal[msg.sender] = _principal[msg.sender].add(amount);\r\n        _depositedAt[msg.sender] = block.timestamp;\r\n\r\n        _stakingToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        _depositStakingToken(amount);\r\n        emit Deposited(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external nonReentrant safeDuration(msg.sender) {\r\n        amount = Math.min(amount, _principal[msg.sender]);\r\n        uint256 shares = Math.min(amount.mul(totalShares).div(balance()), _shares[msg.sender]);\r\n\r\n        totalShares = totalShares.sub(shares);\r\n        _shares[msg.sender] = _shares[msg.sender].sub(shares);\r\n        _principal[msg.sender] = _principal[msg.sender].sub(amount);\r\n\r\n        (uint256 withdrawAmount, uint256 rewardAmount) = _withdrawStakingToken(amount);\r\n\r\n        uint withdrawalFee = canMint() ? _minter.withdrawalFee(withdrawAmount, _depositedAt[msg.sender]) : 0;\r\n        if (withdrawalFee > DUST) {\r\n            _stakingToken.approve(address(_minter), 0);\r\n            _stakingToken.approve(address(_minter), withdrawalFee);\r\n            _minter.mintFor(address(_stakingToken), withdrawalFee, 0, msg.sender, _depositedAt[msg.sender]);\r\n            withdrawAmount = withdrawAmount.sub(withdrawalFee);\r\n        }\r\n\r\n        _stakingToken.safeTransfer(msg.sender, withdrawAmount);\r\n\r\n        emit Withdrawn(msg.sender, withdrawAmount, withdrawalFee);\r\n\r\n        _harvest(rewardAmount);\r\n    }\r\n\r\n    function withdrawAll() external nonReentrant safeDuration(msg.sender) {\r\n        uint amount = balanceOf(msg.sender);\r\n        uint principal = principalOf(msg.sender);\r\n        uint depositTimestamp = _depositedAt[msg.sender];\r\n\r\n        totalShares = totalShares.sub(_shares[msg.sender]);\r\n        delete _shares[msg.sender];\r\n        delete _principal[msg.sender];\r\n        delete _depositedAt[msg.sender];\r\n\r\n        (uint withdrawAmount, uint alpacaAmount) = _withdrawStakingToken(amount);\r\n\r\n        uint profit = withdrawAmount > principal ? withdrawAmount.sub(principal) : 0;\r\n        uint withdrawalFee = canMint() ? _minter.withdrawalFee(principal, depositTimestamp) : 0;\r\n        uint performanceFee = canMint() ? _minter.performanceFee(profit) : 0;\r\n\r\n        if (withdrawalFee.add(performanceFee) > DUST) {\r\n            uint256 totalFee = withdrawalFee.add(performanceFee);\r\n            _stakingToken.approve(address(_minter), 0);\r\n            _stakingToken.approve(address(_minter), totalFee);\r\n            _minter.mintFor(address(_stakingToken), withdrawalFee, performanceFee, msg.sender, depositTimestamp);\r\n            if (performanceFee > 0) {\r\n                emit ProfitPaid(msg.sender, profit, performanceFee);\r\n            }\r\n            withdrawAmount = withdrawAmount.sub(withdrawalFee).sub(performanceFee);\r\n        }\r\n\r\n        _stakingToken.safeTransfer(msg.sender, withdrawAmount);\r\n        emit Withdrawn(msg.sender, withdrawAmount, withdrawalFee);\r\n\r\n        _harvest(alpacaAmount);\r\n    }\r\n\r\n    function getReward() external nonReentrant safeDuration(msg.sender) {\r\n        uint256 amount = earned(msg.sender);\r\n        uint256 shares = Math.min(amount.mul(totalShares).div(balance()), _shares[msg.sender]);\r\n\r\n        totalShares = totalShares.sub(shares);\r\n        _shares[msg.sender] = _shares[msg.sender].sub(shares);\r\n        _cleanupIfDustShares();\r\n\r\n        (uint256 withdrawAmount, uint256 rewardAmount) = _withdrawStakingToken(amount);\r\n\r\n        uint performanceFee = canMint() ? _minter.performanceFee(withdrawAmount) : 0;\r\n        if (performanceFee > DUST) {\r\n            _stakingToken.approve(address(_minter), 0);\r\n            _stakingToken.approve(address(_minter), performanceFee);\r\n            _minter.mintFor(address(_stakingToken), 0, performanceFee, msg.sender,  _depositedAt[msg.sender]);\r\n            withdrawAmount = withdrawAmount.sub(performanceFee);\r\n        }\r\n\r\n        _stakingToken.safeTransfer(msg.sender, withdrawAmount);\r\n\r\n        emit ProfitPaid(msg.sender, withdrawAmount, performanceFee);\r\n\r\n        _harvest(rewardAmount);\r\n    }\r\n\r\n    function harvest() external {\r\n        uint256 rewardAmount = _depositStakingToken(0);\r\n        _harvest(rewardAmount);\r\n    }\r\n\r\n    function switchStrategy(uint256 strategy) external onlyOwner {\r\n        if (currentStrategy != STRATEGY(strategy)) {\r\n            uint256 rewardAmount = _depositStakingToken(0);\r\n            _harvest(rewardAmount);\r\n\r\n            uint256 poolBalance = balance();\r\n            (uint256 withdrawAmount, ) = _withdrawStakingToken(poolBalance);\r\n\r\n            currentStrategy = STRATEGY(strategy);\r\n\r\n            _depositStakingToken(withdrawAmount);\r\n        }\r\n    }\r\n\r\n    // safe check balance\r\n    // make sure harvest before call deposit\r\n    function _depositStakingToken(uint256 amount) private returns (uint256 rewardAmount) {\r\n        uint256 pid = _getStakePid();\r\n        IBEP20 rewardToken = _getRewardToken();\r\n        address bearingToken = _getBearingToken();\r\n        IFairLaunch fairLaunch = _getFairLaunch();\r\n\r\n        uint256 rewardBefore = rewardToken.balanceOf(address(this));\r\n\r\n        if (amount > 0) {\r\n            uint256 ibBefore = IBEP20(bearingToken).balanceOf(address(this));\r\n            if (currentStrategy == STRATEGY.ALPACA) {\r\n                _stakingToken.safeApprove(address(ALPACA_IB), 0);\r\n                _stakingToken.safeApprove(address(ALPACA_IB), amount);\r\n                ALPACA_IB.deposit(amount);\r\n            } else {\r\n                _stakingToken.safeApprove(address(RABBIT_BANK), 0);\r\n                _stakingToken.safeApprove(address(RABBIT_BANK), amount);\r\n                RABBIT_BANK.deposit(address(_stakingToken), amount);\r\n            }\r\n            uint256 ibAmount = IBEP20(bearingToken).balanceOf(address(this)).sub(ibBefore);\r\n\r\n            // deposit fair launch\r\n            IBEP20(bearingToken).approve(address(fairLaunch), 0);\r\n            IBEP20(bearingToken).approve(address(fairLaunch), ibAmount);\r\n            fairLaunch.deposit(address(this), pid, ibAmount);\r\n        } else {\r\n            fairLaunch.deposit(address(this), pid, 0);\r\n        }\r\n\r\n        rewardAmount = rewardToken.balanceOf(address(this)).sub(rewardBefore);\r\n    }\r\n\r\n    // withdraw underlying amount from fair launch and ib token\r\n    // make sure harvest before call withdraw\r\n    function _withdrawStakingToken(uint256 amount) private returns (uint256 withdrawAmount, uint256 rewardAmount) {\r\n        uint256 pid = _getStakePid();\r\n        IBEP20 rewardToken = _getRewardToken();\r\n        IFairLaunch fairLaunch = _getFairLaunch();\r\n\r\n        uint256 rewardBefore = rewardToken.balanceOf(address(this));\r\n\r\n        uint256 ibAmount;\r\n\r\n        if (currentStrategy == STRATEGY.ALPACA) {\r\n            ibAmount = amount.mul(ALPACA_IB.totalSupply()).div(ALPACA_IB.totalToken());\r\n        } else {\r\n            ibAmount = amount.mul(RABBIT_IB.totalSupply()).div(RABBIT_BANK.totalToken(address(_stakingToken)));\r\n        }\r\n\r\n        fairLaunch.withdraw(address(this), pid, ibAmount);\r\n\r\n        // withdraw from fair launch\r\n        uint256 stakingTokenBefore = _stakingToken.balanceOf(address(this));\r\n\r\n        if (currentStrategy == STRATEGY.ALPACA) {\r\n            ALPACA_IB.withdraw(ibAmount);\r\n        } else {\r\n            RABBIT_BANK.withdraw(address(_stakingToken), ibAmount);\r\n        }\r\n\r\n        withdrawAmount = _stakingToken.balanceOf(address(this)).sub(stakingTokenBefore);\r\n        rewardAmount = rewardToken.balanceOf(address(this)).sub(rewardBefore);\r\n\r\n        // reinvest dust\r\n        if (withdrawAmount > amount) {\r\n            uint256 dust = withdrawAmount.sub(amount);\r\n            _depositStakingToken(dust);\r\n\r\n            withdrawAmount = amount;\r\n        }\r\n    }\r\n\r\n    function _harvest(uint256 rewardAmount) private {\r\n        IBEP20 rewardToken = _getRewardToken();\r\n\r\n        if (rewardAmount > DUST) {\r\n            emit Harvested(rewardAmount);\r\n\r\n            // convert reward (ALPACA or RABBIT) to staking token\r\n            uint256 stakingTokenBefore = _stakingToken.balanceOf(address(this));\r\n            address[] memory path = new address[](3);\r\n            (path[0], path[1], path[2]) = (address(rewardToken), PANCAKE_ROUTER.WETH(), address(_stakingToken));\r\n\r\n            rewardToken.safeApprove(address(PANCAKE_ROUTER), 0);\r\n            rewardToken.safeApprove(address(PANCAKE_ROUTER), rewardAmount);\r\n\r\n            PANCAKE_ROUTER.swapExactTokensForTokens(rewardAmount, 0, path, address(this), block.timestamp);\r\n            uint256 stakingTokenAmount = _stakingToken.balanceOf(address(this)).sub(stakingTokenBefore);\r\n\r\n            _depositStakingToken(stakingTokenAmount);\r\n        }\r\n    }\r\n\r\n    function _cleanupIfDustShares() private {\r\n        uint256 shares = _shares[msg.sender];\r\n        if (shares > 0 && shares < DUST) {\r\n            totalShares = totalShares.sub(shares);\r\n            delete _shares[msg.sender];\r\n        }\r\n    }\r\n\r\n    function _getRewardToken() private view returns (IBEP20) {\r\n        if (currentStrategy == STRATEGY.ALPACA) {\r\n            return ALPACA_TOKEN;\r\n        } else {\r\n            return RABBIT_TOKEN;\r\n        }\r\n    }\r\n\r\n    function _getBearingToken() private view returns (address) {\r\n        if (currentStrategy == STRATEGY.ALPACA) {\r\n            return address(ALPACA_IB);\r\n        } else {\r\n            return address(RABBIT_IB);\r\n        }\r\n    }\r\n\r\n    function _getFairLaunch() private view returns (IFairLaunch) {\r\n        if (currentStrategy == STRATEGY.ALPACA) {\r\n            return ALPACA_FAIR_LAUNCH;\r\n        } else {\r\n            return RABBIT_FAIR_LAUNCH;\r\n        }\r\n    }\r\n\r\n    function _getStakePid() private view returns (uint256) {\r\n        if (currentStrategy == STRATEGY.ALPACA) {\r\n            return ALPACA_STAKE_PID;\r\n        } else {\r\n            return RABBIT_STAKE_PID;\r\n        }\r\n    }\r\n\r\n    // @dev BNB must not remain balance in this contract. So dev should be able to salvage staking token transferred by mistake.\r\n    function recoverToken(address token, uint256 amount) external override onlyOwner {\r\n        IBEP20(token).safeTransfer(owner(), amount);\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"HunnyPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"ProfitPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalFee\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStrategy\",\"outputs\":[{\"internalType\":\"enum VaultStrategyAlpacaRabbit.STRATEGY\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hunnyChef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"principalOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"profitOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hunny\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHunnyChef\",\"name\":\"newHunnyChef\",\"type\":\"address\"}],\"name\":\"setHunnyChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategy\",\"type\":\"uint256\"}],\"name\":\"switchStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "VaultStrategyAlpacaRabbit", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d3c0da4663e065294d7a1af8dabaacb1bbd6f38314caac8ffc3f4acc08dd6816"}