{"SourceCode": "// Dependency file: contracts/interfaces/IERC20.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/libraries/TransferHelper.sol\r\n\r\n// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\n// pragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n// Dependency file: contracts/interfaces/ERC2917-Interface.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n// pragma solidity >=0.6.6;\r\n// import '../interfaces/IERC20.sol';\r\n\r\ninterface IERC2917 is IERC20 {\r\n\r\n    /// @dev This emit when interests amount per block is changed by the owner of the contract.\r\n    /// It emits with the old interests amount and the new interests amount.\r\n    event InterestRatePerBlockChanged (uint oldValue, uint newValue);\r\n\r\n    /// @dev This emit when a users' productivity has changed\r\n    /// It emits with the user's address and the the value after the change.\r\n    event ProductivityIncreased (address indexed user, uint value);\r\n\r\n    /// @dev This emit when a users' productivity has changed\r\n    /// It emits with the user's address and the the value after the change.\r\n    event ProductivityDecreased (address indexed user, uint value);\r\n\r\n    /// @dev Return the current contract's interests rate per block.\r\n    /// @return The amount of interests currently producing per each block.\r\n    function interestsPerBlock() external view returns (uint);\r\n\r\n    /// @notice Change the current contract's interests rate.\r\n    /// @dev Note the best practice will be restrict the gross product provider's contract address to call this.\r\n    /// @return The true/fase to notice that the value has successfully changed or not, when it succeed, it will emite the InterestRatePerBlockChanged event.\r\n    function changeInterestRatePerBlock(uint value) external returns (bool);\r\n\r\n    /// @notice It will get the productivity of given user.\r\n    /// @dev it will return 0 if user has no productivity proved in the contract.\r\n    /// @return user's productivity and overall productivity.\r\n    function getProductivity(address user) external view returns (uint, uint);\r\n\r\n    /// @notice increase a user's productivity.\r\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\r\n    /// @return true to confirm that the productivity added success.\r\n    function increaseProductivity(address user, uint value) external returns (bool);\r\n\r\n    /// @notice decrease a user's productivity.\r\n    /// @dev Note the best practice will be restrict the callee to prove of productivity's contract address.\r\n    /// @return true to confirm that the productivity removed success.\r\n    function decreaseProductivity(address user, uint value) external returns (bool);\r\n\r\n    /// @notice take() will return the interests that callee will get at current block height.\r\n    /// @dev it will always calculated by block.number, so it will change when block height changes.\r\n    /// @return amount of the interests that user are able to mint() at current block height.\r\n    function take() external view returns (uint);\r\n\r\n    /// @notice similar to take(), but with the block height joined to calculate return.\r\n    /// @dev for instance, it returns (_amount, _block), which means at block height _block, the callee has accumulated _amount of interests.\r\n    /// @return amount of interests and the block height.\r\n    function takeWithBlock() external view returns (uint, uint);\r\n\r\n    /// @notice mint the avaiable interests to callee.\r\n    /// @dev once it mint, the amount of interests will transfer to callee's address.\r\n    /// @return the amount of interests minted.\r\n    function mint() external returns (uint);\r\n}\r\n// Dependency file: contracts/libraries/ConfigNames.sol\r\n\r\n// pragma solidity >=0.5.16;\r\n\r\nlibrary ConfigNames {\r\n    bytes32 public constant PRODUCE_DGAS_RATE = bytes32('PRODUCE_DGAS_RATE');\r\n    bytes32 public constant SWAP_FEE_PERCENT = bytes32('SWAP_FEE_PERCENT');\r\n    bytes32 public constant LIST_DGAS_AMOUNT = bytes32('LIST_DGAS_AMOUNT');\r\n    bytes32 public constant UNSTAKE_DURATION = bytes32('UNSTAKE_DURATION');\r\n    bytes32 public constant REMOVE_LIQUIDITY_DURATION = bytes32('REMOVE_LIQUIDITY_DURATION');\r\n    bytes32 public constant TOKEN_TO_DGAS_PAIR_MIN_PERCENT = bytes32('TOKEN_TO_DGAS_PAIR_MIN_PERCENT');\r\n    bytes32 public constant LIST_TOKEN_FAILURE_BURN_PRECENT = bytes32('LIST_TOKEN_FAILURE_BURN_PRECENT');\r\n    bytes32 public constant LIST_TOKEN_SUCCESS_BURN_PRECENT = bytes32('LIST_TOKEN_SUCCESS_BURN_PRECENT');\r\n    bytes32 public constant PROPOSAL_DGAS_AMOUNT = bytes32('PROPOSAL_DGAS_AMOUNT');\r\n    bytes32 public constant VOTE_DURATION = bytes32('VOTE_DURATION');\r\n    bytes32 public constant VOTE_REWARD_PERCENT = bytes32('VOTE_REWARD_PERCENT');\r\n    bytes32 public constant TOKEN_PENGDING_SWITCH = bytes32('TOKEN_PENGDING_SWITCH');\r\n    bytes32 public constant TOKEN_PENGDING_TIME = bytes32('TOKEN_PENGDING_TIME');\r\n    bytes32 public constant LIST_TOKEN_SWITCH = bytes32('LIST_TOKEN_SWITCH');\r\n    bytes32 public constant DEV_PRECENT = bytes32('DEV_PRECENT');\r\n}\r\n// Dependency file: contracts/modules/BaseShareField.sol\r\n\r\n// pragma solidity >=0.6.6;\r\n// import '../interfaces/ERC2917-Interface.sol';\r\n// import '../libraries/SafeMath.sol';\r\n// import '../libraries/TransferHelper.sol';\r\n\r\ncontract BaseShareField {\r\n    using SafeMath for uint;\r\n    \r\n    uint totalProductivity;\r\n    uint accAmountPerShare;\r\n    \r\n    uint public totalShare;\r\n    uint public mintedShare;\r\n    uint public mintCumulation;\r\n    \r\n    address public shareToken;\r\n    \r\n    struct UserInfo {\r\n        uint amount;     // How many tokens the user has provided.\r\n        uint rewardDebt; // Reward debt. \r\n        uint rewardEarn; // Reward earn and not minted\r\n    }\r\n\r\n    mapping(address => UserInfo) public users;\r\n    \r\n    function _setShareToken(address _shareToken) internal {\r\n        shareToken = _shareToken;\r\n    }\r\n\r\n    // Update reward variables of the given pool to be up-to-date.\r\n    function _update() internal virtual {\r\n        if (totalProductivity == 0) {\r\n            totalShare = totalShare.add(_currentReward());\r\n            return;\r\n        }\r\n        \r\n        uint256 reward = _currentReward();\r\n        accAmountPerShare = accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\r\n        totalShare = totalShare.add(reward);\r\n    }\r\n    \r\n    function _currentReward() internal virtual view returns (uint) {\r\n        return mintedShare.add(IERC20(shareToken).balanceOf(address(this))).sub(totalShare);\r\n    }\r\n    \r\n    // Audit user's reward to be up-to-date\r\n    function _audit(address user) internal virtual {\r\n        UserInfo storage userInfo = users[user];\r\n        if (userInfo.amount > 0) {\r\n            uint pending = userInfo.amount.mul(accAmountPerShare).div(1e12).sub(userInfo.rewardDebt);\r\n            userInfo.rewardEarn = userInfo.rewardEarn.add(pending);\r\n            mintCumulation = mintCumulation.add(pending);\r\n            userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        }\r\n    }\r\n\r\n    // External function call\r\n    // This function increase user's productivity and updates the global productivity.\r\n    // the users' actual share percentage will calculated by:\r\n    // Formula:     user_productivity / global_productivity\r\n    function _increaseProductivity(address user, uint value) internal virtual returns (bool) {\r\n        require(value > 0, 'PRODUCTIVITY_VALUE_MUST_BE_GREATER_THAN_ZERO');\r\n\r\n        UserInfo storage userInfo = users[user];\r\n        _update();\r\n        _audit(user);\r\n\r\n        totalProductivity = totalProductivity.add(value);\r\n\r\n        userInfo.amount = userInfo.amount.add(value);\r\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        return true;\r\n    }\r\n\r\n    // External function call \r\n    // This function will decreases user's productivity by value, and updates the global productivity\r\n    // it will record which block this is happenning and accumulates the area of (productivity * time)\r\n    function _decreaseProductivity(address user, uint value) internal virtual returns (bool) {\r\n        UserInfo storage userInfo = users[user];\r\n        require(value > 0 && userInfo.amount >= value, 'INSUFFICIENT_PRODUCTIVITY');\r\n        \r\n        _update();\r\n        _audit(user);\r\n        \r\n        userInfo.amount = userInfo.amount.sub(value);\r\n        userInfo.rewardDebt = userInfo.amount.mul(accAmountPerShare).div(1e12);\r\n        totalProductivity = totalProductivity.sub(value);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function _takeWithAddress(address user) internal view returns (uint) {\r\n        UserInfo storage userInfo = users[user];\r\n        uint _accAmountPerShare = accAmountPerShare;\r\n        // uint256 lpSupply = totalProductivity;\r\n        if (totalProductivity != 0) {\r\n            uint reward = _currentReward();\r\n            _accAmountPerShare = _accAmountPerShare.add(reward.mul(1e12).div(totalProductivity));\r\n        }\r\n        return userInfo.amount.mul(_accAmountPerShare).div(1e12).add(userInfo.rewardEarn).sub(userInfo.rewardDebt);\r\n    }\r\n\r\n    // External function call\r\n    // When user calls this function, it will calculate how many token will mint to user from his productivity * time\r\n    // Also it calculates global token supply from last time the user mint to this time.\r\n    function _mint(address user) internal virtual returns (uint) {\r\n        _update();\r\n        _audit(user);\r\n        require(users[user].rewardEarn > 0, \"NOTHING TO MINT\");\r\n        uint amount = users[user].rewardEarn;\r\n        TransferHelper.safeTransfer(shareToken, msg.sender, amount);\r\n        users[user].rewardEarn = 0;\r\n        mintedShare += amount;\r\n        return amount;\r\n    }\r\n\r\n    // Returns how many productivity a user has and global has.\r\n    function getProductivity(address user) public virtual view returns (uint, uint) {\r\n        return (users[user].amount, totalProductivity);\r\n    }\r\n\r\n    // Returns the current gorss product rate.\r\n    function interestsPerBlock() public virtual view returns (uint) {\r\n        return accAmountPerShare;\r\n    }\r\n    \r\n}\r\n// Dependency file: contracts/interfaces/IDemaxConfig.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDemaxConfig {\r\n    function governor() external view returns (address);\r\n    function dev() external view returns (address);\r\n    function PERCENT_DENOMINATOR() external view returns (uint);\r\n    function getConfig(bytes32 _name) external view returns (uint minValue, uint maxValue, uint maxSpan, uint value, uint enable);\r\n    function getConfigValue(bytes32 _name) external view returns (uint);\r\n    function changeConfigValue(bytes32 _name, uint _value) external returns (bool);\r\n    function checkToken(address _token) external view returns(bool);\r\n    function checkPair(address tokenA, address tokenB) external view returns (bool);\r\n    function listToken(address _token) external returns (bool);\r\n    function getDefaultListTokens() external returns (address[] memory);\r\n    function platform() external view returns  (address);\r\n    function addToken(address _token) external returns (bool);\r\n}\r\n// Dependency file: contracts/interfaces/IDemaxCallee.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDemaxCallee {\r\n    function demaxCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\n// Dependency file: contracts/interfaces/IDgas.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDgas {\r\n    function amountPerBlock() external view returns (uint);\r\n    function changeInterestRatePerBlock(uint value) external returns (bool);\r\n    function getProductivity(address user) external view returns (uint, uint);\r\n    function increaseProductivity(address user, uint value) external returns (bool);\r\n    function decreaseProductivity(address user, uint value) external returns (bool);\r\n    function take() external view returns (uint);\r\n    function takeWithBlock() external view returns (uint, uint);\r\n    function mint() external returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function upgradeImpl(address _newImpl) external;\r\n    function upgradeGovernance(address _newGovernor) external;\r\n}\r\n// Dependency file: contracts/interfaces/IDemaxFactory.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IDemaxFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function contractCodeHash() external view returns (bytes32);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function isPair(address pair) external view returns (bool);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function playerPairs(address player, uint index) external view returns (address pair);\r\n    function getPlayerPairCount(address player) external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function addPlayerPair(address player, address _pair) external returns (bool);\r\n}\r\n\r\n// Dependency file: contracts/libraries/UQ112x112.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\n\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\n// Dependency file: contracts/libraries/Math.sol\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity >=0.6.6;\r\n\r\n// import './libraries/Math.sol';\r\n// import './libraries/UQ112x112.sol';\r\n// import './interfaces/IDemaxFactory.sol';\r\n// import './interfaces/IDgas.sol';\r\n// import './interfaces/IDemaxCallee.sol';\r\n// import './interfaces/IDemaxConfig.sol';\r\n// import './modules/BaseShareField.sol';\r\n// import './libraries/ConfigNames.sol';\r\n\r\ncontract DemaxPair is BaseShareField {\r\n    uint256 public version = 1;\r\n    using SafeMath for uint256;\r\n    using UQ112x112 for uint224;\r\n\r\n    uint256 public constant MINIMUM_LIQUIDITY = 10**3;\r\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n\r\n    address public FACTORY;\r\n    address public CONFIG;\r\n    address public DGAS;\r\n    address public token0;\r\n    address public token1;\r\n\r\n    uint112 private reserve0; // uses single storage slot, accessible via getReserves\r\n    uint112 private reserve1; // uses single storage slot, accessible via getReserves\r\n    uint32 private blockTimestampLast; // uses single storage slot, accessible via getReserves\r\n\r\n    uint256 public price0CumulativeLast;\r\n    uint256 public price1CumulativeLast;\r\n\r\n    uint256 public totalReward;\r\n    uint256 public remainReward;\r\n    uint256 public totalSupply;\r\n    mapping(address => uint256) public balanceOf;\r\n    event Mint(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, address indexed to, uint256 value);\r\n    event MintDGAS(address indexed player, uint256 pairMint, uint256 userMint);\r\n    mapping(address => uint256) public lastMintBlock;\r\n\r\n    uint private unlocked = 1;\r\n    modifier lock() {\r\n        require(unlocked == 1, 'Locked');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal {\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Mint(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint256 value) internal {\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Burn(from, address(0), value);\r\n    }\r\n    \r\n    function _mintDGAS() internal {\r\n        if(IDgas(DGAS).take() > 0) {\r\n            uint reward = IDgas(DGAS).mint();\r\n            uint devAmount = reward * IDemaxConfig(CONFIG).getConfigValue(ConfigNames.DEV_PRECENT) / 10000;\r\n            address devAddress = IDemaxConfig(CONFIG).dev();\r\n            _safeTransfer(DGAS, devAddress, devAmount);\r\n            remainReward = remainReward.add(reward.sub(devAmount));\r\n        }\r\n    }\r\n    \r\n    function _currentReward() internal override view returns (uint) {\r\n        uint devPercent = IDemaxConfig(CONFIG).getConfigValue(ConfigNames.DEV_PRECENT);\r\n        uint pairReward = IDgas(DGAS).take().mul(10000 - devPercent).div(10000);\r\n        return mintedShare.add(remainReward).add(pairReward).sub(totalShare);\r\n    }\r\n\r\n    function getReserves()\r\n        public\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        )\r\n    {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    function _safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) private {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'DEMAX PAIR : TRANSFER_FAILED');\r\n    }\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint256 amount0In,\r\n        uint256 amount1In,\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address indexed to\r\n    );\r\n    event SwapFee(address indexed token, address indexed to, uint256 amount);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    constructor() public {\r\n        FACTORY = msg.sender;\r\n    }\r\n\r\n    modifier onlyPlatform {\r\n        address platform = IDemaxConfig(CONFIG).platform();\r\n        require(msg.sender == platform, 'DEMAX PAIR : FORBIDDEN');\r\n        _;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(\r\n        address _token0,\r\n        address _token1,\r\n        address _config,\r\n        address _dgas\r\n    ) external {\r\n        require(msg.sender == FACTORY, 'DEMAX PAIR : FORBIDDEN');\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n        CONFIG = _config;\r\n        DGAS = _dgas;\r\n        _setShareToken(DGAS);\r\n    }\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(\r\n        uint256 balance0,\r\n        uint256 balance1,\r\n        uint112 _reserve0,\r\n        uint112 _reserve1\r\n    ) private {\r\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'DEMAX PAIR : OVERFLOW');\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            price0CumulativeLast += uint256(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\r\n            price1CumulativeLast += uint256(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs // important safety checks\r\n    function mint(address to) external onlyPlatform lock returns (uint256 liquidity) {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        uint256 balance0 = _balanceOf(token0, address(this));\r\n        uint256 balance1 = _balanceOf(token1, address(this));\r\n        uint256 amount0 = balance0.sub(_reserve0);\r\n        uint256 amount1 = balance1.sub(_reserve1);\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\r\n        }\r\n        require(liquidity > 0, 'DEMAX PAIR : INSUFFICIENT_LIQUIDITY_MINTED');\r\n        _mint(to, liquidity);\r\n        _mintDGAS();\r\n        _increaseProductivity(to, liquidity);\r\n        lastMintBlock[to] = block.number;\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs // important safety checks\r\n    function burn(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyPlatform lock returns (uint256 amount0, uint256 amount1) {\r\n        require(\r\n            block.number >=\r\n                lastMintBlock[from] + IDemaxConfig(CONFIG).getConfigValue(ConfigNames.REMOVE_LIQUIDITY_DURATION),\r\n            'DEMAX PLATFORM : REMOVE LIQUIDITY DURATION FAIL'\r\n        );\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        uint256 balance0 = _balanceOf(_token0, address(this));\r\n        uint256 balance1 = _balanceOf(_token1, address(this));\r\n        require(balanceOf[from] >= amount, 'DEMAX PAIR : INSUFFICIENT_LIQUIDITY_AMOUNT');\r\n\r\n        uint256 _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = amount.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = amount.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(amount0 > 0 && amount1 > 0, 'DEMAX PAIR : INSUFFICIENT_LIQUIDITY_BURNED');\r\n        _burn(from, amount);\r\n        _mintDGAS();\r\n        _decreaseProductivity(from, amount);\r\n\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = _balanceOf(_token0, address(this));\r\n        balance1 = _balanceOf(_token1, address(this));\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs // important safety checks\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external onlyPlatform lock {\r\n        require(amount0Out > 0 || amount1Out > 0, 'DEMAX PAIR : INSUFFICIENT_OUTPUT_AMOUNT');\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'DEMAX PAIR :  INSUFFICIENT_LIQUIDITY');\r\n        uint256 balance0;\r\n        uint256 balance1;\r\n        {\r\n            address _token0 = token0;\r\n            address _token1 = token1;\r\n            require(to != _token0 && to != _token1, 'DEMAX PAIR : INVALID_TO');\r\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\r\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\r\n            if (data.length > 0) IDemaxCallee(to).demaxCall(msg.sender, amount0Out, amount1Out, data);\r\n            balance0 = _balanceOf(_token0, address(this));\r\n            balance1 = _balanceOf(_token1, address(this));\r\n        }\r\n        uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\r\n        uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\r\n        uint256 _amount0Out = amount0Out;\r\n        uint256 _amount1Out = amount1Out;\r\n        require(amount0In > 0 || amount1In > 0, 'DEMAX PAIR : INSUFFICIENT_INPUT_AMOUNT');\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit Swap(msg.sender, amount0In, amount1In, _amount0Out, _amount1Out, to);\r\n    }\r\n\r\n    function swapFee(\r\n        uint256 amount,\r\n        address token,\r\n        address to\r\n    ) external onlyPlatform {\r\n        if (amount == 0 || token == to) return;\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves();\r\n        require(to != token0 && to != token1, 'DEMAX PAIR : INVALID_TO');\r\n        _safeTransfer(token, to, amount);\r\n        uint256 balance0 = _balanceOf(token0, address(this));\r\n        uint256 balance1 = _balanceOf(token1, address(this));\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        emit SwapFee(token, to , amount);\r\n    }\r\n\r\n    function queryReward() external view returns (uint256 rewardAmount, uint256 blockNumber) {\r\n        rewardAmount = _takeWithAddress(msg.sender);\r\n        blockNumber = block.number;\r\n    }\r\n\r\n    function mintReward() external lock returns (uint256 userReward) {\r\n        _mintDGAS();\r\n        userReward = _mint(msg.sender);\r\n        remainReward = remainReward.sub(userReward);\r\n        emit MintDGAS(msg.sender, remainReward, userReward);\r\n    }\r\n\r\n    function getDGASReserve() public view returns (uint256) {\r\n        return _balanceOf(DGAS, address(this));\r\n    }\r\n\r\n    function _balanceOf(address token, address owner) internal view returns (uint256) {\r\n        if (token == DGAS && owner == address(this)) {\r\n            return IERC20(token).balanceOf(owner).sub(remainReward);\r\n        } else {\r\n            return IERC20(token).balanceOf(owner);\r\n        }\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock {\r\n        _update(_balanceOf(token0, address(this)), _balanceOf(token1, address(this)), reserve0, reserve1);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userMint\",\"type\":\"uint256\"}],\"name\":\"MintDGAS\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DGAS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDGASReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getProductivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"_blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dgas\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMintBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCumulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userReward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardEarn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "DemaxPair", "CompilerVersion": "v0.6.6+commit.6c089d02", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3d06d3778a5251c90eb2e8dae417a357fdd52b411184d6312ab5491391ddb870"}