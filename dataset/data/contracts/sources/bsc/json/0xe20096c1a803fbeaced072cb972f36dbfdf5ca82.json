{"SourceCode": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\n\r\npragma abicoder v2;\r\npragma solidity >=0.7.6;\r\n\r\ninterface IStakePoolCreator {\r\n    function version() external returns (uint256);\r\n\r\n    function create() external returns (address);\r\n\r\n    function initialize(\r\n        address poolAddress,\r\n        address pair,\r\n        address rewardToken,\r\n        address timelock,\r\n        address stakePoolRewardFund,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\ninterface IValueLiquidRouter {\r\n    struct Swap {\r\n        address pool;\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\r\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\r\n        uint256 maxPrice;\r\n    }\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function formula() external view returns (address);\r\n\r\n    function WETH() external view returns (address);\r\n\r\n    function addLiquidity(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address pair,\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactTokensForTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        address tokenOut,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        address tokenIn,\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        address tokenIn,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        address tokenOut,\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        address tokenOut,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        address tokenIn,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function multihopBatchSwapExactIn(\r\n        Swap[][] memory swapSequences,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 totalAmountIn,\r\n        uint256 minTotalAmountOut,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 totalAmountOut);\r\n\r\n    function multihopBatchSwapExactOut(\r\n        Swap[][] memory swapSequences,\r\n        address tokenIn,\r\n        address tokenOut,\r\n        uint256 maxTotalAmountIn,\r\n        uint256 deadline\r\n    ) external payable returns (uint256 totalAmountIn);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee,\r\n        address to\r\n    ) external returns (uint256 liquidity);\r\n\r\n    function createPairETH(\r\n        address token,\r\n        uint256 amountToken,\r\n        uint32 tokenWeight,\r\n        uint32 swapFee,\r\n        address to\r\n    ) external payable returns (uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address pair,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address pair,\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n}\r\n\r\ninterface IValueLiquidFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint32 tokenWeight0, uint32 swapFee, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function formula() external view returns (address);\r\n\r\n    function protocolFee() external view returns (uint256);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function isPair(address) external view returns (bool);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint32 tokenWeightA,\r\n        uint32 swapFee\r\n    ) external returns (address pair);\r\n\r\n    function getWeightsAndSwapFee(address pair)\r\n        external\r\n        view\r\n        returns (\r\n            uint32 tokenWeight0,\r\n            uint32 tokenWeight1,\r\n            uint32 swapFee\r\n        );\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setProtocolFee(uint256) external;\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: APPROVE_FAILED\");\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FAILED\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\r\n    }\r\n}\r\n\r\ninterface IValueLiquidPair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event PaidProtocolFee(uint112 collectedFee0, uint112 collectedFee1);\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function getCollectedFees() external view returns (uint112 _collectedFee0, uint112 _collectedFee1);\r\n\r\n    function getTokenWeights() external view returns (uint32 tokenWeight0, uint32 tokenWeight1);\r\n\r\n    function getSwapFee() external view returns (uint32);\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n        uint256 amount0Out,\r\n        uint256 amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(\r\n        address,\r\n        address,\r\n        uint32,\r\n        uint32\r\n    ) external;\r\n}\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\nlibrary SafeMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b > 0, \"ds-math-division-by-zero\");\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract TimeLock {\r\n    using SafeMath for uint256;\r\n    event NewAdmin(address indexed newAdmin);\r\n    event NewPendingAdmin(address indexed newPendingAdmin);\r\n    event NewDelay(uint256 indexed newDelay);\r\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint256 value, string signature, bytes data, uint256 eta);\r\n\r\n    uint256 public constant GRACE_PERIOD = 14 days;\r\n    uint256 public constant MINIMUM_DELAY = 1 days;\r\n    uint256 public constant MAXIMUM_DELAY = 30 days;\r\n    bool private _initialized;\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    uint256 public delay;\r\n    bool public admin_initialized;\r\n    mapping(bytes32 => bool) public queuedTransactions;\r\n\r\n    constructor() {\r\n        admin_initialized = false;\r\n        _initialized = false;\r\n    }\r\n\r\n    function initialize(address _admin, uint256 _delay) public {\r\n        require(_initialized == false, \"Timelock::constructor: Initialized must be false.\");\r\n        require(_delay >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\r\n        require(_delay <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n        delay = _delay;\r\n        admin = _admin;\r\n        _initialized = true;\r\n        emit NewAdmin(admin);\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function setDelay(uint256 _delay) public {\r\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\r\n        require(_delay >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\r\n        require(_delay <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\r\n        delay = _delay;\r\n        emit NewDelay(delay);\r\n    }\r\n\r\n    function acceptAdmin() public {\r\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\r\n        admin = msg.sender;\r\n        pendingAdmin = address(0);\r\n        emit NewAdmin(admin);\r\n    }\r\n\r\n    function setPendingAdmin(address _pendingAdmin) public {\r\n        // allows one time setting of admin for deployment purposes\r\n        if (admin_initialized) {\r\n            require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\r\n        } else {\r\n            require(msg.sender == admin, \"Timelock::setPendingAdmin: First call must come from admin.\");\r\n            admin_initialized = true;\r\n        }\r\n        pendingAdmin = _pendingAdmin;\r\n\r\n        emit NewPendingAdmin(pendingAdmin);\r\n    }\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public returns (bytes32) {\r\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\r\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = true;\r\n\r\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n        return txHash;\r\n    }\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public {\r\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        queuedTransactions[txHash] = false;\r\n\r\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n    }\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint256 value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint256 eta\r\n    ) public payable returns (bytes memory) {\r\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\r\n\r\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\r\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\r\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\r\n\r\n        queuedTransactions[txHash] = false;\r\n\r\n        bytes memory callData;\r\n\r\n        if (bytes(signature).length == 0) {\r\n            callData = data;\r\n        } else {\r\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n        }\r\n\r\n        // solium-disable-next-line security/no-call-value\r\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\r\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\r\n\r\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n        return returnData;\r\n    }\r\n\r\n    function getBlockTimestamp() internal view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n}\r\n\r\ninterface IStakePool {\r\n    event Deposit(address indexed account, uint256 amount);\r\n    event AddRewardPool(uint256 indexed poolId);\r\n    event UpdateRewardPool(uint256 indexed poolId, uint256 endRewardBlock, uint256 rewardPerBlock);\r\n    event PayRewardPool(uint256 indexed poolId, address indexed rewardToken, address indexed account, uint256 pendingReward, uint256 rebaseAmount, uint256 paidReward);\r\n    event UpdateRewardRebaser(uint256 indexed poolId, address rewardRebaser);\r\n    event UpdateRewardMultiplier(uint256 indexed poolId, address rewardMultiplier);\r\n    event Withdraw(address indexed account, uint256 amount);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function stakeToken() external view returns (address);\r\n\r\n    function initialize(\r\n        address _stakeToken,\r\n        uint256 _unstakingFrozenTime,\r\n        address _rewardFund,\r\n        address _timelock\r\n    ) external;\r\n\r\n    function stake(uint256) external;\r\n\r\n    function stakeFor(address _account) external;\r\n\r\n    function withdraw(uint256) external;\r\n\r\n    function getReward(uint8 _pid, address _account) external;\r\n\r\n    function getAllRewards(address _account) external;\r\n\r\n    function claimReward() external;\r\n\r\n    function pendingReward(uint8 _pid, address _account) external view returns (uint256);\r\n\r\n    function allowRecoverRewardToken(address _token) external view returns (bool);\r\n\r\n    function getRewardPerBlock(uint8 pid) external view returns (uint256);\r\n\r\n    function rewardPoolInfoLength() external view returns (uint256);\r\n\r\n    function unfrozenStakeTime(address _account) external view returns (uint256);\r\n\r\n    function emergencyWithdraw() external;\r\n\r\n    function updateReward() external;\r\n\r\n    function updateReward(uint8 _pid) external;\r\n\r\n    function updateRewardPool(\r\n        uint8 _pid,\r\n        uint256 _endRewardBlock,\r\n        uint256 _rewardPerBlock\r\n    ) external;\r\n\r\n    function getRewardMultiplier(\r\n        uint8 _pid,\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256 _rewardPerBlock\r\n    ) external view returns (uint256);\r\n\r\n    function getRewardRebase(\r\n        uint8 _pid,\r\n        address _rewardToken,\r\n        uint256 _pendingReward\r\n    ) external view returns (uint256);\r\n\r\n    function updateRewardRebaser(uint8 _pid, address _rewardRebaser) external;\r\n\r\n    function updateRewardMultiplier(uint8 _pid, address _rewardMultiplier) external;\r\n\r\n    function getUserInfo(uint8 _pid, address _account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 amount,\r\n            uint256 rewardDebt,\r\n            uint256 accumulatedEarned,\r\n            uint256 lockReward,\r\n            uint256 lockRewardReleased\r\n        );\r\n\r\n    function addRewardPool(\r\n        address _rewardToken,\r\n        address _rewardRebaser,\r\n        address _rewardMultiplier,\r\n        uint256 _startBlock,\r\n        uint256 _endRewardBlock,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _lockRewardPercent,\r\n        uint256 _startVestingBlock,\r\n        uint256 _endVestingBlock\r\n    ) external;\r\n}\r\n\r\ninterface IStakePoolController {\r\n    event MasterCreated(address indexed farm, address indexed stakeToken, uint256 version, address timelock, address stakePoolRewardFund, uint256 totalStakePool);\r\n    event SetWhitelistStakingFor(address indexed contractAddress, bool value);\r\n    event SetWhitelistStakePool(address indexed contractAddress, int8 value);\r\n    event SetStakePoolCreator(address indexed contractAddress, uint256 verion);\r\n    event SetWhitelistRewardRebaser(address indexed contractAddress, bool value);\r\n    event SetWhitelistRewardMultiplier(address indexed contractAddress, bool value);\r\n    event SetStakePoolVerifier(address indexed contractAddress, bool value);\r\n    event ChangeGovernance(address indexed governance);\r\n    event SetFeeCollector(address indexed feeCollector);\r\n    event SetFeeToken(address indexed token);\r\n    event SetFeeAmount(uint256 indexed amount);\r\n\r\n    function allStakePools(uint256) external view returns (address stakePool);\r\n\r\n    function isStakePool(address contractAddress) external view returns (bool);\r\n\r\n    function isStakePoolVerifier(address contractAddress) external view returns (bool);\r\n\r\n    function isWhitelistStakingFor(address contractAddress) external view returns (bool);\r\n\r\n    function isWhitelistStakePool(address contractAddress) external view returns (int8);\r\n\r\n    function setStakePoolVerifier(address contractAddress, bool state) external;\r\n\r\n    function setWhitelistStakingFor(address contractAddress, bool state) external;\r\n\r\n    function setWhitelistStakePool(address contractAddress, int8 state) external;\r\n\r\n    function addStakePoolCreator(address contractAddress) external;\r\n\r\n    function isWhitelistRewardRebaser(address contractAddress) external view returns (bool);\r\n\r\n    function isAllowEmergencyWithdrawStakePool(address _address) external view returns (bool);\r\n\r\n    function setWhitelistRewardRebaser(address contractAddress, bool state) external;\r\n\r\n    function isWhitelistRewardMultiplier(address contractAddress) external view returns (bool);\r\n\r\n    function setAllowEmergencyWithdrawStakePool(address _address, bool state) external;\r\n\r\n    function setWhitelistRewardMultiplier(address contractAddress, bool state) external;\r\n\r\n    function setEnableWhitelistRewardRebaser(bool value) external;\r\n\r\n    function setEnableWhitelistRewardMultiplier(bool value) external;\r\n\r\n    function allStakePoolsLength() external view returns (uint256);\r\n\r\n    function create(\r\n        uint256 version,\r\n        address stakeToken,\r\n        address rewardToken,\r\n        uint256 rewardFundAmount,\r\n        uint256 delayTimeLock,\r\n        bytes calldata data\r\n    ) external returns (address);\r\n\r\n    function setGovernance(address) external;\r\n\r\n    function setFeeCollector(address _address) external;\r\n\r\n    function setFeeToken(address _token) external;\r\n\r\n    function setFeeAmount(uint256 _token) external;\r\n}\r\n\r\ninterface IStakePoolRewardRebaser {\r\n    function getRebaseAmount(address rewardToken, uint256 baseAmount) external view returns (uint256);\r\n}\r\n\r\ninterface IStakePoolRewardMultiplier {\r\n    function getRewardMultiplier(\r\n        uint256 _start,\r\n        uint256 _end,\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256 _rewardPerBlock\r\n    ) external view returns (uint256);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IStakePoolRewardFund {\r\n    function initialize(address _stakePool, address _timelock) external;\r\n\r\n    function safeTransfer(\r\n        address _token,\r\n        address _to,\r\n        uint256 _value\r\n    ) external;\r\n}\r\n\r\n// This implements BPool contract, and allows for generalized staking, yield farming, and token distribution.\r\ncontract StakePool is IStakePool {\r\n    using SafeMath for uint256;\r\n    uint256 public override version;\r\n    // Info of each user.\r\n    struct UserInfo {\r\n        uint256 amount;\r\n        mapping(uint8 => uint256) rewardDebt;\r\n        mapping(uint8 => uint256) reward;\r\n        mapping(uint8 => uint256) accumulatedEarned; // will accumulate every time user harvest\r\n        mapping(uint8 => uint256) lockReward;\r\n        mapping(uint8 => uint256) lockRewardReleased;\r\n        uint256 lastStakeTime;\r\n    }\r\n\r\n    // Info of each rewardPool funding.\r\n    struct RewardPoolInfo {\r\n        address rewardToken; // Address of rewardPool token contract.\r\n        address rewardRebaser; // Address of rewardRebaser contract.\r\n        address rewardMultiplier; // Address of rewardMultiplier contract.\r\n        uint256 startRewardBlock; // Start reward block number that rewardPool distribution occurs.\r\n        uint256 lastRewardBlock; // Last block number that rewardPool distribution occurs.\r\n        uint256 endRewardBlock; // Block number which rewardPool distribution ends.\r\n        uint256 rewardPerBlock; // Reward token amount to distribute per block.\r\n        uint256 accRewardPerShare; // Accumulated rewardPool per share, times 1e18.\r\n        uint256 lockRewardPercent; // Lock reward percent - 0 to disable lock & vesting\r\n        uint256 startVestingBlock; // Block number which vesting starts.\r\n        uint256 endVestingBlock; // Block number which vesting ends.\r\n        uint256 numOfVestingBlocks;\r\n        uint256 totalPaidRewards;\r\n    }\r\n\r\n    mapping(address => UserInfo) public userInfo;\r\n    RewardPoolInfo[] public rewardPoolInfo;\r\n    address public override stakeToken;\r\n    address public rewardFund;\r\n    address public timelock;\r\n    address public controller;\r\n\r\n    uint256 public balance;\r\n    uint256 public unstakingFrozenTime = 3 days;\r\n    uint256 private unlocked = 1;\r\n    bool private _initialized = false;\r\n    uint256 public constant BLOCKS_PER_DAY = 6528;\r\n\r\n    constructor(address _controller, uint256 _version) {\r\n        controller = _controller;\r\n        timelock = msg.sender;\r\n        version = _version;\r\n    }\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, \"StakePool: LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n    modifier onlyTimeLock() {\r\n        require(msg.sender == timelock, \"StakePool: !timelock\");\r\n        _;\r\n    }\r\n\r\n    function allowRecoverRewardToken(address _token) external view override returns (bool) {\r\n        for (uint8 pid = 0; pid < rewardPoolInfo.length; ++pid) {\r\n            RewardPoolInfo storage rewardPool = rewardPoolInfo[pid];\r\n            if (rewardPool.rewardToken == _token) {\r\n                // do not allow to drain reward token if less than 30 days after pool ends\r\n                if (block.number < (rewardPool.endRewardBlock + (BLOCKS_PER_DAY * 30))) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(\r\n        address _stakeToken,\r\n        uint256 _unstakingFrozenTime,\r\n        address _rewardFund,\r\n        address _timelock\r\n    ) external override {\r\n        require(_initialized == false, \"StakePool: Initialize must be false.\");\r\n        require(unstakingFrozenTime <= 30 days, \"StakePool: unstakingFrozenTime > 30 days\");\r\n        stakeToken = _stakeToken;\r\n        unstakingFrozenTime = _unstakingFrozenTime;\r\n        rewardFund = _rewardFund;\r\n        timelock = _timelock;\r\n        _initialized = true;\r\n    }\r\n\r\n    function addRewardPool(\r\n        address _rewardToken,\r\n        address _rewardRebaser,\r\n        address _rewardMultiplier,\r\n        uint256 _startBlock,\r\n        uint256 _endRewardBlock,\r\n        uint256 _rewardPerBlock,\r\n        uint256 _lockRewardPercent,\r\n        uint256 _startVestingBlock,\r\n        uint256 _endVestingBlock\r\n    ) external override lock onlyTimeLock {\r\n        require(rewardPoolInfo.length <= 16, \"StakePool: Reward pool length > 16\");\r\n        require(IStakePoolController(controller).isWhitelistRewardRebaser(_rewardRebaser), \"StakePool: Invalid reward rebaser\");\r\n        require(IStakePoolController(controller).isWhitelistRewardMultiplier(_rewardMultiplier), \"StakePool: Invalid reward multiplier\");\r\n        require(_startVestingBlock <= _endVestingBlock, \"StakePool: startVestingBlock > endVestingBlock\");\r\n        _startBlock = (block.number > _startBlock) ? block.number : _startBlock;\r\n        require(_startBlock < _endRewardBlock, \"StakePool: startBlock >= endRewardBlock\");\r\n        require(_lockRewardPercent <= 100, \"StakePool: invalid lockRewardPercent\");\r\n        updateReward();\r\n        rewardPoolInfo.push(\r\n            RewardPoolInfo({\r\n                rewardToken: _rewardToken,\r\n                rewardRebaser: _rewardRebaser,\r\n                startRewardBlock: _startBlock,\r\n                rewardMultiplier: _rewardMultiplier,\r\n                lastRewardBlock: _startBlock,\r\n                endRewardBlock: _endRewardBlock,\r\n                rewardPerBlock: _rewardPerBlock,\r\n                accRewardPerShare: 0,\r\n                lockRewardPercent: _lockRewardPercent,\r\n                startVestingBlock: _startVestingBlock,\r\n                endVestingBlock: _endVestingBlock,\r\n                numOfVestingBlocks: _endVestingBlock - _startVestingBlock,\r\n                totalPaidRewards: 0\r\n            })\r\n        );\r\n        emit AddRewardPool(rewardPoolInfo.length - 1);\r\n    }\r\n\r\n    function updateRewardMultiplier(uint8 _pid, address _rewardMultiplier) external override lock onlyTimeLock {\r\n        require(IStakePoolController(controller).isWhitelistRewardMultiplier(_rewardMultiplier), \"StakePool: Invalid reward multiplier\");\r\n        updateReward(_pid);\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\r\n        rewardPool.rewardMultiplier = _rewardMultiplier;\r\n        emit UpdateRewardMultiplier(_pid, _rewardMultiplier);\r\n    }\r\n\r\n    function updateRewardRebaser(uint8 _pid, address _rewardRebaser) external override lock onlyTimeLock {\r\n        require(IStakePoolController(controller).isWhitelistRewardRebaser(_rewardRebaser), \"StakePool: Invalid reward rebaser\");\r\n        updateReward(_pid);\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\r\n        rewardPool.rewardRebaser = _rewardRebaser;\r\n        emit UpdateRewardRebaser(_pid, _rewardRebaser);\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getRewardMultiplier(\r\n        uint8 _pid,\r\n        uint256 _from,\r\n        uint256 _to,\r\n        uint256 _rewardPerBlock\r\n    ) public view override returns (uint256) {\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\r\n        address rewardMultiplier = rewardPool.rewardMultiplier;\r\n        if (rewardMultiplier == address(0)) {\r\n            return _to.sub(_from).mul(_rewardPerBlock);\r\n        }\r\n        return IStakePoolRewardMultiplier(rewardMultiplier).getRewardMultiplier(rewardPool.startRewardBlock, rewardPool.endRewardBlock, _from, _to, _rewardPerBlock);\r\n    }\r\n\r\n    function getRewardRebase(\r\n        uint8 _pid,\r\n        address _rewardToken,\r\n        uint256 _pendingReward\r\n    ) public view override returns (uint256) {\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\r\n        address rewardRebaser = rewardPool.rewardRebaser;\r\n        if (rewardRebaser == address(0)) {\r\n            return _pendingReward;\r\n        }\r\n        return IStakePoolRewardRebaser(rewardRebaser).getRebaseAmount(_rewardToken, _pendingReward);\r\n    }\r\n\r\n    function getRewardPerBlock(uint8 pid) external view override returns (uint256) {\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[pid];\r\n        uint256 rewardPerBlock = rewardPool.rewardPerBlock;\r\n        if (block.number < rewardPool.startRewardBlock || block.number > rewardPool.endRewardBlock) return 0;\r\n        uint256 reward = getRewardMultiplier(pid, block.number, block.number + 1, rewardPerBlock);\r\n        return getRewardRebase(pid, rewardPool.rewardToken, reward);\r\n    }\r\n\r\n    function updateRewardPool(\r\n        uint8 _pid,\r\n        uint256 _endRewardBlock,\r\n        uint256 _rewardPerBlock\r\n    ) external override lock onlyTimeLock {\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\r\n        require(block.number <= rewardPool.endRewardBlock && block.number <= _endRewardBlock, \"StakePool: blockNumber > endRewardBlock\");\r\n        updateReward(_pid);\r\n        rewardPool.endRewardBlock = _endRewardBlock;\r\n        rewardPool.rewardPerBlock = _rewardPerBlock;\r\n        emit UpdateRewardPool(_pid, _endRewardBlock, _rewardPerBlock);\r\n    }\r\n\r\n    function stake(uint256 _amount) external override lock {\r\n        TransferHelper.safeTransferFrom(stakeToken, msg.sender, address(this), _amount);\r\n        _stakeFor(msg.sender);\r\n    }\r\n\r\n    function stakeFor(address _account) external override lock {\r\n        require(IStakePoolController(controller).isWhitelistStakingFor(msg.sender), \"StakePool: Invalid sender\");\r\n        _stakeFor(_account);\r\n    }\r\n\r\n    function _stakeFor(address _account) internal {\r\n        uint256 _amount = IERC20(stakeToken).balanceOf(address(this)).sub(balance);\r\n        require(_amount > 0, \"StakePool: Invalid balance\");\r\n        balance = balance.add(_amount);\r\n        UserInfo storage user = userInfo[_account];\r\n        getAllRewards(_account);\r\n        user.amount = user.amount.add(_amount);\r\n        uint8 rewardPoolLength = uint8(rewardPoolInfo.length);\r\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\r\n            user.rewardDebt[_pid] = user.amount.mul(rewardPoolInfo[_pid].accRewardPerShare).div(1e18);\r\n        }\r\n        user.lastStakeTime = block.timestamp;\r\n        emit Deposit(_account, _amount);\r\n    }\r\n\r\n    function rewardPoolInfoLength() public view override returns (uint256) {\r\n        return rewardPoolInfo.length;\r\n    }\r\n\r\n    function unfrozenStakeTime(address _account) public view override returns (uint256) {\r\n        return userInfo[_account].lastStakeTime + unstakingFrozenTime;\r\n    }\r\n\r\n    function removeStakeInternal(uint256 _amount) internal {\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        require(user.amount >= _amount, \"StakePool: invalid withdraw amount\");\r\n        require(block.timestamp >= user.lastStakeTime.add(unstakingFrozenTime), \"StakePool: frozen\");\r\n        getAllRewards(msg.sender);\r\n        balance = balance.sub(_amount);\r\n        user.amount = user.amount.sub(_amount);\r\n        uint8 rewardPoolLength = uint8(rewardPoolInfo.length);\r\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\r\n            user.rewardDebt[_pid] = user.amount.mul(rewardPoolInfo[_pid].accRewardPerShare).div(1e18);\r\n        }\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public override lock {\r\n        removeStakeInternal(_amount);\r\n        TransferHelper.safeTransfer(stakeToken, msg.sender, _amount);\r\n        emit Withdraw(msg.sender, _amount);\r\n    }\r\n\r\n    function exit() external {\r\n        withdraw(userInfo[msg.sender].amount);\r\n    }\r\n\r\n    function getAllRewards(address _account) public override {\r\n        uint8 rewardPoolLength = uint8(rewardPoolInfo.length);\r\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\r\n            getReward(_pid, _account);\r\n        }\r\n    }\r\n\r\n    function claimReward() external override {\r\n        getAllRewards(msg.sender);\r\n    }\r\n\r\n    function getReward(uint8 _pid, address _account) public override {\r\n        updateReward(_pid);\r\n        UserInfo storage user = userInfo[_account];\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\r\n        uint256 _accRewardPerShare = rewardPool.accRewardPerShare;\r\n        uint256 _pendingReward = user.amount.mul(_accRewardPerShare).div(1e18).sub(user.rewardDebt[_pid]);\r\n        uint256 _lockRewardPercent = rewardPool.lockRewardPercent;\r\n        if (_lockRewardPercent > 0) {\r\n            if (block.number > rewardPool.endVestingBlock) {\r\n                uint256 _unlockReward = user.lockReward[_pid].sub(user.lockRewardReleased[_pid]);\r\n                if (_unlockReward > 0) {\r\n                    _pendingReward = _pendingReward.add(_unlockReward);\r\n                    user.lockRewardReleased[_pid] = user.lockRewardReleased[_pid].add(_unlockReward);\r\n                }\r\n            } else {\r\n                if (_pendingReward > 0) {\r\n                    uint256 _toLocked = _pendingReward.mul(_lockRewardPercent).div(100);\r\n                    _pendingReward = _pendingReward.sub(_toLocked);\r\n                    user.lockReward[_pid] = user.lockReward[_pid].add(_toLocked);\r\n                }\r\n                uint256 _startVestingBlock = rewardPool.startVestingBlock;\r\n                if (block.number > _startVestingBlock) {\r\n                    uint256 _toReleased = user.lockReward[_pid].mul(block.number.sub(_startVestingBlock)).div(rewardPool.numOfVestingBlocks);\r\n                    uint256 _lockRewardReleased = user.lockRewardReleased[_pid];\r\n                    if (_toReleased > _lockRewardReleased) {\r\n                        uint256 _unlockReward = _toReleased.sub(_lockRewardReleased);\r\n                        user.lockRewardReleased[_pid] = _lockRewardReleased.add(_unlockReward);\r\n                        _pendingReward = _pendingReward.add(_unlockReward);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (_pendingReward > 0) {\r\n            user.accumulatedEarned[_pid] = user.accumulatedEarned[_pid].add(_pendingReward);\r\n            rewardPool.totalPaidRewards = rewardPool.totalPaidRewards.add(_pendingReward);\r\n            user.rewardDebt[_pid] = user.amount.mul(_accRewardPerShare).div(1e18);\r\n            uint256 reward = user.reward[_pid].add(_pendingReward);\r\n            user.reward[_pid] = reward;\r\n            // Safe reward transfer, just in case if rounding error causes pool to not have enough reward amount\r\n            address rewardToken = rewardPool.rewardToken;\r\n            uint256 rewardBalance = IERC20(rewardToken).balanceOf(rewardFund);\r\n            if (rewardBalance > 0) {\r\n                user.reward[_pid] = 0;\r\n                uint256 rebaseAmount = getRewardRebase(_pid, rewardToken, reward);\r\n                uint256 paidAmount = rebaseAmount > rewardBalance ? rewardBalance : rebaseAmount;\r\n                IStakePoolRewardFund(rewardFund).safeTransfer(rewardToken, _account, paidAmount);\r\n                emit PayRewardPool(_pid, rewardToken, _account, reward, rebaseAmount, paidAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function pendingReward(uint8 _pid, address _account) external view override returns (uint256) {\r\n        UserInfo storage user = userInfo[_account];\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\r\n        uint256 _accRewardPerShare = rewardPool.accRewardPerShare;\r\n        uint256 lpSupply = IERC20(stakeToken).balanceOf(address(this));\r\n        uint256 _endRewardBlock = rewardPool.endRewardBlock;\r\n        uint256 _endRewardBlockApplicable = block.number > _endRewardBlock ? _endRewardBlock : block.number;\r\n        uint256 _lastRewardBlock = rewardPool.lastRewardBlock;\r\n        if (_endRewardBlockApplicable > _lastRewardBlock && lpSupply != 0) {\r\n            uint256 _incRewardPerShare = getRewardMultiplier(_pid, _lastRewardBlock, _endRewardBlockApplicable, rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\r\n            _accRewardPerShare = _accRewardPerShare.add(_incRewardPerShare);\r\n        }\r\n        uint256 pending = user.amount.mul(_accRewardPerShare).div(1e18).add(user.reward[_pid]).sub(user.rewardDebt[_pid]);\r\n        return getRewardRebase(_pid, rewardPool.rewardToken, pending);\r\n    }\r\n\r\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\r\n    function emergencyWithdraw() external override lock {\r\n        require(IStakePoolController(controller).isAllowEmergencyWithdrawStakePool(address(this)), \"StakePool: Not allow emergencyWithdraw\");\r\n        UserInfo storage user = userInfo[msg.sender];\r\n        uint256 amount = user.amount;\r\n        balance = balance.sub(amount);\r\n        user.amount = 0;\r\n        TransferHelper.safeTransfer(stakeToken, msg.sender, amount);\r\n        uint8 rewardPoolLength = uint8(rewardPoolInfo.length);\r\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\r\n            user.rewardDebt[_pid] = 0;\r\n            user.reward[_pid] = 0;\r\n        }\r\n    }\r\n\r\n    function getUserInfo(uint8 _pid, address _account)\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            uint256 amount,\r\n            uint256 rewardDebt,\r\n            uint256 accumulatedEarned,\r\n            uint256 lockReward,\r\n            uint256 lockRewardReleased\r\n        )\r\n    {\r\n        UserInfo storage user = userInfo[_account];\r\n        amount = user.amount;\r\n        rewardDebt = user.rewardDebt[_pid];\r\n        accumulatedEarned = user.accumulatedEarned[_pid];\r\n        lockReward = user.lockReward[_pid];\r\n        lockRewardReleased = user.lockRewardReleased[_pid];\r\n    }\r\n\r\n    function updateReward() public override {\r\n        uint8 rewardPoolLength = uint8(rewardPoolInfo.length);\r\n        for (uint8 _pid = 0; _pid < rewardPoolLength; ++_pid) {\r\n            updateReward(_pid);\r\n        }\r\n    }\r\n\r\n    function updateReward(uint8 _pid) public override {\r\n        RewardPoolInfo storage rewardPool = rewardPoolInfo[_pid];\r\n        uint256 _endRewardBlock = rewardPool.endRewardBlock;\r\n        uint256 _endRewardBlockApplicable = block.number > _endRewardBlock ? _endRewardBlock : block.number;\r\n        uint256 _lastRewardBlock = rewardPool.lastRewardBlock;\r\n        if (_endRewardBlockApplicable > _lastRewardBlock) {\r\n            uint256 lpSupply = IERC20(stakeToken).balanceOf(address(this));\r\n            if (lpSupply > 0) {\r\n                uint256 _incRewardPerShare = getRewardMultiplier(_pid, _lastRewardBlock, _endRewardBlockApplicable, rewardPool.rewardPerBlock).mul(1e18).div(lpSupply);\r\n                rewardPool.accRewardPerShare = rewardPool.accRewardPerShare.add(_incRewardPerShare);\r\n            }\r\n            rewardPool.lastRewardBlock = _endRewardBlockApplicable;\r\n        }\r\n    }\r\n}\r\n\r\ncontract StakePoolCreator is IStakePoolCreator {\r\n    uint256 public override version = 3001;\r\n\r\n    struct PoolRewardInfo {\r\n        address rewardRebaser;\r\n        address rewardMultiplier;\r\n        uint256 startBlock;\r\n        uint256 endRewardBlock;\r\n        uint256 rewardPerBlock;\r\n        uint256 lockRewardPercent;\r\n        uint256 startVestingBlock;\r\n        uint256 endVestingBlock;\r\n        uint256 unstakingFrozenTime;\r\n    }\r\n\r\n    function create() external override returns (address) {\r\n        StakePool pool = new StakePool(msg.sender, version);\r\n        return address(pool);\r\n    }\r\n\r\n    function initialize(\r\n        address poolAddress,\r\n        address pair,\r\n        address rewardToken,\r\n        address timelock,\r\n        address stakePoolRewardFund,\r\n        bytes calldata data\r\n    ) external override {\r\n        StakePool pool = StakePool(poolAddress);\r\n        PoolRewardInfo memory poolRewardInfo = abi.decode(data, (PoolRewardInfo));\r\n        pool.addRewardPool(\r\n            rewardToken,\r\n            poolRewardInfo.rewardRebaser,\r\n            poolRewardInfo.rewardMultiplier,\r\n            poolRewardInfo.startBlock,\r\n            poolRewardInfo.endRewardBlock,\r\n            poolRewardInfo.rewardPerBlock,\r\n            poolRewardInfo.lockRewardPercent,\r\n            poolRewardInfo.startVestingBlock,\r\n            poolRewardInfo.endVestingBlock\r\n        );\r\n        pool.initialize(pair, poolRewardInfo.unstakingFrozenTime, address(stakePoolRewardFund), address(timelock));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"AddRewardPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pendingReward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paidReward\",\"type\":\"uint256\"}],\"name\":\"PayRewardPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardMultiplier\",\"type\":\"address\"}],\"name\":\"UpdateRewardMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateRewardPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardRebaser\",\"type\":\"address\"}],\"name\":\"UpdateRewardRebaser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BLOCKS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardRebaser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardMultiplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockRewardPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startVestingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endVestingBlock\",\"type\":\"uint256\"}],\"name\":\"addRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"allowRecoverRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"getRewardMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"pid\",\"type\":\"uint8\"}],\"name\":\"getRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pendingReward\",\"type\":\"uint256\"}],\"name\":\"getRewardRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockRewardReleased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unstakingFrozenTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_rewardFund\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPoolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardRebaser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardMultiplier\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockRewardPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startVestingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endVestingBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfVestingBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPaidRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolInfoLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unfrozenStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingFrozenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"}],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_rewardMultiplier\",\"type\":\"address\"}],\"name\":\"updateRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_endRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_pid\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_rewardRebaser\",\"type\":\"address\"}],\"name\":\"updateRewardRebaser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStakeTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakePool", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000be879a1a360e5beeb6abdae6b3d4cda300756a8b0000000000000000000000000000000000000000000000000000000000000bb9", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://866a2df3ee21c7821c9f709d5a70615328503e1839719a86d66c04878ae99eb6"}