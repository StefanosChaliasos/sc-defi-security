{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.6.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface iBEP20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n}\r\n\r\ninterface iBASE {\r\n    function mapAddressHasClaimed() external view returns (bool);\r\n    function DAO() external view returns (iDAO);\r\n}\r\n\r\ninterface iROUTER {\r\n    function totalPooled() external view returns (uint);\r\n    function totalVolume() external view returns (uint);\r\n    function totalFees() external view returns (uint);\r\n    function removeLiquidityTx() external view returns (uint);\r\n    function addLiquidityTx() external view returns (uint);\r\n    function swapTx() external view returns (uint);\r\n    function tokenCount() external view returns(uint);\r\n    function getToken(uint) external view returns(address);\r\n    function getPool(address) external view returns(address payable);\r\n    function addLiquidityForMember(uint inputBase, uint inputToken, address token, address member) external payable returns (uint units);\r\n}\r\n\r\ninterface iPOOL {\r\n    function genesis() external view returns(uint);\r\n    function baseAmount() external view returns(uint);\r\n    function tokenAmount() external view returns(uint);\r\n    function baseAmountPooled() external view returns(uint);\r\n    function tokenAmountPooled() external view returns(uint);\r\n    function fees() external view returns(uint);\r\n    function volume() external view returns(uint);\r\n    function txCount() external view returns(uint);\r\n    function getBaseAmtPooled(address) external view returns(uint);\r\n    function getTokenAmtPooled(address) external view returns(uint);\r\n    function calcValueInBase(uint) external view returns (uint);\r\n    function calcValueInToken(uint) external view returns (uint);\r\n    function calcTokenPPinBase(uint) external view returns (uint);\r\n    function calcBasePPinToken(uint) external view returns (uint);\r\n}\r\n\r\ninterface iDAO {\r\n    function ROUTER() external view returns(address);\r\n}\r\n\r\n// SafeMath\r\nlibrary SafeMath {\r\n\r\n    function add(uint a, uint b) internal pure returns (uint)   {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        require(c / a == b, \"SafeMath\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Utils {\r\n\r\n    using SafeMath for uint;\r\n\r\n    address public BASE;\r\n    address public DEPLOYER;\r\n\r\n    uint public one = 10**18;\r\n\r\n    struct TokenDetails {\r\n        string name;\r\n        string symbol;\r\n        uint decimals;\r\n        uint totalSupply;\r\n        uint balance;\r\n        address tokenAddress;\r\n    }\r\n\r\n    struct ListedAssetDetails {\r\n        string name;\r\n        string symbol;\r\n        uint decimals;\r\n        uint totalSupply;\r\n        uint balance;\r\n        address tokenAddress;\r\n        bool hasClaimed;\r\n    }\r\n\r\n    struct GlobalDetails {\r\n        uint totalPooled;\r\n        uint totalVolume;\r\n        uint totalFees;\r\n        uint removeLiquidityTx;\r\n        uint addLiquidityTx;\r\n        uint swapTx;\r\n    }\r\n\r\n    struct PoolDataStruct {\r\n        address tokenAddress;\r\n        address poolAddress;\r\n        uint genesis;\r\n        uint baseAmount;\r\n        uint tokenAmount;\r\n        uint baseAmountPooled;\r\n        uint tokenAmountPooled;\r\n        uint fees;\r\n        uint volume;\r\n        uint txCount;\r\n        uint poolUnits;\r\n    }\r\n\r\n    // Only Deployer can execute\r\n    modifier onlyDeployer() {\r\n        require(msg.sender == DEPLOYER, \"DeployerErr\");\r\n        _;\r\n    }\r\n\r\n    constructor () public payable {\r\n        BASE = 0xE4Ae305ebE1AbE663f261Bc00534067C80ad677C;\r\n        DEPLOYER = msg.sender;\r\n    }\r\n\r\n    function _DAO() internal view returns(iDAO) {\r\n        return iBASE(BASE).DAO();\r\n    }\r\n\r\n    //====================================DATA-HELPERS====================================//\r\n\r\n    function getTokenDetails(address token) public view returns (TokenDetails memory tokenDetails){\r\n        return getTokenDetailsWithMember(token, msg.sender);\r\n    }\r\n\r\n    function getTokenDetailsWithMember(address token, address member) public view returns (TokenDetails memory tokenDetails){\r\n        if(token == address(0)){\r\n            tokenDetails.name = 'Binance Coin';\r\n            tokenDetails.symbol = 'BNB';\r\n            tokenDetails.decimals = 18;\r\n            tokenDetails.totalSupply = 100000000 * one;\r\n            tokenDetails.balance = msg.sender.balance;\r\n        } else {\r\n            tokenDetails.name = iBEP20(token).name();\r\n            tokenDetails.symbol = iBEP20(token).symbol();\r\n            tokenDetails.decimals = iBEP20(token).decimals();\r\n            tokenDetails.totalSupply = iBEP20(token).totalSupply();\r\n            tokenDetails.balance = iBEP20(token).balanceOf(member);\r\n        }\r\n        tokenDetails.tokenAddress = token;\r\n        return tokenDetails;\r\n    }\r\n\r\n    function getUnclaimedAssetWithBalance(address token, address member) public view returns (ListedAssetDetails memory listedAssetDetails){\r\n        listedAssetDetails.name = iBEP20(token).name();\r\n        listedAssetDetails.symbol = iBEP20(token).symbol();\r\n        listedAssetDetails.decimals = iBEP20(token).decimals();\r\n        listedAssetDetails.totalSupply = iBEP20(token).totalSupply();\r\n        listedAssetDetails.balance = iBEP20(token).balanceOf(member);\r\n        listedAssetDetails.tokenAddress = token;\r\n        listedAssetDetails.hasClaimed = iBASE(member).mapAddressHasClaimed();\r\n        return listedAssetDetails;\r\n    }\r\n\r\n    function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){\r\n        iDAO dao = _DAO();\r\n        globalDetails.totalPooled = iROUTER(dao.ROUTER()).totalPooled();\r\n        globalDetails.totalVolume = iROUTER(dao.ROUTER()).totalVolume();\r\n        globalDetails.totalFees = iROUTER(dao.ROUTER()).totalFees();\r\n        globalDetails.removeLiquidityTx = iROUTER(dao.ROUTER()).removeLiquidityTx();\r\n        globalDetails.addLiquidityTx = iROUTER(dao.ROUTER()).addLiquidityTx();\r\n        globalDetails.swapTx = iROUTER(dao.ROUTER()).swapTx();\r\n        return globalDetails;\r\n    }\r\n\r\n    function getPool(address token) public view returns(address pool){\r\n        return iROUTER(_DAO().ROUTER()).getPool(token);\r\n    }\r\n    function tokenCount() public view returns (uint256 count){\r\n        return iROUTER(_DAO().ROUTER()).tokenCount();\r\n    }\r\n    function allTokens() public view returns (address[] memory _allTokens){\r\n        return tokensInRange(0, iROUTER(_DAO().ROUTER()).tokenCount()) ;\r\n    }\r\n    function tokensInRange(uint start, uint count) public view returns (address[] memory someTokens){\r\n        if(start.add(count) > tokenCount()){\r\n            count = tokenCount().sub(start);\r\n        }\r\n        address[] memory result = new address[](count);\r\n        for (uint i = 0; i < count; i++){\r\n            result[i] = iROUTER(_DAO().ROUTER()).getToken(i);\r\n        }\r\n        return result;\r\n    }\r\n    function allPools() public view returns (address[] memory _allPools){\r\n        return poolsInRange(0, tokenCount());\r\n    }\r\n    function poolsInRange(uint start, uint count) public view returns (address[] memory somePools){\r\n        if(start.add(count) > tokenCount()){\r\n            count = tokenCount().sub(start);\r\n        }\r\n        address[] memory result = new address[](count);\r\n        for (uint i = 0; i<count; i++){\r\n            result[i] = getPool(iROUTER(_DAO().ROUTER()).getToken(i));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getPoolData(address token) public view returns(PoolDataStruct memory poolData){\r\n        address pool = getPool(token);\r\n        poolData.poolAddress = pool;\r\n        poolData.tokenAddress = token;\r\n        poolData.genesis = iPOOL(pool).genesis();\r\n        poolData.baseAmount = iPOOL(pool).baseAmount();\r\n        poolData.tokenAmount = iPOOL(pool).tokenAmount();\r\n        poolData.baseAmountPooled = iPOOL(pool).baseAmountPooled();\r\n        poolData.tokenAmountPooled = iPOOL(pool).tokenAmountPooled();\r\n        poolData.fees = iPOOL(pool).fees();\r\n        poolData.volume = iPOOL(pool).volume();\r\n        poolData.txCount = iPOOL(pool).txCount();\r\n        poolData.poolUnits = iBEP20(pool).totalSupply();\r\n        return poolData;\r\n    }\r\n\r\n    function getMemberShare(address token, address member) public view returns(uint baseAmount, uint tokenAmount){\r\n        address pool = getPool(token);\r\n        uint units = iBEP20(pool).balanceOf(member);\r\n        return getPoolShare(token, units);\r\n    }\r\n\r\n    function getPoolShare(address token, uint units) public view returns(uint baseAmount, uint tokenAmount){\r\n        address pool = getPool(token);\r\n        baseAmount = calcShare(units, iBEP20(pool).totalSupply(), iPOOL(pool).baseAmount());\r\n        tokenAmount = calcShare(units, iBEP20(pool).totalSupply(), iPOOL(pool).tokenAmount());\r\n        return (baseAmount, tokenAmount);\r\n    }\r\n\r\n    function getShareOfBaseAmount(address token, address member) public view returns(uint baseAmount){\r\n        address pool = getPool(token);\r\n        uint units = iBEP20(pool).balanceOf(member);\r\n        return calcShare(units, iBEP20(pool).totalSupply(), iPOOL(pool).baseAmount());\r\n    }\r\n    function getShareOfTokenAmount(address token, address member) public view returns(uint baseAmount){\r\n        address pool = getPool(token);\r\n        uint units = iBEP20(pool).balanceOf(member);\r\n        return calcShare(units, iBEP20(pool).totalSupply(), iPOOL(pool).tokenAmount());\r\n    }\r\n\r\n    function getPoolShareAssym(address token, uint units, bool toBase) public view returns(uint baseAmount, uint tokenAmount, uint outputAmt){\r\n        address pool = getPool(token);\r\n        if(toBase){\r\n            baseAmount = calcAsymmetricShare(units, iBEP20(pool).totalSupply(), iPOOL(pool).baseAmount());\r\n            tokenAmount = 0;\r\n            outputAmt = baseAmount;\r\n        } else {\r\n            baseAmount = 0;\r\n            tokenAmount = calcAsymmetricShare(units, iBEP20(pool).totalSupply(), iPOOL(pool).tokenAmount());\r\n            outputAmt = tokenAmount;\r\n        }\r\n        return (baseAmount, tokenAmount, outputAmt);\r\n    }\r\n\r\n    function getPoolAge(address token) public view returns (uint daysSinceGenesis){\r\n        address pool = getPool(token);\r\n        uint genesis = iPOOL(pool).genesis();\r\n        if(now < genesis.add(86400)){\r\n            return 1;\r\n        } else {\r\n            return (now.sub(genesis)).div(86400);\r\n        }\r\n    }\r\n\r\n    function getPoolROI(address token) public view returns (uint roi){\r\n        address pool = getPool(token);\r\n        uint _baseStart = iPOOL(pool).baseAmountPooled().mul(2);\r\n        uint _baseEnd = iPOOL(pool).baseAmount().mul(2);\r\n        uint _ROIS = (_baseEnd.mul(10000)).div(_baseStart);\r\n        uint _tokenStart = iPOOL(pool).tokenAmountPooled().mul(2);\r\n        uint _tokenEnd = iPOOL(pool).tokenAmount().mul(2);\r\n        uint _ROIA = (_tokenEnd.mul(10000)).div(_tokenStart);\r\n        return (_ROIS + _ROIA).div(2);\r\n   }\r\n\r\n   function getPoolAPY(address token) public view returns (uint apy){\r\n        uint avgROI = getPoolROI(token);\r\n        uint poolAge = getPoolAge(token);\r\n        return (avgROI.mul(365)).div(poolAge);\r\n   }\r\n\r\n    function isMember(address token, address member) public view returns(bool){\r\n        address pool = getPool(token);\r\n        if (iBEP20(pool).balanceOf(member) > 0){\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    //====================================PRICING====================================//\r\n\r\n    function calcValueInBase(address token, uint amount) public view returns (uint value){\r\n       address pool = getPool(token);\r\n       return calcValueInBaseWithPool(pool, amount);\r\n    }\r\n\r\n    function calcValueInToken(address token, uint amount) public view returns (uint value){\r\n        address pool = getPool(token);\r\n        return calcValueInTokenWithPool(pool, amount);\r\n    }\r\n\r\n    function calcTokenPPinBase(address token, uint amount) public view returns (uint _output){\r\n        address pool = getPool(token);\r\n        return  calcTokenPPinBaseWithPool(pool, amount);\r\n   }\r\n\r\n    function calcBasePPinToken(address token, uint amount) public view returns (uint _output){\r\n        address pool = getPool(token);\r\n        return  calcValueInBaseWithPool(pool, amount);\r\n    }\r\n\r\n    function calcValueInBaseWithPool(address pool, uint amount) public view returns (uint value){\r\n       uint _baseAmount = iPOOL(pool).baseAmount();\r\n       uint _tokenAmount = iPOOL(pool).tokenAmount();\r\n       return (amount.mul(_baseAmount)).div(_tokenAmount);\r\n    }\r\n\r\n    function calcValueInTokenWithPool(address pool, uint amount) public view returns (uint value){\r\n        uint _baseAmount = iPOOL(pool).baseAmount();\r\n        uint _tokenAmount = iPOOL(pool).tokenAmount();\r\n        return (amount.mul(_tokenAmount)).div(_baseAmount);\r\n    }\r\n\r\n    function calcTokenPPinBaseWithPool(address pool, uint amount) public view returns (uint _output){\r\n        uint _baseAmount = iPOOL(pool).baseAmount();\r\n        uint _tokenAmount = iPOOL(pool).tokenAmount();\r\n        return  calcSwapOutput(amount, _tokenAmount, _baseAmount);\r\n   }\r\n\r\n    function calcBasePPinTokenWithPool(address pool, uint amount) public view returns (uint _output){\r\n        uint _baseAmount = iPOOL(pool).baseAmount();\r\n        uint _tokenAmount = iPOOL(pool).tokenAmount();\r\n        return  calcSwapOutput(amount, _baseAmount, _tokenAmount);\r\n    }\r\n\r\n    //====================================CORE-MATH====================================//\r\n\r\n    function calcPart(uint bp, uint total) public pure returns (uint part){\r\n        // 10,000 basis points = 100.00%\r\n        require((bp <= 10000) && (bp > 0), \"Must be correct BP\");\r\n        return calcShare(bp, 10000, total);\r\n    }\r\n\r\n    function calcLiquidityShare(uint units, address token, address pool, address member) public view returns (uint share){\r\n        // share = amount * part/total\r\n        // address pool = getPool(token);\r\n        uint amount = iBEP20(token).balanceOf(pool);\r\n        uint totalSupply = iBEP20(pool).totalSupply();\r\n        return(amount.mul(units)).div(totalSupply);\r\n    }\r\n\r\n    function calcShare(uint part, uint total, uint amount) public pure returns (uint share){\r\n        // share = amount * part/total\r\n        return(amount.mul(part)).div(total);\r\n    }\r\n\r\n    function  calcSwapOutput(uint x, uint X, uint Y) public pure returns (uint output){\r\n        // y = (x * X * Y )/(x + X)^2\r\n        uint numerator = x.mul(X.mul(Y));\r\n        uint denominator = (x.add(X)).mul(x.add(X));\r\n        return numerator.div(denominator);\r\n    }\r\n\r\n    function  calcSwapFee(uint x, uint X, uint Y) public pure returns (uint output){\r\n        // y = (x * x * Y) / (x + X)^2\r\n        uint numerator = x.mul(x.mul(Y));\r\n        uint denominator = (x.add(X)).mul(x.add(X));\r\n        return numerator.div(denominator);\r\n    }\r\n\r\n    function calcLiquidityUnits(uint b, uint B, uint t, uint T, uint P) public view returns (uint units){\r\n        if(P == 0){\r\n            return b;\r\n        } else {\r\n            // units = ((P (t B + T b))/(2 T B)) * slipAdjustment\r\n            // P * (part1 + part2) / (part3) * slipAdjustment\r\n            uint slipAdjustment = getSlipAdustment(b, B, t, T);\r\n            uint part1 = t.mul(B);\r\n            uint part2 = T.mul(b);\r\n            uint part3 = T.mul(B).mul(2);\r\n            uint _units = (P.mul(part1.add(part2))).div(part3);\r\n            return _units.mul(slipAdjustment).div(one);  // Divide by 10**18\r\n        }\r\n    }\r\n\r\n    function getSlipAdustment(uint b, uint B, uint t, uint T) public view returns (uint slipAdjustment){\r\n        // slipAdjustment = (1 - ABS((B t - b T)/((2 b + B) (t + T))))\r\n        // 1 - ABS(part1 - part2)/(part3 * part4))\r\n        uint part1 = B.mul(t);\r\n        uint part2 = b.mul(T);\r\n        uint part3 = b.mul(2).add(B);\r\n        uint part4 = t.add(T);\r\n        uint numerator;\r\n        if(part1 > part2){\r\n            numerator = part1.sub(part2);\r\n        } else {\r\n            numerator = part2.sub(part1);\r\n        }\r\n        uint denominator = part3.mul(part4);\r\n        return one.sub((numerator.mul(one)).div(denominator)); // Multiply by 10**18\r\n    }\r\n\r\n    function calcAsymmetricShare(uint u, uint U, uint A) public pure returns (uint share){\r\n        // share = (u * U * (2 * A^2 - 2 * U * u + U^2))/U^3\r\n        // (part1 * (part2 - part3 + part4)) / part5\r\n        uint part1 = u.mul(A);\r\n        uint part2 = U.mul(U).mul(2);\r\n        uint part3 = U.mul(u).mul(2);\r\n        uint part4 = u.mul(u);\r\n        uint numerator = part1.mul(part2.sub(part3).add(part4));\r\n        uint part5 = U.mul(U).mul(U);\r\n        return numerator.div(part5);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPLOYER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_allPools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_allTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"U\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"}],\"name\":\"calcAsymmetricShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcBasePPinToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_output\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcBasePPinTokenWithPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_output\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"calcLiquidityShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"P\",\"type\":\"uint256\"}],\"name\":\"calcLiquidityUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"calcPart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"part\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"name\":\"calcSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"name\":\"calcSwapOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcTokenPPinBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_output\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcTokenPPinBaseWithPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_output\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcValueInBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcValueInBaseWithPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcValueInToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcValueInTokenWithPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalPooled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeLiquidityTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addLiquidityTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTx\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.GlobalDetails\",\"name\":\"globalDetails\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getMemberShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"daysSinceGenesis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"genesis\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAmountPooled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountPooled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUnits\",\"type\":\"uint256\"}],\"internalType\":\"struct Utils.PoolDataStruct\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPoolROI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roi\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"}],\"name\":\"getPoolShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toBase\",\"type\":\"bool\"}],\"name\":\"getPoolShareAssym\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getShareOfBaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getShareOfTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"T\",\"type\":\"uint256\"}],\"name\":\"getSlipAdustment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"slipAdjustment\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct Utils.TokenDetails\",\"name\":\"tokenDetails\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getTokenDetailsWithMember\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct Utils.TokenDetails\",\"name\":\"tokenDetails\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getUnclaimedAssetWithBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"hasClaimed\",\"type\":\"bool\"}],\"internalType\":\"struct Utils.ListedAssetDetails\",\"name\":\"listedAssetDetails\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"one\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"poolsInRange\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"somePools\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"tokensInRange\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"someTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Utils", "CompilerVersion": "v0.6.8+commit.0bbfe453", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://75d2e3d8fdec63cf9c24ca6d1f503e26b264f8edc93b23172d910972eb8197b4"}