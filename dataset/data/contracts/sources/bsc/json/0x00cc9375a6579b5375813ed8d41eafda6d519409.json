{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0; \r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n \r\n \r\n\r\n\r\ninterface FarmTokens {\r\n    \r\n    function mint(address to, uint256 amount) external  ;\r\n \r\n    function burnFrom(address account , uint256 amount) external ;\r\n     \r\n    function transferFrom(address, address, uint) external returns (bool);\r\n\r\n    function transfer(address, uint) external returns (bool);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n}\r\n\r\ninterface Token {\r\n \r\n    function transferFrom(address, address, uint) external returns (bool);\r\n\r\n    function transfer(address, uint) external returns (bool);\r\n}\r\n \r\ninterface FarmLandNFT {\r\n \r\n    function tokenMoreDatas(uint256) external view returns (uint256);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    function create(string memory, string memory, uint256, address) external  ;\r\n    function setArea(uint256, uint256) external ;\r\n \r\n}\r\n\r\ninterface Farming {\r\n          function landIsfree(uint, address) external view returns (bool);\r\n          function resetUser(address) external ;\r\n\r\n          \r\n}\r\n\r\n\r\ninterface IPancake {\r\n          function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n}\r\n \r\n\r\n\r\ncontract MarketPlaceV2 is Ownable {\r\n    using SafeMath for uint256;\r\n \r\n    // The chicken token\r\n    FarmTokens public chickenToken;\r\n    // The egg token\r\n    FarmTokens public eggToken;\r\n    // The food token\r\n    FarmTokens public chickenFoodToken;\r\n    // The boar token\r\n    FarmTokens public boarToken;\r\n    // The sow token\r\n    FarmTokens public sowToken;\r\n    // The piglet token\r\n    FarmTokens public pigletToken;\r\n    // The pig food token\r\n    FarmTokens public pigFoodToken;\r\n    \r\n    // Chicken Farming \r\n    Farming public farmAddress ;\r\n    \r\n    //Pig Farming\r\n    Farming public farmAddressPig ;\r\n\r\n    // Base Token\r\n    Token public baseToken;\r\n\r\n    // Farm Land NFT.\r\n    FarmLandNFT public farmLand ;\r\n\r\n    // Eggs per token.\r\n    uint256 public busdPerEggToken  = 0;\r\n\r\n    // Chicken Food per token.\r\n    uint256 public busdPerChickenFood  = 0;\r\n\r\n    // Define of weight per Chicken Food\r\n    uint256 public chickenGrams = 600;\r\n\r\n    // Busd per chicke.\r\n    uint256 public busdPerChicken  = 0;\r\n\r\n    // Busd per Boar.\r\n    uint256 public busdPerBoar  = 0;\r\n\r\n    // Busd per Sow.\r\n    uint256 public busdPerSow  = 0;\r\n\r\n    // Busd per Piglet.\r\n    uint256 public busdPerPiglet  = 0;\r\n\r\n    // Busd per Pig Food.\r\n    uint256 public busdPerPigfood  = 0;\r\n\r\n    // BUSD per Farm Land Area .\r\n    uint256 public busdPerFarmArea  = 0;\r\n\r\n    // Keep track of number of chickens sold \r\n    uint256 public totalChickenSold = 0;\r\n    uint256 public totalChickenSoldValue = 0;\r\n\r\n    // Keep track of number of eggs sold \r\n    uint256 public totalEggSold = 0;\r\n    uint256 public totalEggSoldValue = 0;\r\n\r\n    // Keep track of number of chicken food sold \r\n    uint256 public totalChickenFoodSold = 0;\r\n    uint256 public totalChickenFoodSoldValue = 0;\r\n\r\n    // Keep track of number of boar sold \r\n    uint256 public totalBoarSold = 0;\r\n    uint256 public totalBoarSoldValue = 0;\r\n\r\n    // Keep track of number of sow sold \r\n    uint256 public totalSowSold = 0;\r\n    uint256 public totalSowSoldValue = 0;\r\n\r\n    // Keep track of number of piglet sold \r\n    uint256 public totalPigletSold = 0;\r\n    uint256 public totalPigletSoldValue = 0;\r\n\r\n    // Keep track of number of pig food sold \r\n    uint256 public totalPigFoodSold = 0;\r\n    uint256 public totalPigFoodSoldValue = 0;\r\n\r\n    // Keep track of number of farm land sold \r\n    uint256 public totalFarmSold = 0;\r\n    uint256 public totalFarmSoldValue = 0;\r\n    \r\n    // Keep track of number of chickens bought \r\n    uint256 public totalChickenBuy = 0;\r\n    uint256 public totalChickenBuyValue = 0;\r\n\r\n    // Keep track of number of eggs bought \r\n    uint256 public totalEggBuy = 0;\r\n    uint256 public totalEggBuyValue = 0;\r\n\r\n    // Keep track of number of chicken food bought \r\n    uint256 public totalChickenFoodBuy = 0;\r\n    uint256 public totalChickenFoodBuyValue = 0;\r\n\r\n    // Keep track of number of boar bought \r\n    uint256 public totalBoarBuy = 0;\r\n    uint256 public totalBoarBuyValue = 0;\r\n\r\n    // Keep track of number of sow bought \r\n    uint256 public totalSowBuy = 0;\r\n    uint256 public totalSowBuyValue = 0;\r\n\r\n    // Keep track of number of piglet bought \r\n    uint256 public totalPigletBuy = 0;\r\n    uint256 public totalPigletBuyValue = 0;\r\n\r\n    // Keep track of number of pig food bought \r\n    uint256 public totalPigFoodBuy = 0;\r\n    uint256 public totalPigFoodBuyValue = 0;\r\n\r\n    // Keep track of number of farm land bought \r\n    uint256 public totalFarmBuy = 0;\r\n    uint256 public totalFarmBuyValue = 0;\r\n\r\n    string public landAreaName = \"myframpet.io\" ;\r\n    string public landAreaAddress = \"myframpet.io\" ;\r\n\r\n    // Router\r\n    address public router =  0x10ED43C718714eb63d5aA57B78B54704E256024E ; \r\n    address public pairToken = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56 ;\r\n    address public mainToken ; \r\n    // Fees\r\n    address public feeTaker = 0x937F75CBdCcc52B43bC1774E6B287e8db904Ebc2;\r\n\r\n    uint256 public sellFee = 150;\r\n \r\n    event Sale(address indexed user, uint256 amount);\r\n    event Purchase(address indexed user,uint256 amount);\r\n    event Claim(address indexed user, uint256 amount);\r\n   \r\n\r\n     constructor (\r\n        FarmTokens _chickenToken,\r\n        FarmTokens _eggToken,\r\n        FarmTokens _chickenFoodToken,\r\n        FarmTokens _boarToken,\r\n        FarmTokens _sowToken,\r\n        FarmTokens _pigletToken,\r\n        FarmTokens _pigFoodToken,\r\n        address _baseToken,\r\n        FarmLandNFT _farmLand,\r\n        Farming _farmAddress\r\n         \r\n    )  {\r\n        farmLand = _farmLand;\r\n     \r\n        chickenToken = _chickenToken;\r\n        eggToken = _eggToken;\r\n        chickenFoodToken = _chickenFoodToken;        \r\n        boarToken = _boarToken;        \r\n        sowToken = _sowToken;        \r\n        pigletToken = _pigletToken;        \r\n        pigFoodToken = _pigFoodToken;        \r\n        mainToken = _baseToken ;\r\n        baseToken = Token(_baseToken);\r\n        farmAddress = _farmAddress ;\r\n        farmAddressPig = _farmAddress ;\r\n    }\r\n\r\n\r\n\r\n\r\n    // Get sell fee \r\n    function sellfee(uint256 _amount) public view returns (uint256) {\r\n            uint256 _fee = _amount.mul(sellFee).div(1e3);            \r\n            return _fee;\r\n    }\r\n \r\n\r\n function getBaseTokenPrice() public view returns (uint256) {\r\n        address[] memory  pair = new address[](2) ;\r\n        pair[0] = pairToken ;\r\n        pair[1] = mainToken ;\r\n        uint[] memory _token = IPancake(router).getAmountsOut(1e18, pair);\r\n        return _token[1] ;\r\n    }\r\n\r\n    //    function getBaseTokenPrice() public pure  returns (uint256) {    \r\n    //     uint256   _token = 6827009070565183825;\r\n    //     return _token  ;\r\n    // }\r\n\r\n    \r\n    function getTokenPerFarmArea() public view returns (uint256)  {\r\n            uint256 _tokenPerBusd = getBaseTokenPrice() ;\r\n             return (busdPerFarmArea.mul(_tokenPerBusd).div(1e18)) ;\r\n    }\r\n\r\n    // Buy Farm Land \r\n    function buyFarmLand(uint256 _area) public  {\r\n            uint256 tokenPerFarmArea = getTokenPerFarmArea() ;\r\n            uint256 _reqToken =  _area.mul(tokenPerFarmArea);\r\n            baseToken.transferFrom(msg.sender,address(this),_reqToken);\r\n            string memory _areaName = landAreaName ;\r\n            string memory _areaAddress = landAreaAddress ;    \r\n            _area = _area.mul(1e18);   \r\n            farmLand.create(_areaName, _areaAddress, _area, msg.sender);      \r\n            totalFarmSold = totalFarmSold.add(1)       ;\r\n            totalFarmSoldValue = totalFarmSoldValue.add(_reqToken)   ;    \r\n    }\r\n\r\n    // Increase Farm Land Area \r\n    function addFarmLandArea(uint256 _area,uint256 _tokenId) public  {\r\n            uint256 tokenPerFarmArea = getTokenPerFarmArea() ;\r\n            uint256 _oldarea = farmLand.tokenMoreDatas(_tokenId);\r\n            uint256 _reqToken =  _area.mul(tokenPerFarmArea);\r\n            _area = _area.mul(1e18);   \r\n            uint256 _newArea = _oldarea.add(_area);\r\n            baseToken.transferFrom(msg.sender,address(this),_reqToken);                         \r\n            farmLand.setArea(_tokenId, _newArea);               \r\n            totalFarmSoldValue = totalFarmSoldValue.add(_reqToken)   ;    \r\n    }\r\n \r\n\r\n\r\n    // Sell Farm Land \r\n    function sellFarmLand(uint256 _tokenId) public  {\r\n            bool _check = farmAddress.landIsfree(_tokenId,msg.sender);\r\n            require(_check == true , \"land is not Free\" ) ;\r\n            uint256 _area = farmLand.tokenMoreDatas(_tokenId);\r\n            uint256 tokenPerFarmArea = getTokenPerFarmArea() ;\r\n            uint256 _reqToken =  _area.mul(tokenPerFarmArea);\r\n            _reqToken = _reqToken.div(1e18) ;\r\n            _reqToken = _reqToken.sub(sellfee(_reqToken)); \r\n            farmAddress.resetUser(msg.sender);\r\n            baseToken.transfer(msg.sender,_reqToken);            \r\n            totalFarmBuy = totalFarmBuy.add(1)       ;\r\n            totalFarmBuyValue = totalFarmBuyValue.add(_reqToken)   ;         \r\n    }\r\n\r\n    \r\n\r\n\r\n    // Sell Farm Land Pigsty\r\n    function sellFarmLandPigsty(uint256 _tokenId) public  {\r\n            bool _check = farmAddressPig.landIsfree(_tokenId,msg.sender);\r\n            require(_check == true , \"land is not Free\" ) ;\r\n            uint256 _area = farmLand.tokenMoreDatas(_tokenId);\r\n            uint256 tokenPerFarmArea = getTokenPerFarmArea() ;\r\n            uint256 _reqToken =  _area.mul(tokenPerFarmArea);\r\n            _reqToken = _reqToken.div(1e18) ;\r\n            _reqToken = _reqToken.sub(sellfee(_reqToken)); \r\n            farmAddressPig.resetUser(msg.sender);\r\n            baseToken.transfer(msg.sender,_reqToken);            \r\n            totalFarmBuy = totalFarmBuy.add(1)       ;\r\n            totalFarmBuyValue = totalFarmBuyValue.add(_reqToken)   ;         \r\n    }\r\n\r\n\r\n    // Buy Farm Tokens \r\n    function buyfarmTokens(FarmTokens _farmtoken , uint256 _quantity) public {\r\n                require(_quantity > 0, \"Required Quantity must be zero\");\r\n\r\n                if(_farmtoken == chickenToken){\r\n                    _transferChicken(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == eggToken){\r\n                    _transferEggs(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == chickenFoodToken){\r\n                    _transferChickenFood(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == boarToken){\r\n                    _transferBoar(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == sowToken){\r\n                    _transferSow(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == pigletToken){\r\n                    _transferPiglet(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == pigFoodToken){\r\n                    _transferPigFood(_quantity,msg.sender);\r\n                } \r\n    }\r\n\r\n    function sellFarmTokens(FarmTokens _farmtoken , uint256 _quantity) public {\r\n                require(_quantity > 0, \"Required Quantity must be zero\");\r\n\r\n                if(_farmtoken == chickenToken){\r\n                    _burnChicken(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == eggToken){\r\n                    _burnEgg(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == chickenFoodToken){\r\n                    _burnChickenFood(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == boarToken){\r\n                    _burnBoar(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == sowToken){\r\n                    _burnSow(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == pigletToken){\r\n                    _burnPiglet(_quantity,msg.sender);\r\n                } \r\n                else if(_farmtoken == pigFoodToken){\r\n                    _burnPigFood(_quantity,msg.sender);\r\n                } \r\n\r\n    }\r\n    \r\n    // Get prices\r\n\r\n    function getTokenPerChicken() public view returns (uint256)  {\r\n            uint256 _tokenPerBusd = getBaseTokenPrice() ;\r\n             return (busdPerChicken.mul(_tokenPerBusd).div(1e18)) ;\r\n    }\r\n\r\n    function getTokenPerEgg() public view returns (uint256)  {\r\n            uint256 _tokenPerBusd = getBaseTokenPrice() ;\r\n             return (busdPerEggToken.mul(_tokenPerBusd).div(1e18)) ;\r\n    }\r\n\r\n    function getTokenPerChickenFood() public view returns (uint256)  {\r\n            uint256 _tokenPerBusd = getBaseTokenPrice() ;\r\n             return (busdPerChickenFood.mul(_tokenPerBusd).div(1e18)) ;\r\n    }\r\n\r\n    function getTokenPerSow() public view returns (uint256)  {\r\n            uint256 _tokenPerBusd = getBaseTokenPrice() ;\r\n             return (busdPerSow.mul(_tokenPerBusd).div(1e18)) ;\r\n    }\r\n\r\n    function getTokenPerBoar() public view returns (uint256)  {\r\n            uint256 _tokenPerBusd = getBaseTokenPrice() ;\r\n             return (busdPerBoar.mul(_tokenPerBusd).div(1e18)) ;\r\n    }\r\n\r\n    function getTokenPerPiglet() public view returns (uint256)  {\r\n            uint256 _tokenPerBusd = getBaseTokenPrice() ;\r\n             return (busdPerPiglet.mul(_tokenPerBusd).div(1e18)) ;\r\n    }\r\n    function getTokenPerPigfood() public view returns (uint256)  {\r\n            uint256 _tokenPerBusd = getBaseTokenPrice() ;\r\n             return (busdPerPigfood.mul(_tokenPerBusd).div(1e18)) ;\r\n    }\r\n \r\n  \r\n    // Transfer Eggs \r\n    function _transferEggs(uint256 _quantity, address _user ) internal {\r\n            if(_quantity > eggToken.balanceOf(address(this))){\r\n                 uint256 _difference = _quantity.sub(eggToken.balanceOf(address(this))) ;                             \r\n                 eggToken.mint(address(this), _difference);\r\n            }\r\n            uint256 tokenPerEggs   = getTokenPerEgg();\r\n            uint256 _cost = _quantity.mul(tokenPerEggs).div(1e18);\r\n            baseToken.transferFrom(_user,address(this),_cost);\r\n            eggToken.transfer(_user, _quantity); \r\n            totalEggSold = totalEggSold.add(_quantity) ;\r\n            totalEggSoldValue = totalEggSoldValue.add(_cost)   ;    \r\n\r\n    }\r\n\r\n    // Transfer Chicken \r\n    function _transferChicken(uint256 _quantity, address _user ) internal {\r\n            if(_quantity > chickenToken.balanceOf(address(this))){\r\n                 uint256 _difference = _quantity.sub(chickenToken.balanceOf(address(this))) ;                             \r\n                 chickenToken.mint(address(this), _difference);\r\n            }\r\n          \r\n            uint256 tokenPerchicken = getTokenPerChicken();\r\n            uint256 _cost = _quantity.mul(tokenPerchicken).div(1e18);\r\n            baseToken.transferFrom(_user,address(this),_cost);\r\n            chickenToken.transfer(_user, _quantity); \r\n            totalChickenSold = totalChickenSold.add(_quantity) ;\r\n            totalChickenSoldValue = totalChickenSoldValue.add(_cost)   ;    \r\n\r\n\r\n    }\r\n\r\n\r\n    // Transfer Chicken Food\r\n    function _transferChickenFood(uint256 _quantity, address _user ) internal {\r\n            if(_quantity > chickenFoodToken.balanceOf(address(this))){\r\n                 uint256 _difference = _quantity.sub(chickenFoodToken.balanceOf(address(this))) ;                             \r\n                 chickenFoodToken.mint(address(this), _difference);\r\n            }\r\n            uint256 tokenPerchickenFood = getTokenPerChickenFood();\r\n            uint256 _cost = _quantity.mul(tokenPerchickenFood).div(1e18);\r\n            baseToken.transferFrom(_user,address(this),_cost);\r\n            chickenFoodToken.transfer(_user, _quantity); \r\n            totalChickenFoodSold = totalChickenFoodSold.add(_quantity) ;\r\n            totalChickenFoodSoldValue = totalChickenFoodSoldValue.add(_cost)   ;    \r\n\r\n    }\r\n\r\n\r\n\r\n    // Transfer Boar \r\n    function _transferBoar(uint256 _quantity, address _user ) internal {\r\n            if(_quantity > boarToken.balanceOf(address(this))){\r\n                 uint256 _difference = _quantity.sub(boarToken.balanceOf(address(this))) ;                             \r\n                 boarToken.mint(address(this), _difference);\r\n            }\r\n            uint256 tokenPerBoar = getTokenPerBoar();\r\n            uint256 _cost = _quantity.mul(tokenPerBoar).div(1e18);\r\n            baseToken.transferFrom(_user,address(this),_cost);\r\n            boarToken.transfer(_user, _quantity); \r\n            totalBoarSold = totalBoarSold.add(_quantity) ;\r\n            totalBoarSoldValue = totalBoarSoldValue.add(_cost)   ;    \r\n\r\n    }\r\n\r\n\r\n    // Transfer Sow \r\n    function _transferSow(uint256 _quantity, address _user ) internal {\r\n            if(_quantity > sowToken.balanceOf(address(this))){\r\n                 uint256 _difference = _quantity.sub(sowToken.balanceOf(address(this))) ;                             \r\n                 sowToken.mint(address(this), _difference);\r\n            }\r\n            uint256 tokenPerSow = getTokenPerSow();\r\n            uint256 _cost = _quantity.mul(tokenPerSow).div(1e18);\r\n            baseToken.transferFrom(_user,address(this),_cost);\r\n            sowToken.transfer(_user, _quantity); \r\n            totalSowSold = totalSowSold.add(_quantity) ;\r\n            totalSowSoldValue = totalSowSoldValue.add(_cost)   ;    \r\n\r\n    }\r\n\r\n\r\n    // Transfer Piglet \r\n    function _transferPiglet(uint256 _quantity, address _user ) internal {\r\n            if(_quantity > pigletToken.balanceOf(address(this))){\r\n                 uint256 _difference = _quantity.sub(pigletToken.balanceOf(address(this))) ;                             \r\n                 pigletToken.mint(address(this), _difference);\r\n            }\r\n            uint256 tokenPerPiglet = getTokenPerPiglet();\r\n            uint256 _cost = _quantity.mul(tokenPerPiglet).div(1e18);\r\n            baseToken.transferFrom(_user,address(this),_cost);\r\n            pigletToken.transfer(_user, _quantity); \r\n            totalPigletSold = totalPigletSold.add(_quantity) ;\r\n            totalPigletSoldValue = totalPigletSoldValue.add(_cost)   ;    \r\n\r\n    }\r\n\r\n\r\n    // Transfer Pig Food \r\n    function _transferPigFood(uint256 _quantity, address _user ) internal {\r\n            if(_quantity > pigFoodToken.balanceOf(address(this))){\r\n                 uint256 _difference = _quantity.sub(pigFoodToken.balanceOf(address(this))) ;                             \r\n                 pigFoodToken.mint(address(this), _difference);\r\n            }\r\n            uint256 tokenPerPigFood = getTokenPerPigfood();\r\n            uint256 _cost = _quantity.mul(tokenPerPigFood).div(1e18);\r\n            baseToken.transferFrom(_user,address(this),_cost);\r\n            pigFoodToken.transfer(_user, _quantity); \r\n            totalPigFoodSold = totalPigFoodSold.add(_quantity) ;\r\n            totalPigFoodSoldValue = totalPigFoodSoldValue.add(_cost)   ;    \r\n\r\n    }\r\n\r\n\r\n   \r\n    // Burn Chicken \r\n    function _burnChicken(uint _quantity , address _user) internal {    \r\n             uint256 tokenPerchicken = getTokenPerChicken();\r\n            uint256 _cost = _quantity.mul(tokenPerchicken).div(1e18);\r\n            _cost = _cost.sub(sellfee(_cost)); \r\n            baseToken.transfer(_user,_cost);\r\n            chickenToken.burnFrom(_user,_quantity);    \r\n            totalChickenBuy = totalChickenBuy.add(_quantity)       ;\r\n            totalChickenBuyValue = totalChickenBuyValue.add(_cost)   ;                                    \r\n    }\r\n\r\n    // Burn Chicken Egg \r\n    function _burnEgg(uint _quantity , address _user) internal {     \r\n            uint256 tokenPerEggs   = getTokenPerEgg();\r\n            uint256 _cost = _quantity.mul(tokenPerEggs).div(1e18);\r\n            _cost = _cost.sub(sellfee(_cost)); \r\n            baseToken.transfer(_user,_cost);     \r\n            eggToken.burnFrom(_user,_quantity);     \r\n            totalEggBuy = totalEggBuy.add(_quantity)       ;\r\n            totalEggBuyValue = totalEggBuyValue.add(_cost) ;                               \r\n    }\r\n    \r\n    // Burn Chicken Food \r\n    function _burnChickenFood(uint _quantity , address _user) internal {  \r\n            uint256 tokenPerchickenFood = getTokenPerChickenFood();\r\n            uint256 _cost = _quantity.mul(tokenPerchickenFood).div(1e18);\r\n            _cost = _cost.sub(sellfee(_cost)); \r\n            baseToken.transfer(_user,_cost);        \r\n            chickenFoodToken.burnFrom(_user,_quantity);            \r\n            totalChickenFoodBuy = totalChickenFoodBuy.add(_quantity)       ;\r\n            totalChickenFoodBuyValue = totalChickenFoodBuyValue.add(_cost)   ;                            \r\n    }\r\n\r\n    // Burn Piglet \r\n    function _burnPiglet(uint _quantity , address _user) internal {     \r\n            uint256 tokenPerPiglet = getTokenPerPiglet();\r\n            uint256 _cost = _quantity.mul(tokenPerPiglet).div(1e18);\r\n \r\n            _cost = _cost.sub(sellfee(_cost)); \r\n            baseToken.transfer(_user,_cost);     \r\n            pigletToken.burnFrom(_user,_quantity);               \r\n            totalPigletBuy = totalPigletBuy.add(_quantity)       ;\r\n            totalPigletBuyValue = totalPigletBuyValue.add(_cost)   ;                         \r\n    }\r\n\r\n    // Burn Sow \r\n    function _burnSow(uint _quantity , address _user) internal {      \r\n              uint256 tokenPerSow = getTokenPerSow();\r\n            uint256 _cost = _quantity.mul(tokenPerSow).div(1e18);\r\n            _cost = _cost.sub(sellfee(_cost)); \r\n            baseToken.transfer(_user,_cost);    \r\n            sowToken.burnFrom(_user,_quantity);            \r\n            totalSowBuy = totalSowBuy.add(_quantity)       ;\r\n            totalSowBuyValue = totalSowBuyValue.add(_cost)   ;                            \r\n    }\r\n\r\n    // Burn Boar \r\n    function _burnBoar(uint _quantity , address _user) internal {        \r\n            uint256 tokenPerBoar = getTokenPerBoar();\r\n            uint256 _cost = _quantity.mul(tokenPerBoar).div(1e18);\r\n            _cost = _cost.sub(sellfee(_cost)); \r\n            baseToken.transfer(_user,_cost);  \r\n            boarToken.burnFrom(_user,_quantity);             \r\n            totalBoarBuy = totalBoarBuy.add(_quantity)       ;\r\n            totalBoarBuyValue = totalBoarBuyValue.add(_cost)   ;                           \r\n    }\r\n\r\n    // Burn Pig Food \r\n    function _burnPigFood(uint _quantity , address _user) internal {    \r\n             uint256 tokenPerPigFood = getTokenPerPigfood();\r\n            uint256 _cost = _quantity.mul(tokenPerPigFood).div(1e18);\r\n            _cost = _cost.sub(sellfee(_cost)); \r\n            baseToken.transfer(_user,_cost);      \r\n            pigFoodToken.burnFrom(_user,_quantity);          \r\n            totalPigFoodBuy = totalPigFoodBuy.add(_quantity)       ;\r\n            totalPigFoodBuyValue = totalPigFoodBuyValue.add(_cost)   ;                              \r\n    }\r\n\r\n   \r\n    \r\n \r\n\r\n   \r\n    /* Admin Functions */\r\n\r\n\r\n    /// @param _feeTaker address of feeTaker\r\n    function setFeeTaker(address  _feeTaker)  external onlyOwner  {\r\n       feeTaker = _feeTaker ;\r\n    }\r\n\r\n    /// @param _eggToken The amount of egg tokens to be given per day\r\n    function setEggToken(FarmTokens _eggToken) external onlyOwner {\r\n        eggToken = _eggToken;\r\n    }\r\n\r\n    /// @param  _chickenToken The chicken token\r\n    function setChickenToken(FarmTokens _chickenToken) external onlyOwner {\r\n        chickenToken = _chickenToken;\r\n    }\r\n\r\n    /// @param  _chickenFoodToken The chicken food token\r\n    function setChickenFoodToken(FarmTokens _chickenFoodToken) external onlyOwner {\r\n        chickenFoodToken = _chickenFoodToken;\r\n    }\r\n\r\n    /// @param  _boarToken The boar token\r\n    function setBoarToken(FarmTokens _boarToken) external onlyOwner {\r\n        boarToken = _boarToken;\r\n    }\r\n\r\n    /// @param  _sowToken The chicken food per day\r\n    function setSowToken(FarmTokens _sowToken) external onlyOwner {\r\n        sowToken = _sowToken;\r\n    }\r\n\r\n    /// @param  _pigletToken The chicken food per day\r\n    function setPigletToken(FarmTokens _pigletToken) external onlyOwner {\r\n        pigletToken = _pigletToken;\r\n    }\r\n\r\n    /// @param  _pigFoodToken The chicken food per day\r\n    function setPigFoodToken(FarmTokens _pigFoodToken) external onlyOwner {\r\n        pigFoodToken = _pigFoodToken;\r\n    }\r\n\r\n\r\n    /// @param  _farmLand The area per chicken\r\n    function setFarmLand(FarmLandNFT _farmLand) external onlyOwner {\r\n        farmLand = _farmLand;\r\n    }\r\n\r\n    \r\n    /// @param  _baseToken The base token\r\n    function setbaseToken(Token _baseToken) external onlyOwner {\r\n            baseToken = _baseToken;\r\n    }\r\n\r\n        \r\n    /// @param  _maintoken The main token for price\r\n    function setmainToken(address _maintoken) external onlyOwner {\r\n            mainToken = _maintoken;\r\n    }\r\n\r\n \r\n\r\n    /// @param  _busdPerchicken usd per chicken\r\n    function setBusdPerchicken(uint256 _busdPerchicken) external onlyOwner {\r\n            busdPerChicken  = _busdPerchicken;\r\n\r\n    }\r\n\r\n    /// @param  _busdPerEggToken chicken per token\r\n    function setBusdPerEggToken(uint256 _busdPerEggToken) external onlyOwner {\r\n            busdPerEggToken = _busdPerEggToken;\r\n\r\n    }\r\n\r\n    /// @param  _busdPerChickenFood busd per chicken food\r\n    function setBusdPerChickenFood(uint256 _busdPerChickenFood) external onlyOwner {\r\n                 busdPerChickenFood = _busdPerChickenFood;            \r\n    }\r\n\r\n\r\n    /// @param  _chickenGrams busd per chicken food grams\r\n    function setChickenFoodGramsPerUsd(uint256 _chickenGrams) external onlyOwner {\r\n                 chickenGrams = _chickenGrams;            \r\n    }\r\n\r\n\r\n\r\n    /// @param  _busdPerBoar busd per boar\r\n    function setBusdPerBoar(uint256 _busdPerBoar) external onlyOwner {\r\n                   busdPerBoar  = _busdPerBoar;\r\n    }\r\n\r\n    /// @param  _busdPerSow busd per sow\r\n    function setBusdPerSow(uint256 _busdPerSow) external onlyOwner {\r\n                   busdPerSow = _busdPerSow ;\r\n    }\r\n\r\n    /// @param  _busdPerPiglet busd  per piglet\r\n    function setBusdPerPiglet(uint256 _busdPerPiglet) external onlyOwner {\r\n                   busdPerPiglet = _busdPerPiglet ;\r\n    }\r\n\r\n    /// @param  _busdPerPigfood pig food per token\r\n    function setBusdPerPigfood(uint256 _busdPerPigfood) external onlyOwner {\r\n                busdPerPigfood = _busdPerPigfood;\r\n    }\r\n\r\n    /// @param  _farmAddress  farming address\r\n    function setFarmAddress(Farming _farmAddress) external onlyOwner {\r\n                farmAddress = _farmAddress;\r\n    }\r\n\r\n    /// @param  _farmAddress  farming address\r\n    function setPigFarmAddress(Farming _farmAddress) external onlyOwner {\r\n                farmAddressPig = _farmAddress;\r\n    }\r\n\r\n    /// @param  _sellFee fee per sell\r\n    function setSellfee(uint256 _sellFee) external onlyOwner {\r\n                sellFee = _sellFee;\r\n    }\r\n\r\n\r\n    /// @param  _busdPerFarmArea busd per area sq m\r\n    function setBusdPerFarmArea(uint256 _busdPerFarmArea) external onlyOwner {\r\n                busdPerFarmArea = _busdPerFarmArea;\r\n    }\r\n \r\n    /// @dev Obtain the chicken token balance\r\n    function getTotalChicken() public view returns (uint256) {\r\n          return chickenToken.balanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Obtain the egg token balance\r\n    function getTotalEgg() public view returns (uint256) {\r\n          return eggToken.balanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Obtain the chicken token balance\r\n    function getTotalChickenFood() public view returns (uint256) {\r\n          return chickenFoodToken.balanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Obtain the boar token balance\r\n    function getTotalBoar() public view returns (uint256) {\r\n          return boarToken.balanceOf(address(this));\r\n    }\r\n\r\n\r\n    /// @dev Obtain the sow token balance\r\n    function getTotalSow() public view returns (uint256) {\r\n          return sowToken.balanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Obtain the piglet token balance\r\n    function getTotalPiglet() public view returns (uint256) {\r\n          return pigletToken.balanceOf(address(this));\r\n    }\r\n\r\n    /// @dev Obtain the pig food token balance\r\n    function getTotalPigFood() public view returns (uint256) {\r\n          return pigFoodToken.balanceOf(address(this));\r\n    }\r\n\r\n \r\n \r\n    function transferAnyBEP20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {        \r\n        Token(_tokenAddr).transfer(_to, _amount);\r\n    }\r\n\r\n\r\n     \r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"_chickenToken\",\"type\":\"address\"},{\"internalType\":\"contract FarmTokens\",\"name\":\"_eggToken\",\"type\":\"address\"},{\"internalType\":\"contract FarmTokens\",\"name\":\"_chickenFoodToken\",\"type\":\"address\"},{\"internalType\":\"contract FarmTokens\",\"name\":\"_boarToken\",\"type\":\"address\"},{\"internalType\":\"contract FarmTokens\",\"name\":\"_sowToken\",\"type\":\"address\"},{\"internalType\":\"contract FarmTokens\",\"name\":\"_pigletToken\",\"type\":\"address\"},{\"internalType\":\"contract FarmTokens\",\"name\":\"_pigFoodToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"contract FarmLandNFT\",\"name\":\"_farmLand\",\"type\":\"address\"},{\"internalType\":\"contract Farming\",\"name\":\"_farmAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Sale\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_area\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"addFarmLandArea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"contract Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boarToken\",\"outputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdPerBoar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdPerChicken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdPerChickenFood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdPerEggToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdPerFarmArea\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdPerPigfood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdPerPiglet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"busdPerSow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_area\",\"type\":\"uint256\"}],\"name\":\"buyFarmLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"_farmtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"buyfarmTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chickenFoodToken\",\"outputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chickenGrams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chickenToken\",\"outputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggToken\",\"outputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmAddress\",\"outputs\":[{\"internalType\":\"contract Farming\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmAddressPig\",\"outputs\":[{\"internalType\":\"contract Farming\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmLand\",\"outputs\":[{\"internalType\":\"contract FarmLandNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPerBoar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPerChicken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPerChickenFood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPerEgg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPerFarmArea\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPerPigfood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPerPiglet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPerSow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBoar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalChicken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalChickenFood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEgg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPigFood\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPiglet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalSow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landAreaAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landAreaName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pigFoodToken\",\"outputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pigletToken\",\"outputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"sellFarmLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"sellFarmLandPigsty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"_farmtoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"sellFarmTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"_boarToken\",\"type\":\"address\"}],\"name\":\"setBoarToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdPerBoar\",\"type\":\"uint256\"}],\"name\":\"setBusdPerBoar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdPerChickenFood\",\"type\":\"uint256\"}],\"name\":\"setBusdPerChickenFood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdPerEggToken\",\"type\":\"uint256\"}],\"name\":\"setBusdPerEggToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdPerFarmArea\",\"type\":\"uint256\"}],\"name\":\"setBusdPerFarmArea\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdPerPigfood\",\"type\":\"uint256\"}],\"name\":\"setBusdPerPigfood\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdPerPiglet\",\"type\":\"uint256\"}],\"name\":\"setBusdPerPiglet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdPerSow\",\"type\":\"uint256\"}],\"name\":\"setBusdPerSow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_busdPerchicken\",\"type\":\"uint256\"}],\"name\":\"setBusdPerchicken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chickenGrams\",\"type\":\"uint256\"}],\"name\":\"setChickenFoodGramsPerUsd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"_chickenFoodToken\",\"type\":\"address\"}],\"name\":\"setChickenFoodToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"_chickenToken\",\"type\":\"address\"}],\"name\":\"setChickenToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"_eggToken\",\"type\":\"address\"}],\"name\":\"setEggToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Farming\",\"name\":\"_farmAddress\",\"type\":\"address\"}],\"name\":\"setFarmAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FarmLandNFT\",\"name\":\"_farmLand\",\"type\":\"address\"}],\"name\":\"setFarmLand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeTaker\",\"type\":\"address\"}],\"name\":\"setFeeTaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Farming\",\"name\":\"_farmAddress\",\"type\":\"address\"}],\"name\":\"setPigFarmAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"_pigFoodToken\",\"type\":\"address\"}],\"name\":\"setPigFoodToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"_pigletToken\",\"type\":\"address\"}],\"name\":\"setPigletToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellFee\",\"type\":\"uint256\"}],\"name\":\"setSellfee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"_sowToken\",\"type\":\"address\"}],\"name\":\"setSowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Token\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"name\":\"setbaseToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintoken\",\"type\":\"address\"}],\"name\":\"setmainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sowToken\",\"outputs\":[{\"internalType\":\"contract FarmTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoarBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoarBuyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoarSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBoarSoldValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChickenBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChickenBuyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChickenFoodBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChickenFoodBuyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChickenFoodSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChickenFoodSoldValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChickenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalChickenSoldValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEggBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEggBuyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEggSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEggSoldValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFarmBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFarmBuyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFarmSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFarmSoldValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPigFoodBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPigFoodBuyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPigFoodSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPigFoodSoldValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPigletBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPigletBuyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPigletSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPigletSoldValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSowBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSowBuyValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSowSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSowSoldValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyBEP20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MarketPlaceV2", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000a92bc06443e7d4cd38735ed01b5c5c3c74f677300000000000000000000000078ac3a5bc58455b41601189fdcf028f63e8c9ced00000000000000000000000050c0268e1d368420ce99766bf89abecefcfc7644000000000000000000000000486bfd5ae6bf094e403bcf8dae14b708b15b143e00000000000000000000000026b00fb006cb64c1f5d4ed407c6abdf902f1c5950000000000000000000000007f7936bf782f327bf549809bc6469dbe52280867000000000000000000000000ea049fb6d789deeb85630c16576cc0ceb75555f7000000000000000000000000903fcaf1a49b29678c15b43bc9f852232bfa7df1000000000000000000000000e6e3458dcb44ff2650e5f70177677407412635f10000000000000000000000006869833a884ef2b02a2ec3d380f0a6f9c5353df1", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://76b52938577d71c6f57c207422ac744e95f6ba49471f0eee54442cdca3641d76"}