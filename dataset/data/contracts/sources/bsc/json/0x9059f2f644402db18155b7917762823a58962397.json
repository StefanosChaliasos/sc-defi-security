{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/Users/jimmyfan/Develop/merlin-contracts-dev/Merlin/contracts/interface/IMerlinMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\ninterface IMerlinMinter {\\n    function isMinter(address) view external returns(bool);\\n    function amountMerlinToMint(uint bnbProfit) view external returns(uint);\\n    function withdrawalFee(uint amount, uint depositedAt) view external returns(uint);\\n    function performanceFee(uint profit) view external returns(uint);\\n    function mintFor(address flip, uint _withdrawalFee, uint _performanceFee, address to, uint depositedAt) external payable;\\n\\n    function merlinPerProfitBNB() view external returns(uint);\\n    function WITHDRAWAL_FEE_FREE_PERIOD() view external returns(uint);\\n    function WITHDRAWAL_FEE() view external returns(uint);\\n\\n    function setMinter(address minter, bool canMint) external;\\n\\n    function mintGov(uint amount) external;\\n\\n    // V2 functions\\n    function mint(uint amount) external;\\n    function safeMerlinTransfer(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"/Users/jimmyfan/Develop/merlin-contracts-dev/Merlin/contracts/library/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract PausableUpgradeable is OwnableUpgradeable {\\n    uint public lastPauseTime;\\n    bool public paused;\\n\\n    event PauseChanged(bool isPaused);\\n\\n    modifier notPaused {\\n        require(!paused, \\\"PausableUpgradeable: cannot be performed while the contract is paused\\\");\\n        _;\\n    }\\n\\n    function __PausableUpgradeable_init() internal initializer {\\n        __Ownable_init();\\n        require(owner() != address(0), \\\"PausableUpgradeable: owner must be set\\\");\\n    }\\n\\n    function setPaused(bool _paused) external onlyOwner {\\n        if (_paused == paused) {\\n            return;\\n        }\\n\\n        paused = _paused;\\n        if (paused) {\\n            lastPauseTime = now;\\n        }\\n\\n        emit PauseChanged(paused);\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"/Users/jimmyfan/Develop/merlin-contracts-dev/Merlin/contracts/library/WhitelistUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.12;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract WhitelistUpgradeable is OwnableUpgradeable {\\n    mapping (address => bool) private _whitelist;\\n    bool private _disable;                      // default - true means whitelist feature is disabled.\\n\\n    event Whitelisted(address indexed _address, bool whitelist);\\n    event EnableWhitelist();\\n    event DisableWhitelist();\\n\\n    modifier onlyWhitelisted {\\n        require(_disable || _whitelist[msg.sender], \\\"Whitelist: caller is not on the whitelist\\\");\\n        _;\\n    }\\n\\n    function __WhitelistUpgradeable_init() internal initializer {\\n        __Ownable_init();\\n    }\\n\\n    function isWhitelist(address _address) public view returns(bool) {\\n        return _whitelist[_address];\\n    }\\n\\n    function setWhitelist(address _address, bool _on) external onlyOwner {\\n        _whitelist[_address] = _on;\\n\\n        emit Whitelisted(_address, _on);\\n    }\\n\\n    function disableWhitelist(bool disable) external onlyOwner {\\n        _disable = disable;\\n        if (disable) {\\n            emit DisableWhitelist();\\n        } else {\\n            emit EnableWhitelist();\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\"\r\n    },\r\n    \"/Users/jimmyfan/Develop/merlin-contracts-dev/Merlin/contracts/v2/BaseMerlinStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../library/PausableUpgradeable.sol\\\";\\nimport \\\"../library/WhitelistUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../interface/IMerlinMinter.sol\\\";\\nimport \\\"./utils/SwapUtils.sol\\\";\\nimport \\\"./interfaces/IMerlin.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nabstract contract BaseMerlinStrategy is IMerlinStrategy ,ReentrancyGuardUpgradeable,PausableUpgradeable, WhitelistUpgradeable{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint256 constant _DECIMAL = 1e18;\\n\\n    IMerlinMinter public merlinMinter;\\n\\n    /// @dev total shares of this strategy\\n    uint256 public override totalShares;\\n\\n    /// @dev user share\\n    mapping (address => uint256) internal userShares;\\n\\n    /// @dev user principal\\n    mapping (address => uint256) internal userPrincipal;\\n\\n    /// @dev Threshold for swap reward token to staking token for save gas fee\\n    uint256 public rewardTokenSwapThreshold;\\n\\n    /// @dev Threshold for reinvest to save gas fee\\n    uint256 public stakingTokenReinvestThreshold;\\n\\n    /// @dev Utils for swap token and get price in BNB\\n    address public SWAP_UTILS;\\n\\n    /// @dev For reduce amount which is toooooooo small\\n    uint256 constant DUST = 1000;\\n\\n    /// @dev Will be WBNB address in BSC Network\\n    address public constant WRAPPED_NATIVE_TOKEN = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    /// @dev Staking token\\n    address public  override STAKING_TOKEN;\\n\\n    mapping (address => uint) internal _depositedAt;\\n\\n    uint256[49] private __gap;\\n\\n    function __Base_init(\\n        address _SWAP_UTILS\\n    ) internal initializer {\\n\\n        SWAP_UTILS = _SWAP_UTILS;\\n        __ReentrancyGuard_init();\\n        __WhitelistUpgradeable_init();\\n        __PausableUpgradeable_init();\\n        rewardTokenSwapThreshold = 1e16;\\n        stakingTokenReinvestThreshold = 1e16;\\n        IS_EMERGENCY_MODE = false;\\n\\n    }\\n\\n    function depositedAt(address account) external view  returns (uint) {\\n        return _depositedAt[account];\\n    }\\n\\n    function updateThresholds(uint256 _rewardTokenSwapThreshold, uint256 _stakingTokenReinvestThreshold) external onlyOwner {\\n\\n        rewardTokenSwapThreshold = _rewardTokenSwapThreshold;\\n        stakingTokenReinvestThreshold = _stakingTokenReinvestThreshold;\\n\\n    }\\n\\n    // --------------------------------------------------------------\\n    // Misc\\n    // --------------------------------------------------------------\\n\\n    function approveToken(address token, address to, uint256 amount) internal {\\n\\n        if (IERC20Upgradeable(token).allowance(address(this), to) < amount) {\\n            IERC20Upgradeable(token).safeApprove(to, 0);\\n            IERC20Upgradeable(token).safeApprove(to, uint256(~0));\\n        }\\n\\n    }\\n\\n    function _swap(address tokenA, address tokenB, uint256 amount) internal returns (uint256) {\\n\\n        approveToken(tokenA, SWAP_UTILS, amount);\\n        uint256 tokenReceived = SwapUtils(SWAP_UTILS).swap(tokenA, tokenB, amount);\\n        IERC20Upgradeable(tokenB).transferFrom(SWAP_UTILS, address(this), tokenReceived);\\n        return tokenReceived;\\n\\n    }\\n\\n    // --------------------------------------------------------------\\n    // User Read interface (shares and principal)\\n    // --------------------------------------------------------------\\n\\n    function sharesOf(address account) public  view returns (uint256) {\\n        return userShares[account];\\n    }\\n\\n    function principalOf(address account) public view returns (uint256) {\\n        return userPrincipal[account];\\n    }\\n\\n    // --------------------------------------------------------------\\n    // User Read Interface\\n    // --------------------------------------------------------------\\n\\n    function totalBalance() public override view returns(uint256) {\\n        return _underlyingWantTokenAmount();\\n    }\\n\\n    function balanceOf(address account) public view returns(uint256) {\\n\\n        if (totalShares == 0) return 0;\\n        if (sharesOf(account) == 0) return 0;\\n\\n        return _underlyingWantTokenAmount().mul(sharesOf(account)).div(totalShares);\\n    }\\n\\n    function earnedOf(address account) public view override returns (uint256) {\\n\\n        if (balanceOf(account) >= principalOf(account)) {\\n            return balanceOf(account).sub(principalOf(account));\\n        } else {\\n            return 0;\\n        }\\n\\n    }\\n\\n    // --------------------------------------------------------------\\n    // User Write Interface\\n    // --------------------------------------------------------------\\n\\n    function harvest() external nonEmergency nonReentrant {\\n        _harvest();\\n    }\\n\\n    function withdraw(uint256 principalAmount) external  nonEmergency nonReentrant {\\n        _withdraw(principalAmount);\\n    }\\n\\n    function withdrawAll() external virtual  nonEmergency nonReentrant {\\n\\n        require(userShares[msg.sender] > 0, \\\"MerlinStrategy: user without shares\\\");\\n\\n        uint256 shares = sharesOf(msg.sender);\\n        uint256 principal = principalOf(msg.sender);\\n        uint depositTimestamp = _depositedAt[msg.sender];\\n        // withdraw from under contract\\n        uint amount = balanceOf(msg.sender);\\n\\n        userShares[msg.sender] = 0;\\n        userPrincipal[msg.sender] = 0;\\n        delete _depositedAt[msg.sender];\\n        totalShares = totalShares.sub(shares);\\n\\n        // withdraw from under contract\\n        amount = _withdrawUnderlying(amount);\\n        uint profit = amount > principal ? amount.sub(principal) : 0;\\n        uint withdrawalFee = canMint() ? merlinMinter.withdrawalFee(principal, depositTimestamp) : 0;\\n        uint performanceFee = canMint() ? merlinMinter.performanceFee(profit) : 0;\\n        if (withdrawalFee.add(performanceFee) > DUST) {\\n            approveToken(STAKING_TOKEN, address(merlinMinter), withdrawalFee.add(performanceFee));\\n            merlinMinter.mintFor(STAKING_TOKEN, withdrawalFee, performanceFee, msg.sender, depositTimestamp);\\n            if (performanceFee > 0) {\\n                emit ProfitPaid(msg.sender, profit, performanceFee);\\n            }\\n            amount = amount.sub(withdrawalFee).sub(performanceFee);\\n        }\\n        _sendToken(msg.sender, amount);\\n\\n        emit WithdrawAll(msg.sender, amount, shares);\\n    }\\n\\n    function getReward() external nonEmergency nonReentrant {\\n        _getRewards();\\n    }\\n\\n    // --------------------------------------------------------------\\n    // Deposit and withdraw\\n    // --------------------------------------------------------------\\n\\n    function _deposit(uint256 wantTokenAmount) internal {\\n\\n        require(wantTokenAmount > DUST, \\\"MerlinStrategy: amount toooooo small\\\");\\n\\n        _receiveToken(msg.sender, wantTokenAmount);\\n\\n        // save current underlying want token amount for caluclate shares\\n        uint underlyingWantTokenAmountBeforeEnter = _underlyingWantTokenAmount();\\n\\n        // receive token and deposit into underlying contract\\n        uint256 wantTokenAdded = _depositUnderlying(wantTokenAmount);\\n\\n        // calculate shares\\n        uint256 sharesAdded = 0;\\n        if (totalShares == 0) {\\n            sharesAdded = wantTokenAdded;\\n        } else {\\n            sharesAdded = totalShares\\n                .mul(wantTokenAdded).mul(_DECIMAL)\\n                .div(underlyingWantTokenAmountBeforeEnter).div(_DECIMAL);\\n        }\\n\\n        // add our shares\\n        totalShares = totalShares.add(sharesAdded);\\n        userShares[msg.sender] = userShares[msg.sender].add(sharesAdded);\\n\\n        // add principal in real want token amount\\n        userPrincipal[msg.sender] = userPrincipal[msg.sender].add(wantTokenAdded);\\n        _depositedAt[msg.sender] = block.timestamp;\\n\\n        _tryReinvest();\\n\\n        emit Deposit(msg.sender, wantTokenAmount, wantTokenAdded, sharesAdded);\\n    }\\n\\n    function _withdraw(uint256 wantTokenAmount) internal {\\n\\n        require(userShares[msg.sender] > 0, \\\"MerlinStrategy: user without shares\\\");\\n\\n        // calculate max amount\\n        uint256 wantTokenRemoved = Math.min(\\n            userPrincipal[msg.sender],\\n            wantTokenAmount\\n        );\\n\\n        // reduce principal dust\\n        if (userPrincipal[msg.sender].sub(wantTokenRemoved) < DUST) {\\n            wantTokenRemoved = userPrincipal[msg.sender];\\n        }\\n\\n        // calculate shares\\n        uint256 shareRemoved = Math.min(\\n            userShares[msg.sender],\\n            wantTokenRemoved\\n                .mul(totalShares).mul(_DECIMAL)\\n                .div(_underlyingWantTokenAmount()).div(_DECIMAL)\\n        );\\n\\n        // reduce share dust\\n        if (userShares[msg.sender].sub(shareRemoved) < DUST) {\\n            shareRemoved = userShares[msg.sender];\\n        }\\n\\n        // remove our shares\\n        totalShares = totalShares.sub(shareRemoved);\\n        userShares[msg.sender] = userShares[msg.sender].sub(shareRemoved);\\n\\n        // remove principal\\n        // most time withdrawnWantTokenAmount = wantTokenAmount except underlying has withdraw fee\\n        userPrincipal[msg.sender] = userPrincipal[msg.sender].sub(wantTokenRemoved);\\n\\n        // withdraw from under contract\\n        uint256 withdrawnWantTokenAmount = _withdrawUnderlying(wantTokenRemoved);\\n\\n        withdrawnWantTokenAmount = withdrawnWantTokenAmount.sub(_addProfitReward(msg.sender, withdrawnWantTokenAmount, true));\\n\\n        _sendToken(msg.sender, withdrawnWantTokenAmount);\\n\\n        _tryReinvest();\\n\\n        emit Withdraw(msg.sender, wantTokenAmount, withdrawnWantTokenAmount, shareRemoved);\\n    }\\n\\n    function _getRewards() internal {\\n        // get current earned\\n        uint earnedWantTokenAmount = earnedOf(msg.sender);\\n\\n        if (earnedWantTokenAmount > 0) {\\n            // calculate shares\\n            uint256 shareRemoved = Math.min(\\n                userShares[msg.sender],\\n                earnedWantTokenAmount\\n                    .mul(totalShares).mul(_DECIMAL)\\n                    .div(_underlyingWantTokenAmount()).div(_DECIMAL)\\n            );\\n\\n            // if principal already empty, take all shares\\n            if (userPrincipal[msg.sender] == 0) {\\n                shareRemoved = userShares[msg.sender];\\n            }\\n\\n            // remove shares\\n            totalShares = totalShares.sub(shareRemoved);\\n            userShares[msg.sender] = userShares[msg.sender].sub(shareRemoved);\\n\\n            // withdraw\\n            earnedWantTokenAmount = _withdrawUnderlying(earnedWantTokenAmount);\\n\\n            // take some for profit reward\\n            earnedWantTokenAmount = earnedWantTokenAmount.sub(_addProfitReward(msg.sender, earnedWantTokenAmount,false));\\n\\n            // transfer\\n            if (earnedWantTokenAmount > 0) {\\n                _sendToken(msg.sender, earnedWantTokenAmount);\\n            }\\n\\n            _tryReinvest();\\n\\n            emit GetReward(msg.sender, earnedWantTokenAmount, shareRemoved);\\n        } else {\\n            _harvest();\\n        }\\n\\n    }\\n\\n    function _addProfitReward(address userAddress, uint256 amount, bool isWithdraw) internal virtual returns (uint256) {\\n\\n        if (canMint()) {\\n\\n            uint depositTimestamp = _depositedAt[userAddress];\\n\\n            if(isWithdraw){\\n                amount = merlinMinter.withdrawalFee(amount, depositTimestamp);\\n            }else{\\n                amount = merlinMinter.performanceFee(amount);\\n            }\\n            if (amount > DUST) {\\n                approveToken(STAKING_TOKEN, address(merlinMinter), amount);\\n                isWithdraw ? merlinMinter.mintFor(STAKING_TOKEN, amount, 0, msg.sender, depositTimestamp):merlinMinter.mintFor(STAKING_TOKEN, 0, amount, msg.sender, depositTimestamp);\\n                return amount;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    // --------------------------------------------------------------\\n    // Interactive with under contract\\n    // --------------------------------------------------------------\\n\\n    function _underlyingWantTokenAmount() public virtual view returns (uint256);\\n    function _receiveToken(address sender, uint256 amount) internal virtual;\\n    function _sendToken(address receiver, uint256 amount) internal virtual;\\n    function _tryReinvest() internal virtual;\\n    function _depositUnderlying(uint256 wantTokenAmount) internal virtual returns (uint256);\\n    function _withdrawUnderlying(uint256 wantTokenAmount) internal virtual returns (uint256);\\n    function _swapRewardTokenToWBNB(uint256 amount) internal virtual returns (uint256);\\n    function _harvest() internal virtual;\\n\\n    // --------------------------------------------------------------\\n    // Call Minter\\n    // --------------------------------------------------------------\\n\\n    function setMinter(address _minter) external onlyOwner {\\n        merlinMinter = IMerlinMinter(_minter);\\n    }\\n\\n    function canMint() internal view returns (bool) {\\n        return address(merlinMinter) != address(0) && merlinMinter.isMinter(address(this));\\n    }\\n\\n    function minter() external view  returns (address) {\\n        return canMint() ? address(merlinMinter) : address(0);\\n    }\\n\\n    // --------------------------------------------------------------\\n    // !! Emergency !!\\n    // --------------------------------------------------------------\\n\\n    bool public  IS_EMERGENCY_MODE;\\n\\n    modifier nonEmergency() {\\n        require(IS_EMERGENCY_MODE == false, \\\"MerlinStrategy: emergency mode.\\\");\\n        _;\\n    }\\n\\n    modifier onlyEmergency() {\\n        require(IS_EMERGENCY_MODE == true, \\\"MerlinStrategy: not emergency mode.\\\");\\n        _;\\n    }\\n\\n    function emergencyExit() external virtual;\\n    function emergencyWithdraw() external virtual;\\n\\n    // --------------------------------------------------------------\\n    // Events\\n    // --------------------------------------------------------------\\n    event Deposit(address user, uint256 wantTokenAmount, uint wantTokenAdded, uint256 shares);\\n    event Withdraw(address user, uint256 wantTokenAmount, uint withdrawWantTokenAmount, uint256 shares);\\n    event WithdrawAll(address user, uint256 wantTokenAmount, uint256 shares);\\n    event Reinvest(address user, uint256 amount);\\n    event GetReward(address user, uint256 amount, uint256 shares);\\n    event ProfitPaid(address indexed user, uint256 profit, uint256 performanceFee);\\n\\n}\\n\"\r\n    },\r\n    \"/Users/jimmyfan/Develop/merlin-contracts-dev/Merlin/contracts/v2/MerlinStrategyAlpacaBNB.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"./BaseMerlinStrategy.sol\\\";\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function withdraw(uint256) external;\\n}\\n\\nlibrary SafeToken {\\n  function safeTransferETH(address to, uint256 value) internal {\\n    // solhint-disable-next-line no-call-value\\n    (bool success, ) = to.call{value: value}(new bytes(0));\\n    require(success, \\\"SafeToken::safeTransferETH:: can't transfer\\\");\\n  }\\n}\\n\\ncontract MerlinStrategyAlpacaBNB is BaseMerlinStrategy {\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    // --------------------------------------------------------------\\n    // Address\\n    // --------------------------------------------------------------\\n\\n    /// @dev MasterChef address, for interactive underlying contract\\n    address public constant ALPACA_FAIR_LAUNCH = 0xA625AB01B08ce023B2a342Dbb12a16f2C8489A8F;\\n\\n    /// @dev Pool ID in MasterChef\\n    uint256 public constant ALPACA_FAIR_LAUNCH_POOL_ID = 1;\\n\\n    /// @dev Underlying reward token, ALPACA.\\n    address public  UNDERLYING_REWARD_TOKEN ;\\n\\n    /// @dev Strategy address, for calculate want token amount in underlying contract\\n    address public constant ALPACA_VAULT = 0xd7D069493685A581d27824Fc46EdA46B7EfC0063;\\n\\n\\n    function initialize(\\n        address _SWAP_UTILS\\n    ) external initializer {\\n\\n      __Base_init(_SWAP_UTILS);\\n      UNDERLYING_REWARD_TOKEN = 0x8F0528cE5eF7B51152A59745bEfDD91D97091d2F;\\n\\n    }\\n\\n    // --------------------------------------------------------------\\n    // Misc\\n    // --------------------------------------------------------------\\n\\n    modifier transferTokenToVault(uint256 value) {\\n\\n        if (msg.value != 0) {\\n            require(value == msg.value, \\\"Vault::transferTokenToVault:: value != msg.value\\\");\\n            IWETH(WRAPPED_NATIVE_TOKEN).deposit{value: msg.value}();\\n        } else {\\n            IERC20Upgradeable(WRAPPED_NATIVE_TOKEN).safeTransferFrom(msg.sender, address(this), value);\\n        }\\n        _;\\n\\n    }\\n\\n    /// @dev Fallback function to accept ETH.\\n    receive() external payable {}\\n\\n    // --------------------------------------------------------------\\n    // Current strategy info in under contract\\n    // --------------------------------------------------------------\\n\\n    function _underlyingShareAmount() public view override returns (uint256) {\\n\\n        (uint256 amount,,,) = IAlpacaFairLaunch(ALPACA_FAIR_LAUNCH).userInfo(ALPACA_FAIR_LAUNCH_POOL_ID, address(this));\\n        return amount;\\n\\n    }\\n\\n    function __underlyingWantTokenPerShares() public view returns (uint256) {\\n\\n        uint256 totalSupply = IAlpacaVault(ALPACA_VAULT).totalSupply();\\n        if (totalSupply <= 0) return _DECIMAL;\\n\\n        return IAlpacaVault(ALPACA_VAULT).totalToken()\\n            .mul(_DECIMAL)\\n            .div(totalSupply);\\n\\n    }\\n\\n    function _underlyingWantTokenAmount() public override view returns (uint256) {\\n        return _underlyingShareAmount().mul(__underlyingWantTokenPerShares()).div(_DECIMAL);\\n    }\\n\\n    // --------------------------------------------------------------\\n    // User Write Interface\\n    // --------------------------------------------------------------\\n\\n    function deposit(uint256 wantTokenAmount) external payable nonEmergency nonReentrant transferTokenToVault(wantTokenAmount) {\\n        _deposit(wantTokenAmount);\\n    }\\n\\n    // --------------------------------------------------------------\\n    // Interactive with under contract\\n    // --------------------------------------------------------------\\n\\n    function _depositUnderlying(uint256 wBNBAmount) internal override returns (uint256) {\\n        // 1. to vault\\n        uint256 ibBNBBefore = IERC20Upgradeable(ALPACA_VAULT).balanceOf(address(this));\\n        approveToken(WRAPPED_NATIVE_TOKEN, ALPACA_VAULT, wBNBAmount);\\n        IAlpacaVault(ALPACA_VAULT).deposit(wBNBAmount);\\n        uint256 ibBNBAmount = IERC20Upgradeable(ALPACA_VAULT).balanceOf(address(this)).sub(ibBNBBefore);\\n        // 2. to fair launch\\n        if (ibBNBAmount > 0) {\\n            approveToken(ALPACA_VAULT, ALPACA_FAIR_LAUNCH, ibBNBAmount);\\n            IAlpacaFairLaunch(ALPACA_FAIR_LAUNCH).deposit(address(this), ALPACA_FAIR_LAUNCH_POOL_ID, ibBNBAmount);\\n        }\\n        return ibBNBAmount.mul(__underlyingWantTokenPerShares()).div(_DECIMAL);\\n    }\\n\\n    function _withdrawUnderlying(uint256 wantTokenAmount) internal override returns (uint256) {\\n\\n        uint256 masterChefShares = wantTokenAmount.mul(_DECIMAL).div(__underlyingWantTokenPerShares());\\n\\n        // 1. from fair launch\\n        uint256 ibBNBBefore = IERC20Upgradeable(ALPACA_VAULT).balanceOf(address(this));\\n        IAlpacaFairLaunch(ALPACA_FAIR_LAUNCH).withdraw(address(this), ALPACA_FAIR_LAUNCH_POOL_ID, masterChefShares);\\n        uint256 ibBNBAmount = IERC20Upgradeable(ALPACA_VAULT).balanceOf(address(this)).sub(ibBNBBefore);\\n\\n        // 2. from vault\\n        uint256 BNBBefore = address(this).balance;\\n        IAlpacaVault(ALPACA_VAULT).withdraw(ibBNBAmount);\\n        uint256 BNBAmount = address(this).balance.sub(BNBBefore);\\n\\n        return BNBAmount;\\n\\n    }\\n\\n    function withdrawAll() external override nonEmergency nonReentrant {\\n\\n        require(userShares[msg.sender] > 0, \\\"MerlinStrategy: user without shares\\\");\\n        uint256 shares = sharesOf(msg.sender);\\n        uint256 principal = principalOf(msg.sender);\\n        uint depositTimestamp = _depositedAt[msg.sender];\\n        // withdraw from under contract\\n        uint amount = balanceOf(msg.sender);\\n\\n        userShares[msg.sender] = 0;\\n        userPrincipal[msg.sender] = 0;\\n        delete _depositedAt[msg.sender];\\n        totalShares = totalShares.sub(shares);\\n\\n        // withdraw from under contract\\n        amount = _withdrawUnderlying(amount);\\n        uint profit = amount > principal ? amount.sub(principal) : 0;\\n        uint withdrawalFee = canMint() ? merlinMinter.withdrawalFee(principal, depositTimestamp) : 0;\\n        uint performanceFee = canMint() ? merlinMinter.performanceFee(profit) : 0;\\n\\n        uint  withdrawalFee1 = _swapRewardTokenToWBNB(withdrawalFee);\\n        uint performanceFee1 = _swapRewardTokenToWBNB(performanceFee);\\n\\n        if (withdrawalFee1.add(performanceFee1) > DUST) {\\n\\n            approveToken(WRAPPED_NATIVE_TOKEN, address(merlinMinter), withdrawalFee1.add(performanceFee1));\\n            merlinMinter.mintFor(WRAPPED_NATIVE_TOKEN, withdrawalFee1, performanceFee1, msg.sender, depositTimestamp);\\n            if (performanceFee1 > 0) {\\n                emit ProfitPaid(msg.sender, profit, performanceFee);\\n            }\\n            amount = amount.sub(withdrawalFee).sub(performanceFee);\\n        }\\n\\n        _sendToken(msg.sender, amount);\\n\\n        emit WithdrawAll(msg.sender, amount, shares);\\n\\n    }\\n\\n    function _receiveToken(address sender, uint256 amount) internal override {\\n        // do nothing because BNB already received\\n    }\\n\\n    function _sendToken(address receiver, uint256 amount) internal override {\\n        SafeToken.safeTransferETH(receiver, amount);\\n    }\\n\\n    function _harvest() internal override {\\n        // if no token staked in underlying contract\\n        if (_underlyingWantTokenAmount() <= 0) return;\\n\\n        IAlpacaFairLaunch(ALPACA_FAIR_LAUNCH).harvest(ALPACA_FAIR_LAUNCH_POOL_ID);\\n\\n        _tryReinvest();\\n    }\\n\\n    function _tryReinvest() internal override {\\n\\n        if (IAlpacaToken(UNDERLYING_REWARD_TOKEN).canUnlockAmount(address(this)) > rewardTokenSwapThreshold) {\\n            IAlpacaToken(UNDERLYING_REWARD_TOKEN).unlock();\\n        }\\n\\n        // get current reward token amount\\n        uint256 rewardTokenAmount = IERC20Upgradeable(UNDERLYING_REWARD_TOKEN).balanceOf(address(this));\\n\\n        // if token amount too small, wait for save gas fee\\n        if (rewardTokenAmount < rewardTokenSwapThreshold) return;\\n\\n        // swap reward token to staking token\\n        uint256 stakingTokenAmount = _swap(UNDERLYING_REWARD_TOKEN, WRAPPED_NATIVE_TOKEN, rewardTokenAmount);\\n\\n        // get current staking token amount\\n        stakingTokenAmount = IERC20Upgradeable(WRAPPED_NATIVE_TOKEN).balanceOf(address(this));\\n\\n        // if token amount too small, wait for save gas fee\\n        if (stakingTokenAmount < stakingTokenReinvestThreshold) return;\\n\\n        // reinvest\\n        _depositUnderlying(stakingTokenAmount);\\n\\n        emit Reinvest(msg.sender, stakingTokenAmount);\\n\\n    }\\n\\n    function _addProfitReward(address userAddress, uint256 amount, bool isWithdraw) internal override returns (uint256) {\\n\\n        if (canMint()) {\\n\\n            uint depositTimestamp = _depositedAt[userAddress];\\n\\n            if(isWithdraw){\\n                amount = merlinMinter.withdrawalFee(amount, depositTimestamp);\\n            }else{\\n                amount = merlinMinter.performanceFee(amount);\\n            }\\n\\n            uint256 wBNBExchanged = _swapRewardTokenToWBNB(amount);\\n\\n            if (wBNBExchanged > DUST) {\\n\\n                approveToken(WRAPPED_NATIVE_TOKEN, address(merlinMinter), wBNBExchanged);\\n                isWithdraw ? merlinMinter.mintFor(WRAPPED_NATIVE_TOKEN, amount, 0, msg.sender, depositTimestamp):merlinMinter.mintFor(WRAPPED_NATIVE_TOKEN, 0, amount, msg.sender, depositTimestamp);\\n\\n                return amount;\\n\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    function _swapRewardTokenToWBNB(uint256 amount) internal override returns (uint256) {\\n        // exchange to wBNB\\n        uint256 wBNBBefore = IERC20Upgradeable(WRAPPED_NATIVE_TOKEN).balanceOf(address(this));\\n        IWETH(WRAPPED_NATIVE_TOKEN).deposit{value: amount}();\\n        uint256 wBNBExchanged = IERC20Upgradeable(WRAPPED_NATIVE_TOKEN).balanceOf(address(this)).sub(wBNBBefore);\\n        return wBNBExchanged;\\n    }\\n\\n\\n    // --------------------------------------------------------------\\n    // !! Emergency !!\\n    // --------------------------------------------------------------\\n\\n    function emergencyExit() external override onlyOwner {\\n\\n        IAlpacaFairLaunch(ALPACA_FAIR_LAUNCH).withdrawAll(address(this), ALPACA_FAIR_LAUNCH_POOL_ID);\\n        IAlpacaVault(ALPACA_VAULT).withdraw(IERC20Upgradeable(ALPACA_VAULT).balanceOf(address(this)));\\n        IS_EMERGENCY_MODE = true;\\n\\n    }\\n\\n    function emergencyWithdraw() external override onlyEmergency nonReentrant {\\n\\n        uint256 shares = userShares[msg.sender];\\n\\n        userShares[msg.sender] = 0;\\n        userPrincipal[msg.sender] = 0;\\n        delete _depositedAt[msg.sender];\\n\\n        // withdraw from under contract\\n        uint256 currentBalance = address(this).balance;\\n        uint256 amount = currentBalance.mul(_DECIMAL).mul(shares).div(totalShares).div(_DECIMAL);\\n        totalShares = totalShares.sub(shares);\\n\\n        SafeToken.safeTransferETH(msg.sender, amount);\\n    }\\n\\n\\n}\\n\"\r\n    },\r\n    \"/Users/jimmyfan/Develop/merlin-contracts-dev/Merlin/contracts/v2/interfaces/IMerlin.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMerlinStrategy {\\n    function totalShares() external view returns (uint256);\\n    function earnedOf(address account) external view returns (uint256);\\n    function _underlyingShareAmount() external view returns (uint256);\\n    function totalBalance() external view returns(uint256);\\n    function STAKING_TOKEN() external view returns (address);\\n}\\n\\ninterface IMerlinStrategyWithEmergency {\\n    function IS_EMERGENCY_MODE() external returns (bool);\\n}\\n\\ninterface IFairLaunchV1 {\\n    // Data structure\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n        uint256 bonusDebt;\\n        address fundedBy;\\n    }\\n    struct PoolInfo {\\n        address stakeToken;\\n        uint256 allocPoint;\\n        uint256 lastRewardBlock;\\n        uint256 accAlpacaPerShare;\\n        uint256 accAlpacaPerShareTilBonusEnd;\\n    }\\n\\n    // Information query functions\\n    function alpacaPerBlock() external view returns (uint256);\\n    function totalAllocPoint() external view returns (uint256);\\n    function poolInfo(uint256 pid) external view returns (IFairLaunchV1.PoolInfo memory);\\n    function userInfo(uint256 pid, address user) external view returns (IFairLaunchV1.UserInfo memory);\\n    function poolLength() external view returns (uint256);\\n\\n    // OnlyOwner functions\\n    function setAlpacaPerBlock(uint256 _alpacaPerBlock) external;\\n    function setBonus(uint256 _bonusMultiplier, uint256 _bonusEndBlock, uint256 _bonusLockUpBps) external;\\n    function manualMint(address _to, uint256 _amount) external;\\n    function addPool(uint256 _allocPoint, address _stakeToken, bool _withUpdate) external;\\n    function setPool(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\\n\\n    // User's interaction functions\\n    function pendingAlpaca(uint256 _pid, address _user) external view returns (uint256);\\n    function updatePool(uint256 _pid) external;\\n    function deposit(address _for, uint256 _pid, uint256 _amount) external;\\n    function withdraw(address _for, uint256 _pid, uint256 _amount) external;\\n    function withdrawAll(address _for, uint256 _pid) external;\\n    function harvest(uint256 _pid) external;\\n}\\ninterface IVault{\\n    function config() external view returns (address);\\n}\\n\\ninterface IVaultConfig {\\n    /// @dev Return minimum BaseToken debt size per position.\\n    function minDebtSize() external view returns (uint256);\\n\\n    /// @dev Return the interest rate per second, using 1e18 as denom.\\n    function getInterestRate(uint256 debt, uint256 floating) external view returns (uint256);\\n\\n    /// @dev Return the address of wrapped native token.\\n    function getWrappedNativeAddr() external view returns (address);\\n\\n    /// @dev Return the address of wNative relayer.\\n    function getWNativeRelayer() external view returns (address);\\n\\n    /// @dev Return the address of fair launch contract.\\n    function getFairLaunchAddr() external view returns (address);\\n\\n    /// @dev Return the bps rate for reserve pool.\\n    function getReservePoolBps() external view returns (uint256);\\n\\n    /// @dev Return the bps rate for Avada Kill caster.\\n    function getKillBps() external view returns (uint256);\\n\\n    /// @dev Return whether the given address is a worker.\\n    function isWorker(address worker) external view returns (bool);\\n\\n    /// @dev Return whether the given worker accepts more debt. Revert on non-worker.\\n    function acceptDebt(address worker) external view returns (bool);\\n\\n    /// @dev Return the work factor for the worker + BaseToken debt, using 1e4 as denom. Revert on non-worker.\\n    function workFactor(address worker, uint256 debt) external view returns (uint256);\\n\\n    /// @dev Return the kill factor for the worker + BaseToken debt, using 1e4 as denom. Revert on non-worker.\\n    function killFactor(address worker, uint256 debt) external view returns (uint256);\\n}\\ninterface IAlpacaFairLaunch {\\n    function deposit(\\n        address _for,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdraw(\\n        address _for,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _for, uint256 _pid) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    // Harvest ALPACAs earn from the pool.\\n    function harvest(uint256 _pid) external;\\n\\n    function pendingAlpaca(uint256 _pid, address _user) external view returns (uint256);\\n\\n    function userInfo(uint256 _pid, address _user)\\n    external\\n    view\\n    returns (\\n        uint256 amount,\\n        uint256 rewardDebt,\\n        uint256 bonusDebt,\\n        uint256 fundedBy\\n    );\\n}\\ninterface IAlpacaVault {\\n    // @dev Add more token to the lending pool. Hope to get some good returns.\\n    function deposit(uint256 amountToken) external payable;\\n\\n    // @dev Withdraw token from the lending and burning ibToken.\\n    function withdraw(uint256 share) external;\\n\\n    function totalToken() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\ninterface IAlpacaToken {\\n    function canUnlockAmount(address _account) external view returns (uint256);\\n\\n    function unlock() external;\\n\\n    // @dev move ALPACAs with its locked funds to another account\\n    function transferAll(address _to) external;\\n}\\n\\n\\ninterface PriceOracle {\\n    /// @dev Return the wad price of token0/token1, multiplied by 1e18\\n    /// NOTE: (if you have 1 token0 how much you can sell it for token1)\\n    function getPrice(address token0, address token1)\\n    external view\\n    returns (uint256 price, uint256 lastUpdate);\\n}\"\r\n    },\r\n    \"/Users/jimmyfan/Develop/merlin-contracts-dev/Merlin/contracts/v2/utils/SwapUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ninterface IPancakeFactory {\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n}\\n\\ninterface IPCSRouterLike {\\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata, address to, uint256 deadline) external;\\n}\\n\\ninterface IPancakePair {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function totalSupply() external view returns (uint);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n}\\n\\ncontract SwapUtils is OwnableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint256 constant _DECIMAL = 1e18;\\n    address public  WRAPPED_NATIVE_TOKEN;\\n\\n\\n    function initialize(\\n        address _FACTORY, // pancake: 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73, ape: 0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6\\n        address _ROUTER, // pancake: 0x10ED43C718714eb63d5aA57B78B54704E256024E, ape: 0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607\\n        address _WRAPPED_NATIVE_TOKEN // 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\\n    ) external initializer {\\n\\n        FACTORY = _FACTORY;\\n        PCS_LIKE_ROUTER = _ROUTER;\\n        WRAPPED_NATIVE_TOKEN = _WRAPPED_NATIVE_TOKEN;\\n        safeSwapThreshold = 20;\\n        __Ownable_init();\\n\\n    }\\n\\n    // --------------------------------------------------------------\\n    // Misc\\n    // --------------------------------------------------------------\\n\\n    address public  FACTORY;\\n    uint256 public safeSwapThreshold;\\n\\n    function updateSafeSwapThreshold(uint256 threshold) external onlyOwner {\\n        safeSwapThreshold = threshold;\\n    }\\n\\n    function tokenPriceInBNB(address _token, uint256 amount) view external returns(uint256) {\\n        address pair = IPancakeFactory(FACTORY).getPair(_token, address(WRAPPED_NATIVE_TOKEN));\\n        if (pair == address(0)) return 0;\\n        if (IPancakePair(pair).totalSupply() == 0) return 0;\\n\\n        (uint reserve0, uint reserve1, ) = IPancakePair(pair).getReserves();\\n\\n        if (IPancakePair(pair).token0() == address(WRAPPED_NATIVE_TOKEN)) {\\n            return amount.mul(_DECIMAL).mul(reserve0).div(reserve1).div(_DECIMAL);\\n        } else {\\n            return amount.mul(_DECIMAL).mul(reserve1).div(reserve0).div(_DECIMAL);\\n        }\\n    }\\n\\n    function checkNeedSwap(address _token, uint256 amount) view external returns (bool) {\\n        if (_token == WRAPPED_NATIVE_TOKEN) return false;\\n\\n        address pair = IPancakeFactory(FACTORY).getPair(_token, address(WRAPPED_NATIVE_TOKEN));\\n        if (pair == address(0)) return false;\\n        if (IPancakePair(pair).totalSupply() == 0) return false;\\n\\n        (uint reserve0, uint reserve1, ) = IPancakePair(pair).getReserves();\\n\\n        if (IPancakePair(pair).token0() == _token) {\\n            return reserve0 > amount.mul(safeSwapThreshold);\\n        } else {\\n            return reserve1 > amount.mul(safeSwapThreshold);\\n        }\\n    }\\n\\n    // --------------------------------------------------------------\\n    // Token swap\\n    // --------------------------------------------------------------\\n\\n    address public  PCS_LIKE_ROUTER;\\n\\n    function swap(address tokenA, address tokenB, uint256 amount) external returns (uint256) {\\n        if (amount <= 0) {\\n            return 0;\\n        }\\n\\n        IERC20Upgradeable(tokenA).safeTransferFrom(msg.sender, address(this), amount);\\n        IERC20Upgradeable(tokenA).safeApprove(PCS_LIKE_ROUTER, 0);\\n        IERC20Upgradeable(tokenA).safeApprove(PCS_LIKE_ROUTER, amount);\\n\\n        address[] memory path;\\n        if (tokenA == WRAPPED_NATIVE_TOKEN || tokenB == WRAPPED_NATIVE_TOKEN) {\\n            path = new address[](2);\\n            path[0] = tokenA;\\n            path[1] = tokenB;\\n        } else {\\n            path = new address[](3);\\n            path[0] = tokenA;\\n            path[1] = WRAPPED_NATIVE_TOKEN;\\n            path[2] = tokenB;\\n        }\\n\\n        uint256 balanceBefore = IERC20Upgradeable(tokenB).balanceOf(address(this));\\n\\n        IPCSRouterLike(PCS_LIKE_ROUTER).swapExactTokensForTokens(\\n            amount,\\n            uint256(0),\\n            path,\\n            address(this),\\n            block.timestamp.add(1800)\\n        );\\n        uint256 exchangeAmount = IERC20Upgradeable(tokenB).balanceOf(address(this)).sub(balanceBefore);\\n        IERC20Upgradeable(tokenB).safeApprove(msg.sender, 0);\\n        IERC20Upgradeable(tokenB).safeApprove(msg.sender, exchangeAmount);\\n\\n        return exchangeAmount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantTokenAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"GetReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"}],\"name\":\"ProfitPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawWantTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"WithdrawAll\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALPACA_FAIR_LAUNCH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALPACA_FAIR_LAUNCH_POOL_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALPACA_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_EMERGENCY_MODE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_UTILS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_REWARD_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__underlyingWantTokenPerShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_underlyingShareAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_underlyingWantTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wantTokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earnedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SWAP_UTILS\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPauseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merlinMinter\",\"outputs\":[{\"internalType\":\"contract IMerlinMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"principalOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingTokenReinvestThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardTokenSwapThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingTokenReinvestThreshold\",\"type\":\"uint256\"}],\"name\":\"updateThresholds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principalAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MerlinStrategyAlpacaBNB", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}