{"SourceCode": "pragma solidity 0.6.4;\r\n//ERC20 Interface\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    }\r\ninterface VETH {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint);\r\n    function totalSupply() external view returns (uint);\r\n    function genesis() external view returns (uint);\r\n    function currentEra() external view returns (uint);\r\n    function currentDay() external view returns (uint);\r\n    function emission() external view returns (uint);\r\n    function daysPerEra() external view returns (uint);\r\n    function secondsPerDay() external view returns (uint);\r\n    function nextDayTime() external view returns (uint);\r\n    function totalBurnt() external view returns (uint);\r\n    function totalFees() external view returns (uint);\r\n    function burnAddress() external view returns (address payable);\r\n    function upgradeHeight() external view returns (uint);\r\n    function mapEraDay_Units(uint, uint) external view returns (uint);\r\n    function mapPreviousOwnership(address payable) external view returns (uint);\r\n}\r\nlibrary SafeMath {\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n}\r\n    //======================================VETHER=========================================//\r\ncontract Vether3 is ERC20 {\r\n    using SafeMath for uint;\r\n    // ERC-20 Parameters\r\n    string public name; string public symbol;\r\n    uint public decimals; uint public override totalSupply;\r\n    // ERC-20 Mappings\r\n    mapping(address => uint) private _balances;\r\n    mapping(address => mapping(address => uint)) private _allowances;\r\n    // Public Parameters\r\n    uint coin = 10**18; uint public emission;\r\n    uint public currentEra; uint public currentDay;\r\n    uint public daysPerEra; uint public secondsPerDay;\r\n    uint public upgradeHeight; uint public upgradedAmount;\r\n    uint public genesis; uint public nextEraTime; uint public nextDayTime;\r\n    address payable public burnAddress; address public vether1; address public vether2; address deployer;\r\n    uint public totalFees; uint public totalBurnt; uint public totalEmitted;\r\n    address[] public holderArray; uint public holders;\r\n    address[] public excludedArray; uint public excludedCount;\r\n    // Public Mappings\r\n    mapping(uint=>uint) public mapEra_Emission;                                             // Era->Emission\r\n    mapping(uint=>mapping(uint=>uint)) public mapEraDay_MemberCount;                        // Era,Days->MemberCount\r\n    mapping(uint=>mapping(uint=>address[])) public mapEraDay_Members;                       // Era,Days->Members\r\n    mapping(uint=>mapping(uint=>uint)) public mapEraDay_Units;                              // Era,Days->Units\r\n    mapping(uint=>mapping(uint=>uint)) public mapEraDay_UnitsRemaining;                     // Era,Days->TotalUnits\r\n    mapping(uint=>mapping(uint=>uint)) public mapEraDay_EmissionRemaining;                  // Era,Days->Emission\r\n    mapping(uint=>mapping(uint=>mapping(address=>uint))) public mapEraDay_MemberUnits;      // Era,Days,Member->Units\r\n    mapping(address=>mapping(uint=>uint[])) public mapMemberEra_Days;                       // Member,Era->Days[]\r\n    mapping(address=>uint) public mapPreviousOwnership;                                     // Map previous owners\r\n    mapping(address=>bool) public mapHolder;                                                // Vether Holder\r\n    mapping(address=>bool) public mapAddress_Excluded;                                      // Address->Excluded\r\n    mapping(address=>uint) public mapAddress_BlockChange;                                   // Address->BlockHeight Change\r\n    // Events\r\n    event NewEra(uint era, uint emission, uint time, uint totalBurnt);\r\n    event NewDay(uint era, uint day, uint time, uint previousDayTotal, uint previousDayMembers);\r\n    event Burn(address indexed payer, address indexed member, uint era, uint day, uint units, uint dailyTotal);\r\n    event Withdrawal(address indexed caller, address indexed member, uint era, uint day, uint value, uint vetherRemaining);\r\n\r\n    //=====================================CREATION=========================================//\r\n    // Constructor\r\n    constructor() public {\r\n        vether1 = 0x31Bb711de2e457066c6281f231fb473FC5c2afd3;                               // First Vether\r\n        vether2 = 0x01217729940055011F17BeFE6270e6E59B7d0337;                               // Second Vether\r\n        upgradeHeight = 50;                                                                 // Height at which to upgrade\r\n        name = VETH(vether2).name(); symbol = VETH(vether2).symbol();\r\n        decimals = VETH(vether2).decimals(); totalSupply = VETH(vether2).totalSupply();\r\n        genesis = VETH(vether2).genesis(); emission = VETH(vether2).emission(); \r\n        currentEra = VETH(vether2).currentEra(); currentDay = upgradeHeight;                // Begin at Upgrade Height\r\n        daysPerEra = VETH(vether2).daysPerEra(); secondsPerDay = VETH(vether2).secondsPerDay();\r\n        totalBurnt = VETH(vether2).totalBurnt(); totalFees = VETH(vether2).totalFees();\r\n        totalEmitted = (upgradeHeight-1)*emission;\r\n        burnAddress = VETH(vether2).burnAddress(); deployer = msg.sender;\r\n        _balances[address(this)] = totalSupply; \r\n        emit Transfer(burnAddress, address(this), totalSupply);\r\n        nextEraTime = genesis + (secondsPerDay * daysPerEra);\r\n        nextDayTime = VETH(vether2).nextDayTime() + (secondsPerDay * (upgradeHeight - VETH(vether2).currentDay())); \r\n        mapAddress_Excluded[address(this)] = true;                                          \r\n        excludedArray.push(address(this)); excludedCount =1;                               \r\n        mapAddress_Excluded[burnAddress] = true;\r\n        excludedArray.push(burnAddress); excludedCount +=1; \r\n        mapEra_Emission[currentEra] = emission; \r\n        mapEraDay_EmissionRemaining[currentEra][currentDay] = emission; \r\n        _setMappings();                                                                  // Map historical units\r\n    }\r\n    function _setMappings() internal {\r\n        uint upgradeHeight1 = VETH(vether2).upgradeHeight();                \r\n        for(uint i=0;i<upgradeHeight1; i++) {\r\n            mapEraDay_Units[1][i] = VETH(vether1).mapEraDay_Units(1,i); \r\n        }\r\n        for(uint i=upgradeHeight1;i<upgradeHeight; i++) {\r\n            mapEraDay_Units[1][i] = VETH(vether2).mapEraDay_Units(1,i); \r\n        }\r\n    }\r\n\r\n    //========================================ERC20=========================================//\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        if(mapAddress_Excluded[spender]){\r\n            return totalSupply;\r\n        } else {\r\n            return _allowances[owner][spender];\r\n        }\r\n    }\r\n    // ERC20 Transfer function\r\n    function transfer(address to, uint value) public override returns (bool success) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    // ERC20 Approve function\r\n    function approve(address spender, uint value) public override returns (bool success) {\r\n        _allowances[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    // ERC20 TransferFrom function\r\n    function transferFrom(address from, address to, uint value) public override returns (bool success) {\r\n        if(!mapAddress_Excluded[msg.sender]){\r\n            require(value <= _allowances[from][msg.sender], 'Must not send more than allowance');\r\n            _allowances[from][msg.sender] -= value;\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    // Internal transfer function which includes the Fee\r\n    function _transfer(address _from, address _to, uint _value) private {\r\n        require(_balances[_from] >= _value, 'Must not send more than balance');\r\n        require(_balances[_to] + _value >= _balances[_to], 'Balance overflow');\r\n        if(!mapHolder[_to]){holderArray.push(_to); holders+=1; mapHolder[_to]=true;}\r\n        _balances[_from] =_balances[_from].sub(_value);\r\n        uint _fee = _getFee(_from, _to, _value);                                            // Get fee amount\r\n        _balances[_to] += (_value.sub(_fee));                                               // Add to receiver\r\n        _balances[address(this)] += _fee;                                                   // Add fee to self\r\n        totalFees += _fee;                                                                  // Track fees collected\r\n        emit Transfer(_from, _to, (_value.sub(_fee)));                                      // Transfer event\r\n        if (!mapAddress_Excluded[_from] && !mapAddress_Excluded[_to]) {\r\n            emit Transfer(_from, address(this), _fee);                                      // Fee Transfer event\r\n        }\r\n    }\r\n    // Calculate Fee amount\r\n    function _getFee(address _from, address _to, uint _value) private view returns (uint) {\r\n        if (mapAddress_Excluded[_from] || mapAddress_Excluded[_to]) {\r\n           return 0;                                                                        // No fee if excluded\r\n        } else {\r\n            return (_value / 1000);                                                         // Fee amount = 0.1%\r\n        }\r\n    }\r\n\r\n    //=======================================UPGRADE========================================//\r\n    // Allow to query for remaining upgrade amount\r\n    function getRemainingAmount() public view returns (uint amount){\r\n        uint maxEmissions = (upgradeHeight-1) * mapEra_Emission[1];                         // Max Emission on Old Contract\r\n        uint maxUpgradeAmount = (maxEmissions).sub(VETH(vether2).totalFees());              // Minus any collected fees\r\n        if(maxUpgradeAmount >= upgradedAmount){\r\n            return maxUpgradeAmount.sub(upgradedAmount);                                    // Return remaining\r\n        } else {\r\n            return 0;                                                                       // Return 0\r\n        }\r\n    }\r\n    // V1 upgrades \r\n    function upgradeV1() public {\r\n        uint amount = ERC20(vether1).balanceOf(msg.sender);                                 // Get Balance Vether1\r\n        if(amount > 0){\r\n            if(mapPreviousOwnership[msg.sender] < amount){\r\n                amount = mapPreviousOwnership[msg.sender];                                  // Upgrade as much as possible\r\n            } \r\n            uint remainingAmount = getRemainingAmount();\r\n            if(remainingAmount < amount){amount = remainingAmount;}                         // Handle final amount\r\n            upgradedAmount += amount; \r\n            mapPreviousOwnership[msg.sender] = mapPreviousOwnership[msg.sender].sub(amount);    // Update mappings\r\n            ERC20(vether1).transferFrom(msg.sender, burnAddress, amount);                   // Must collect & burn tokens\r\n            _transfer(address(this), msg.sender, amount);                                   // Send to owner\r\n        }\r\n    }\r\n    // V2 upgrades \r\n    function upgradeV2() public {\r\n        uint amount = ERC20(vether2).balanceOf(msg.sender);                                 // Get Balance Vether2\r\n        if(amount > 0){\r\n            if(mapPreviousOwnership[msg.sender] < amount){\r\n                amount = mapPreviousOwnership[msg.sender];                                  // Upgrade as much as possible\r\n            } \r\n            uint remainingAmount = getRemainingAmount();\r\n            if(remainingAmount < amount){amount = remainingAmount;}                         // Handle final amount\r\n            upgradedAmount += amount; \r\n            mapPreviousOwnership[msg.sender] = mapPreviousOwnership[msg.sender].sub(amount);    // Update mappings\r\n            ERC20(vether2).transferFrom(msg.sender, burnAddress, amount);                   // Must collect & burn tokens\r\n            _transfer(address(this), msg.sender, amount);                                   // Send to owner\r\n        }\r\n    }\r\n    // Snapshot previous owners\r\n    function snapshot(address[] memory owners, uint[] memory ownership) public{\r\n        require(msg.sender == deployer);\r\n        for(uint i = 0; i<owners.length; i++){\r\n            mapPreviousOwnership[owners[i]] = ownership[i];\r\n        }\r\n    }\r\n    // purge\r\n    function purgeDeployer() public{require(msg.sender == deployer);deployer = address(0);}\r\n\r\n    //==================================PROOF-OF-VALUE======================================//\r\n    // Calls when sending Ether\r\n    receive() external payable {\r\n        burnAddress.call.value(msg.value)(\"\");                                              // Burn ether\r\n        _recordBurn(msg.sender, msg.sender, currentEra, currentDay, msg.value);             // Record Burn\r\n    }\r\n    // Burn ether for nominated member\r\n    function burnEtherForMember(address member) external payable {\r\n        burnAddress.call.value(msg.value)(\"\");                                              // Burn ether\r\n        _recordBurn(msg.sender, member, currentEra, currentDay, msg.value);                 // Record Burn\r\n    }\r\n    // Internal - Records burn\r\n    function _recordBurn(address _payer, address _member, uint _era, uint _day, uint _eth) private {\r\n        require(VETH(vether2).currentDay() >= upgradeHeight || VETH(vether2).currentEra() > 1); // Prohibit until upgrade height\r\n        if (mapEraDay_MemberUnits[_era][_day][_member] == 0){                               // If hasn't contributed to this Day yet\r\n            mapMemberEra_Days[_member][_era].push(_day);                                    // Add it\r\n            mapEraDay_MemberCount[_era][_day] += 1;                                         // Count member\r\n            mapEraDay_Members[_era][_day].push(_member);                                    // Add member\r\n        }\r\n        mapEraDay_MemberUnits[_era][_day][_member] += _eth;                                 // Add member's share\r\n        mapEraDay_UnitsRemaining[_era][_day] += _eth;                                       // Add to total historicals\r\n        mapEraDay_Units[_era][_day] += _eth;                                                // Add to total outstanding\r\n        totalBurnt += _eth;                                                                 // Add to total burnt\r\n        emit Burn(_payer, _member, _era, _day, _eth, mapEraDay_Units[_era][_day]);          // Burn event\r\n        _updateEmission();                                                                  // Update emission Schedule\r\n    }\r\n    // Allows changing an excluded address\r\n    function changeExcluded(address excluded) external {    \r\n        if(!mapAddress_Excluded[excluded]){\r\n            _transfer(msg.sender, address(this), mapEra_Emission[1]/16);                    // Pay fee of 128 Vether\r\n            mapAddress_Excluded[excluded] = true;                                           // Add desired address\r\n            excludedArray.push(excluded); excludedCount +=1;                                // Record details\r\n            totalFees += mapEra_Emission[1]/16;                                             // Record fees\r\n            mapAddress_BlockChange[excluded] = block.number;                                // Record time of change\r\n        } else {\r\n            _transfer(msg.sender, address(this), mapEra_Emission[1]/32);                    // Pay fee of 64 Vether\r\n            mapAddress_Excluded[excluded] = false;                                          // Change desired address\r\n            totalFees += mapEra_Emission[1]/32;                                             // Record fees\r\n            mapAddress_BlockChange[excluded] = block.number;                                // Record time of change\r\n        }               \r\n    }\r\n    //======================================WITHDRAWAL======================================//\r\n    // Used to efficiently track participation in each era\r\n    function getDaysContributedForEra(address member, uint era) public view returns(uint){\r\n        return mapMemberEra_Days[member][era].length;\r\n    }\r\n    // Call to withdraw a claim\r\n    function withdrawShare(uint era, uint day) external returns (uint value) {\r\n        value = _withdrawShare(era, day, msg.sender);                           \r\n    }\r\n    // Call to withdraw a claim for another member\r\n    function withdrawShareForMember(uint era, uint day, address member) external returns (uint value) {\r\n        value = _withdrawShare(era, day, member);\r\n    }\r\n    // Internal - withdraw function\r\n    function _withdrawShare (uint _era, uint _day, address _member) private returns (uint value) {\r\n        _updateEmission(); \r\n        if (_era < currentEra) {                                                            // Allow if in previous Era\r\n            value = _processWithdrawal(_era, _day, _member);                                // Process Withdrawal\r\n        } else if (_era == currentEra) {                                                    // Handle if in current Era\r\n            if (_day < currentDay) {                                                        // Allow only if in previous Day\r\n                value = _processWithdrawal(_era, _day, _member);                            // Process Withdrawal\r\n            }\r\n        }  \r\n        return value;\r\n    }\r\n    // Internal - Withdrawal function\r\n    function _processWithdrawal (uint _era, uint _day, address _member) private returns (uint value) {\r\n        uint memberUnits = mapEraDay_MemberUnits[_era][_day][_member];                      // Get Member Units\r\n        if (memberUnits == 0) { \r\n            value = 0;                                                                      // Do nothing if 0 (prevents revert)\r\n        } else {\r\n            value = getEmissionShare(_era, _day, _member);                                  // Get the emission Share for Member\r\n            mapEraDay_MemberUnits[_era][_day][_member] = 0;                                 // Set to 0 since it will be withdrawn\r\n            mapEraDay_UnitsRemaining[_era][_day] = mapEraDay_UnitsRemaining[_era][_day].sub(memberUnits);  // Decrement Member Units\r\n            mapEraDay_EmissionRemaining[_era][_day] = mapEraDay_EmissionRemaining[_era][_day].sub(value);  // Decrement emission\r\n            totalEmitted += value;                                                          // Add to Total Emitted\r\n            _transfer(address(this), _member, value);                                       // ERC20 transfer function\r\n            emit Withdrawal(msg.sender, _member, _era, _day, \r\n            value, mapEraDay_EmissionRemaining[_era][_day]);\r\n        }\r\n        return value;\r\n    }\r\n    // Get emission Share function\r\n    function getEmissionShare(uint era, uint day, address member) public view returns (uint value) {\r\n        uint memberUnits = mapEraDay_MemberUnits[era][day][member];                         // Get Member Units\r\n        if (memberUnits == 0) {\r\n            return 0;                                                                       // If 0, return 0\r\n        } else {\r\n            uint totalUnits = mapEraDay_UnitsRemaining[era][day];                           // Get Total Units\r\n            uint emissionRemaining = mapEraDay_EmissionRemaining[era][day];                 // Get emission remaining for Day\r\n            uint balance = _balances[address(this)];                                        // Find remaining balance\r\n            if (emissionRemaining > balance) { emissionRemaining = balance; }               // In case less than required emission\r\n            value = (emissionRemaining * memberUnits) / totalUnits;                         // Calculate share\r\n            return  value;                            \r\n        }\r\n    }\r\n    //======================================EMISSION========================================//\r\n    // Internal - Update emission function\r\n    function _updateEmission() private {\r\n        uint _now = now;                                                                    // Find now()\r\n        if (_now >= nextDayTime) {                                                          // If time passed the next Day time\r\n            if (currentDay >= daysPerEra) {                                                 // If time passed the next Era time\r\n                currentEra += 1; currentDay = 0;                                            // Increment Era, reset Day\r\n                nextEraTime = _now + (secondsPerDay * daysPerEra);                          // Set next Era time\r\n                emission = getNextEraEmission();                                            // Get correct emission\r\n                mapEra_Emission[currentEra] = emission;                                     // Map emission to Era\r\n                emit NewEra(currentEra, emission, nextEraTime, totalBurnt);                 // Emit Event\r\n            }\r\n            currentDay += 1;                                                                // Increment Day\r\n            nextDayTime = _now + secondsPerDay;                                             // Set next Day time\r\n            emission = getDayEmission();                                                    // Check daily Dmission\r\n            mapEraDay_EmissionRemaining[currentEra][currentDay] = emission;                 // Map emission to Day\r\n            uint _era = currentEra; uint _day = currentDay-1;\r\n            if(currentDay == 1){ _era = currentEra-1; _day = daysPerEra; }                  // Handle New Era\r\n            emit NewDay(currentEra, currentDay, nextDayTime, \r\n            mapEraDay_Units[_era][_day], mapEraDay_MemberCount[_era][_day]);                // Emit Event\r\n        }\r\n    }\r\n    // Calculate Era emission\r\n    function getNextEraEmission() public view returns (uint) {\r\n        if (emission > coin) {                                                              // Normal Emission Schedule\r\n            return emission / 2;                                                            // Emissions: 2048 -> 1.0\r\n        } else{                                                                             // Enters Fee Era\r\n            return coin;                                                                    // Return 1.0 from fees\r\n        }\r\n    }\r\n    // Calculate Day emission\r\n    function getDayEmission() public view returns (uint) {\r\n        uint balance = _balances[address(this)];                                            // Find remaining balance\r\n        if (balance > emission) {                                                           // Balance is sufficient\r\n            return emission;                                                                // Return emission\r\n        } else {                                                                            // Balance has dropped low\r\n            return balance;                                                                 // Return full balance\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"units\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dailyTotal\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDayTotal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousDayMembers\",\"type\":\"uint256\"}],\"name\":\"NewDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBurnt\",\"type\":\"uint256\"}],\"name\":\"NewEra\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vetherRemaining\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"burnEtherForMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"excluded\",\"type\":\"address\"}],\"name\":\"changeExcluded\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysPerEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"excludedArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDayEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"}],\"name\":\"getDaysContributedForEra\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getEmissionShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextEraEmission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holderArray\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapAddress_BlockChange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapAddress_Excluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEraDay_EmissionRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEraDay_MemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapEraDay_MemberUnits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEraDay_Members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEraDay_Units\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEraDay_UnitsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapEra_Emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mapMemberEra_Days\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mapPreviousOwnership\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEraTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purgeDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ownership\",\"type\":\"uint256[]\"}],\"name\":\"snapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEmitted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vether1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vether2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"withdrawShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"era\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"withdrawShareForMember\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Vether3", "CompilerVersion": "v0.6.4+commit.1dca32f3", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://227cb27a497b95bc8c9c88f8c6d7b23494ca6920cfa2531267510354356fefad"}