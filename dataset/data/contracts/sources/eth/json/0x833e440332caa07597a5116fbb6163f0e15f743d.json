{"SourceCode": "pragma solidity ^0.6.10;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface CErc20 {\r\n    function underlying() external view returns (address);\r\n}\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address account) external view returns (uint);\r\n}\r\n\r\ncontract UniswapConfig {\r\n    enum PriceSource {\r\n        FIXED_ETH, /// implies the fixedPrice is a constant multiple of the ETH price (which varies)\r\n        FIXED_USD, /// implies the fixedPrice is a constant multiple of the USD price (which is 1)\r\n        REPORTER   /// implies the price is set by the reporter\r\n    }\r\n\r\n    /// @dev Describe how the USD price should be determined for an asset.\r\n    ///  There should be 1 TokenConfig object for each supported asset, passed in the constructor.\r\n    struct TokenConfig {\r\n        address sToken;\r\n        address underlying;\r\n        bytes32 symbolHash;\r\n        uint256 baseUnit;\r\n        PriceSource priceSource;\r\n        uint256 fixedPrice;\r\n        address uniswapMarket;\r\n        bool isUniswapReversed;\r\n        bool isLP;\r\n    }\r\n\r\n    /// @notice The max number of tokens this contract is hardcoded to support\r\n    /// @dev Do not change this variable without updating all the fields throughout the contract.\r\n    uint public constant maxTokens = 20;\r\n\r\n    /// @notice The number of tokens this contract actually supports\r\n    uint public immutable numTokens;\r\n\r\n    address internal immutable sToken00;\r\n    address internal immutable sToken01;\r\n    address internal immutable sToken02;\r\n    address internal immutable sToken03;\r\n    address internal immutable sToken04;\r\n    address internal immutable sToken05;\r\n    address internal immutable sToken06;\r\n    address internal immutable sToken07;\r\n    address internal immutable sToken08;\r\n    address internal immutable sToken09;\r\n    address internal immutable sToken10;\r\n    address internal immutable sToken11;\r\n    address internal immutable sToken12;\r\n    address internal immutable sToken13;\r\n    address internal immutable sToken14;\r\n    address internal immutable sToken15;\r\n    address internal immutable sToken16;\r\n    address internal immutable sToken17;\r\n    address internal immutable sToken18;\r\n    address internal immutable sToken19;\r\n\r\n\r\n    address internal immutable underlying00;\r\n    address internal immutable underlying01;\r\n    address internal immutable underlying02;\r\n    address internal immutable underlying03;\r\n    address internal immutable underlying04;\r\n    address internal immutable underlying05;\r\n    address internal immutable underlying06;\r\n    address internal immutable underlying07;\r\n    address internal immutable underlying08;\r\n    address internal immutable underlying09;\r\n    address internal immutable underlying10;\r\n    address internal immutable underlying11;\r\n    address internal immutable underlying12;\r\n    address internal immutable underlying13;\r\n    address internal immutable underlying14;\r\n    address internal immutable underlying15;\r\n    address internal immutable underlying16;\r\n    address internal immutable underlying17;\r\n    address internal immutable underlying18;\r\n    address internal immutable underlying19;\r\n\r\n\r\n    bytes32 internal immutable symbolHash00;\r\n    bytes32 internal immutable symbolHash01;\r\n    bytes32 internal immutable symbolHash02;\r\n    bytes32 internal immutable symbolHash03;\r\n    bytes32 internal immutable symbolHash04;\r\n    bytes32 internal immutable symbolHash05;\r\n    bytes32 internal immutable symbolHash06;\r\n    bytes32 internal immutable symbolHash07;\r\n    bytes32 internal immutable symbolHash08;\r\n    bytes32 internal immutable symbolHash09;\r\n    bytes32 internal immutable symbolHash10;\r\n    bytes32 internal immutable symbolHash11;\r\n    bytes32 internal immutable symbolHash12;\r\n    bytes32 internal immutable symbolHash13;\r\n    bytes32 internal immutable symbolHash14;\r\n    bytes32 internal immutable symbolHash15;\r\n    bytes32 internal immutable symbolHash16;\r\n    bytes32 internal immutable symbolHash17;\r\n    bytes32 internal immutable symbolHash18;\r\n    bytes32 internal immutable symbolHash19;\r\n\r\n    uint256 internal immutable baseUnit00;\r\n    uint256 internal immutable baseUnit01;\r\n    uint256 internal immutable baseUnit02;\r\n    uint256 internal immutable baseUnit03;\r\n    uint256 internal immutable baseUnit04;\r\n    uint256 internal immutable baseUnit05;\r\n    uint256 internal immutable baseUnit06;\r\n    uint256 internal immutable baseUnit07;\r\n    uint256 internal immutable baseUnit08;\r\n    uint256 internal immutable baseUnit09;\r\n    uint256 internal immutable baseUnit10;\r\n    uint256 internal immutable baseUnit11;\r\n    uint256 internal immutable baseUnit12;\r\n    uint256 internal immutable baseUnit13;\r\n    uint256 internal immutable baseUnit14;\r\n    uint256 internal immutable baseUnit15;\r\n    uint256 internal immutable baseUnit16;\r\n    uint256 internal immutable baseUnit17;\r\n    uint256 internal immutable baseUnit18;\r\n    uint256 internal immutable baseUnit19;\r\n\r\n    PriceSource internal immutable priceSource00;\r\n    PriceSource internal immutable priceSource01;\r\n    PriceSource internal immutable priceSource02;\r\n    PriceSource internal immutable priceSource03;\r\n    PriceSource internal immutable priceSource04;\r\n    PriceSource internal immutable priceSource05;\r\n    PriceSource internal immutable priceSource06;\r\n    PriceSource internal immutable priceSource07;\r\n    PriceSource internal immutable priceSource08;\r\n    PriceSource internal immutable priceSource09;\r\n    PriceSource internal immutable priceSource10;\r\n    PriceSource internal immutable priceSource11;\r\n    PriceSource internal immutable priceSource12;\r\n    PriceSource internal immutable priceSource13;\r\n    PriceSource internal immutable priceSource14;\r\n    PriceSource internal immutable priceSource15;\r\n    PriceSource internal immutable priceSource16;\r\n    PriceSource internal immutable priceSource17;\r\n    PriceSource internal immutable priceSource18;\r\n    PriceSource internal immutable priceSource19;\r\n\r\n    uint256 internal immutable fixedPrice00;\r\n    uint256 internal immutable fixedPrice01;\r\n    uint256 internal immutable fixedPrice02;\r\n    uint256 internal immutable fixedPrice03;\r\n    uint256 internal immutable fixedPrice04;\r\n    uint256 internal immutable fixedPrice05;\r\n    uint256 internal immutable fixedPrice06;\r\n    uint256 internal immutable fixedPrice07;\r\n    uint256 internal immutable fixedPrice08;\r\n    uint256 internal immutable fixedPrice09;\r\n    uint256 internal immutable fixedPrice10;\r\n    uint256 internal immutable fixedPrice11;\r\n    uint256 internal immutable fixedPrice12;\r\n    uint256 internal immutable fixedPrice13;\r\n    uint256 internal immutable fixedPrice14;\r\n    uint256 internal immutable fixedPrice15;\r\n    uint256 internal immutable fixedPrice16;\r\n    uint256 internal immutable fixedPrice17;\r\n    uint256 internal immutable fixedPrice18;\r\n    uint256 internal immutable fixedPrice19;\r\n\r\n    address internal immutable uniswapMarket00;\r\n    address internal immutable uniswapMarket01;\r\n    address internal immutable uniswapMarket02;\r\n    address internal immutable uniswapMarket03;\r\n    address internal immutable uniswapMarket04;\r\n    address internal immutable uniswapMarket05;\r\n    address internal immutable uniswapMarket06;\r\n    address internal immutable uniswapMarket07;\r\n    address internal immutable uniswapMarket08;\r\n    address internal immutable uniswapMarket09;\r\n    address internal immutable uniswapMarket10;\r\n    address internal immutable uniswapMarket11;\r\n    address internal immutable uniswapMarket12;\r\n    address internal immutable uniswapMarket13;\r\n    address internal immutable uniswapMarket14;\r\n    address internal immutable uniswapMarket15;\r\n    address internal immutable uniswapMarket16;\r\n    address internal immutable uniswapMarket17;\r\n    address internal immutable uniswapMarket18;\r\n    address internal immutable uniswapMarket19;\r\n\r\n    bool internal immutable isUniswapReversed00;\r\n    bool internal immutable isUniswapReversed01;\r\n    bool internal immutable isUniswapReversed02;\r\n    bool internal immutable isUniswapReversed03;\r\n    bool internal immutable isUniswapReversed04;\r\n    bool internal immutable isUniswapReversed05;\r\n    bool internal immutable isUniswapReversed06;\r\n    bool internal immutable isUniswapReversed07;\r\n    bool internal immutable isUniswapReversed08;\r\n    bool internal immutable isUniswapReversed09;\r\n    bool internal immutable isUniswapReversed10;\r\n    bool internal immutable isUniswapReversed11;\r\n    bool internal immutable isUniswapReversed12;\r\n    bool internal immutable isUniswapReversed13;\r\n    bool internal immutable isUniswapReversed14;\r\n    bool internal immutable isUniswapReversed15;\r\n    bool internal immutable isUniswapReversed16;\r\n    bool internal immutable isUniswapReversed17;\r\n    bool internal immutable isUniswapReversed18;\r\n    bool internal immutable isUniswapReversed19;\r\n\r\n    bool internal immutable isLP00;\r\n    bool internal immutable isLP01;\r\n    bool internal immutable isLP02;\r\n    bool internal immutable isLP03;\r\n    bool internal immutable isLP04;\r\n    bool internal immutable isLP05;\r\n    bool internal immutable isLP06;\r\n    bool internal immutable isLP07;\r\n    bool internal immutable isLP08;\r\n    bool internal immutable isLP09;\r\n    bool internal immutable isLP10;\r\n    bool internal immutable isLP11;\r\n    bool internal immutable isLP12;\r\n    bool internal immutable isLP13;\r\n    bool internal immutable isLP14;\r\n    bool internal immutable isLP15;\r\n    bool internal immutable isLP16;\r\n    bool internal immutable isLP17;\r\n    bool internal immutable isLP18;\r\n    bool internal immutable isLP19;\r\n\r\n    constructor(address[] memory sTokens_, address[] memory underlyings_,\r\n        bytes32[] memory symbolHashs_, uint256[] memory baseUints_,\r\n        PriceSource[] memory priceSources_, uint256[] memory fixedPrices_, address[] memory uniswapMarkets_, bool[] memory isUniswapReverseds_,\r\n        bool[] memory isLP_) public {\r\n\r\n        require(sTokens_.length <= maxTokens, \"too many sToken\");\r\n        TokenConfig[] memory configs = new TokenConfig[](maxTokens);\r\n        for (uint i = 0; i < sTokens_.length; i++) {\r\n            TokenConfig memory config = TokenConfig({\r\n            sToken : sTokens_[i],\r\n            underlying : underlyings_[i],\r\n            symbolHash : symbolHashs_[i],\r\n            baseUnit : baseUints_[i],\r\n            priceSource: priceSources_[i],\r\n            fixedPrice: fixedPrices_[i],\r\n            uniswapMarket : uniswapMarkets_[i],\r\n            isUniswapReversed : isUniswapReverseds_[i],\r\n            isLP: isLP_[i]\r\n            });\r\n            configs[i] = config;\r\n        }\r\n\r\n        require(configs.length <= maxTokens, \"too many configs\");\r\n        numTokens = configs.length;\r\n\r\n        sToken00 = get(configs, 0).sToken;\r\n        sToken01 = get(configs, 1).sToken;\r\n        sToken02 = get(configs, 2).sToken;\r\n        sToken03 = get(configs, 3).sToken;\r\n        sToken04 = get(configs, 4).sToken;\r\n        sToken05 = get(configs, 5).sToken;\r\n        sToken06 = get(configs, 6).sToken;\r\n        sToken07 = get(configs, 7).sToken;\r\n        sToken08 = get(configs, 8).sToken;\r\n        sToken09 = get(configs, 9).sToken;\r\n        sToken10 = get(configs, 10).sToken;\r\n        sToken11 = get(configs, 11).sToken;\r\n        sToken12 = get(configs, 12).sToken;\r\n        sToken13 = get(configs, 13).sToken;\r\n        sToken14 = get(configs, 14).sToken;\r\n        sToken15 = get(configs, 15).sToken;\r\n        sToken16 = get(configs, 16).sToken;\r\n        sToken17 = get(configs, 17).sToken;\r\n        sToken18 = get(configs, 18).sToken;\r\n        sToken19 = get(configs, 19).sToken;\r\n\r\n        underlying00 = get(configs, 0).underlying;\r\n        underlying01 = get(configs, 1).underlying;\r\n        underlying02 = get(configs, 2).underlying;\r\n        underlying03 = get(configs, 3).underlying;\r\n        underlying04 = get(configs, 4).underlying;\r\n        underlying05 = get(configs, 5).underlying;\r\n        underlying06 = get(configs, 6).underlying;\r\n        underlying07 = get(configs, 7).underlying;\r\n        underlying08 = get(configs, 8).underlying;\r\n        underlying09 = get(configs, 9).underlying;\r\n        underlying10 = get(configs, 10).underlying;\r\n        underlying11 = get(configs, 11).underlying;\r\n        underlying12 = get(configs, 12).underlying;\r\n        underlying13 = get(configs, 13).underlying;\r\n        underlying14 = get(configs, 14).underlying;\r\n        underlying15 = get(configs, 15).underlying;\r\n        underlying16 = get(configs, 16).underlying;\r\n        underlying17 = get(configs, 17).underlying;\r\n        underlying18 = get(configs, 18).underlying;\r\n        underlying19 = get(configs, 19).underlying;\r\n\r\n        symbolHash00 = get(configs, 0).symbolHash;\r\n        symbolHash01 = get(configs, 1).symbolHash;\r\n        symbolHash02 = get(configs, 2).symbolHash;\r\n        symbolHash03 = get(configs, 3).symbolHash;\r\n        symbolHash04 = get(configs, 4).symbolHash;\r\n        symbolHash05 = get(configs, 5).symbolHash;\r\n        symbolHash06 = get(configs, 6).symbolHash;\r\n        symbolHash07 = get(configs, 7).symbolHash;\r\n        symbolHash08 = get(configs, 8).symbolHash;\r\n        symbolHash09 = get(configs, 9).symbolHash;\r\n        symbolHash10 = get(configs, 10).symbolHash;\r\n        symbolHash11 = get(configs, 11).symbolHash;\r\n        symbolHash12 = get(configs, 12).symbolHash;\r\n        symbolHash13 = get(configs, 13).symbolHash;\r\n        symbolHash14 = get(configs, 14).symbolHash;\r\n        symbolHash15 = get(configs, 15).symbolHash;\r\n        symbolHash16 = get(configs, 16).symbolHash;\r\n        symbolHash17 = get(configs, 17).symbolHash;\r\n        symbolHash18 = get(configs, 18).symbolHash;\r\n        symbolHash19 = get(configs, 19).symbolHash;\r\n\r\n        baseUnit00 = get(configs, 0).baseUnit;\r\n        baseUnit01 = get(configs, 1).baseUnit;\r\n        baseUnit02 = get(configs, 2).baseUnit;\r\n        baseUnit03 = get(configs, 3).baseUnit;\r\n        baseUnit04 = get(configs, 4).baseUnit;\r\n        baseUnit05 = get(configs, 5).baseUnit;\r\n        baseUnit06 = get(configs, 6).baseUnit;\r\n        baseUnit07 = get(configs, 7).baseUnit;\r\n        baseUnit08 = get(configs, 8).baseUnit;\r\n        baseUnit09 = get(configs, 9).baseUnit;\r\n        baseUnit10 = get(configs, 10).baseUnit;\r\n        baseUnit11 = get(configs, 11).baseUnit;\r\n        baseUnit12 = get(configs, 12).baseUnit;\r\n        baseUnit13 = get(configs, 13).baseUnit;\r\n        baseUnit14 = get(configs, 14).baseUnit;\r\n        baseUnit15 = get(configs, 15).baseUnit;\r\n        baseUnit16 = get(configs, 16).baseUnit;\r\n        baseUnit17 = get(configs, 17).baseUnit;\r\n        baseUnit18 = get(configs, 18).baseUnit;\r\n        baseUnit19 = get(configs, 19).baseUnit;\r\n\r\n        priceSource00 = get(configs, 0).priceSource;\r\n        priceSource01 = get(configs, 1).priceSource;\r\n        priceSource02 = get(configs, 2).priceSource;\r\n        priceSource03 = get(configs, 3).priceSource;\r\n        priceSource04 = get(configs, 4).priceSource;\r\n        priceSource05 = get(configs, 5).priceSource;\r\n        priceSource06 = get(configs, 6).priceSource;\r\n        priceSource07 = get(configs, 7).priceSource;\r\n        priceSource08 = get(configs, 8).priceSource;\r\n        priceSource09 = get(configs, 9).priceSource;\r\n        priceSource10 = get(configs, 10).priceSource;\r\n        priceSource11 = get(configs, 11).priceSource;\r\n        priceSource12 = get(configs, 12).priceSource;\r\n        priceSource13 = get(configs, 13).priceSource;\r\n        priceSource14 = get(configs, 14).priceSource;\r\n        priceSource15 = get(configs, 15).priceSource;\r\n        priceSource16 = get(configs, 16).priceSource;\r\n        priceSource17 = get(configs, 17).priceSource;\r\n        priceSource18 = get(configs, 18).priceSource;\r\n        priceSource19 = get(configs, 19).priceSource;\r\n\r\n        fixedPrice00 = get(configs, 0).fixedPrice;\r\n        fixedPrice01 = get(configs, 1).fixedPrice;\r\n        fixedPrice02 = get(configs, 2).fixedPrice;\r\n        fixedPrice03 = get(configs, 3).fixedPrice;\r\n        fixedPrice04 = get(configs, 4).fixedPrice;\r\n        fixedPrice05 = get(configs, 5).fixedPrice;\r\n        fixedPrice06 = get(configs, 6).fixedPrice;\r\n        fixedPrice07 = get(configs, 7).fixedPrice;\r\n        fixedPrice08 = get(configs, 8).fixedPrice;\r\n        fixedPrice09 = get(configs, 9).fixedPrice;\r\n        fixedPrice10 = get(configs, 10).fixedPrice;\r\n        fixedPrice11 = get(configs, 11).fixedPrice;\r\n        fixedPrice12 = get(configs, 12).fixedPrice;\r\n        fixedPrice13 = get(configs, 13).fixedPrice;\r\n        fixedPrice14 = get(configs, 14).fixedPrice;\r\n        fixedPrice15 = get(configs, 15).fixedPrice;\r\n        fixedPrice16 = get(configs, 16).fixedPrice;\r\n        fixedPrice17 = get(configs, 17).fixedPrice;\r\n        fixedPrice18 = get(configs, 18).fixedPrice;\r\n        fixedPrice19 = get(configs, 19).fixedPrice;\r\n\r\n        uniswapMarket00 = get(configs, 0).uniswapMarket;\r\n        uniswapMarket01 = get(configs, 1).uniswapMarket;\r\n        uniswapMarket02 = get(configs, 2).uniswapMarket;\r\n        uniswapMarket03 = get(configs, 3).uniswapMarket;\r\n        uniswapMarket04 = get(configs, 4).uniswapMarket;\r\n        uniswapMarket05 = get(configs, 5).uniswapMarket;\r\n        uniswapMarket06 = get(configs, 6).uniswapMarket;\r\n        uniswapMarket07 = get(configs, 7).uniswapMarket;\r\n        uniswapMarket08 = get(configs, 8).uniswapMarket;\r\n        uniswapMarket09 = get(configs, 9).uniswapMarket;\r\n        uniswapMarket10 = get(configs, 10).uniswapMarket;\r\n        uniswapMarket11 = get(configs, 11).uniswapMarket;\r\n        uniswapMarket12 = get(configs, 12).uniswapMarket;\r\n        uniswapMarket13 = get(configs, 13).uniswapMarket;\r\n        uniswapMarket14 = get(configs, 14).uniswapMarket;\r\n        uniswapMarket15 = get(configs, 15).uniswapMarket;\r\n        uniswapMarket16 = get(configs, 16).uniswapMarket;\r\n        uniswapMarket17 = get(configs, 17).uniswapMarket;\r\n        uniswapMarket18 = get(configs, 18).uniswapMarket;\r\n        uniswapMarket19 = get(configs, 19).uniswapMarket;\r\n\r\n        isUniswapReversed00 = get(configs, 0).isUniswapReversed;\r\n        isUniswapReversed01 = get(configs, 1).isUniswapReversed;\r\n        isUniswapReversed02 = get(configs, 2).isUniswapReversed;\r\n        isUniswapReversed03 = get(configs, 3).isUniswapReversed;\r\n        isUniswapReversed04 = get(configs, 4).isUniswapReversed;\r\n        isUniswapReversed05 = get(configs, 5).isUniswapReversed;\r\n        isUniswapReversed06 = get(configs, 6).isUniswapReversed;\r\n        isUniswapReversed07 = get(configs, 7).isUniswapReversed;\r\n        isUniswapReversed08 = get(configs, 8).isUniswapReversed;\r\n        isUniswapReversed09 = get(configs, 9).isUniswapReversed;\r\n        isUniswapReversed10 = get(configs, 10).isUniswapReversed;\r\n        isUniswapReversed11 = get(configs, 11).isUniswapReversed;\r\n        isUniswapReversed12 = get(configs, 12).isUniswapReversed;\r\n        isUniswapReversed13 = get(configs, 13).isUniswapReversed;\r\n        isUniswapReversed14 = get(configs, 14).isUniswapReversed;\r\n        isUniswapReversed15 = get(configs, 15).isUniswapReversed;\r\n        isUniswapReversed16 = get(configs, 16).isUniswapReversed;\r\n        isUniswapReversed17 = get(configs, 17).isUniswapReversed;\r\n        isUniswapReversed18 = get(configs, 18).isUniswapReversed;\r\n        isUniswapReversed19 = get(configs, 19).isUniswapReversed;\r\n\r\n        isLP00 = get(configs, 0).isLP;\r\n        isLP01 = get(configs, 1).isLP;\r\n        isLP02 = get(configs, 2).isLP;\r\n        isLP03 = get(configs, 3).isLP;\r\n        isLP04 = get(configs, 4).isLP;\r\n        isLP05 = get(configs, 5).isLP;\r\n        isLP06 = get(configs, 6).isLP;\r\n        isLP07 = get(configs, 7).isLP;\r\n        isLP08 = get(configs, 8).isLP;\r\n        isLP09 = get(configs, 9).isLP;\r\n        isLP10 = get(configs, 10).isLP;\r\n        isLP11 = get(configs, 11).isLP;\r\n        isLP12 = get(configs, 12).isLP;\r\n        isLP13 = get(configs, 13).isLP;\r\n        isLP14 = get(configs, 14).isLP;\r\n        isLP15 = get(configs, 15).isLP;\r\n        isLP16 = get(configs, 16).isLP;\r\n        isLP17 = get(configs, 17).isLP;\r\n        isLP18 = get(configs, 18).isLP;\r\n        isLP19 = get(configs, 19).isLP;\r\n    }\r\n\r\n    function get(TokenConfig[] memory configs, uint i) internal pure returns (TokenConfig memory) {\r\n        if (i < configs.length)\r\n            return configs[i];\r\n        return TokenConfig({\r\n        sToken : address(0),\r\n        underlying : address(0),\r\n        symbolHash : bytes32(0),\r\n        baseUnit : uint256(0),\r\n        priceSource: PriceSource(0),\r\n        fixedPrice: uint256(0),\r\n        uniswapMarket : address(0),\r\n        isUniswapReversed : false,\r\n        isLP : false\r\n        });\r\n    }\r\n\r\n    function getCTokenIndex(address sToken) internal view returns (uint) {\r\n        if (sToken == sToken00) return 0;\r\n        if (sToken == sToken01) return 1;\r\n        if (sToken == sToken02) return 2;\r\n        if (sToken == sToken03) return 3;\r\n        if (sToken == sToken04) return 4;\r\n        if (sToken == sToken05) return 5;\r\n        if (sToken == sToken06) return 6;\r\n        if (sToken == sToken07) return 7;\r\n        if (sToken == sToken08) return 8;\r\n        if (sToken == sToken09) return 9;\r\n        if (sToken == sToken10) return 10;\r\n        if (sToken == sToken11) return 11;\r\n        if (sToken == sToken12) return 12;\r\n        if (sToken == sToken13) return 13;\r\n        if (sToken == sToken14) return 14;\r\n        if (sToken == sToken15) return 15;\r\n        if (sToken == sToken16) return 16;\r\n        if (sToken == sToken17) return 17;\r\n        if (sToken == sToken18) return 18;\r\n        if (sToken == sToken19) return 19;\r\n\r\n        return uint(- 1);\r\n    }\r\n\r\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\r\n        if (underlying == underlying00) return 0;\r\n        if (underlying == underlying01) return 1;\r\n        if (underlying == underlying02) return 2;\r\n        if (underlying == underlying03) return 3;\r\n        if (underlying == underlying04) return 4;\r\n        if (underlying == underlying05) return 5;\r\n        if (underlying == underlying06) return 6;\r\n        if (underlying == underlying07) return 7;\r\n        if (underlying == underlying08) return 8;\r\n        if (underlying == underlying09) return 9;\r\n        if (underlying == underlying10) return 10;\r\n        if (underlying == underlying11) return 11;\r\n        if (underlying == underlying12) return 12;\r\n        if (underlying == underlying13) return 13;\r\n        if (underlying == underlying14) return 14;\r\n        if (underlying == underlying15) return 15;\r\n        if (underlying == underlying16) return 16;\r\n        if (underlying == underlying17) return 17;\r\n        if (underlying == underlying18) return 18;\r\n        if (underlying == underlying19) return 19;\r\n\r\n        return uint(- 1);\r\n    }\r\n\r\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\r\n        if (symbolHash == symbolHash00) return 0;\r\n        if (symbolHash == symbolHash01) return 1;\r\n        if (symbolHash == symbolHash02) return 2;\r\n        if (symbolHash == symbolHash03) return 3;\r\n        if (symbolHash == symbolHash04) return 4;\r\n        if (symbolHash == symbolHash05) return 5;\r\n        if (symbolHash == symbolHash06) return 6;\r\n        if (symbolHash == symbolHash07) return 7;\r\n        if (symbolHash == symbolHash08) return 8;\r\n        if (symbolHash == symbolHash09) return 9;\r\n        if (symbolHash == symbolHash10) return 10;\r\n        if (symbolHash == symbolHash11) return 11;\r\n        if (symbolHash == symbolHash12) return 12;\r\n        if (symbolHash == symbolHash13) return 13;\r\n        if (symbolHash == symbolHash14) return 14;\r\n        if (symbolHash == symbolHash15) return 15;\r\n        if (symbolHash == symbolHash16) return 16;\r\n        if (symbolHash == symbolHash17) return 17;\r\n        if (symbolHash == symbolHash18) return 18;\r\n        if (symbolHash == symbolHash19) return 19;\r\n\r\n        return uint(- 1);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the i-th config, according to the order they were passed in originally\r\n     * @param i The index of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\r\n        require(i < numTokens, \"token config not found\");\r\n\r\n        if (i == 0) return TokenConfig({sToken: sToken00, underlying: underlying00, symbolHash: symbolHash00, baseUnit: baseUnit00, priceSource: priceSource00, fixedPrice: fixedPrice00, uniswapMarket: uniswapMarket00, isUniswapReversed: isUniswapReversed00, isLP: isLP00});\r\n        if (i == 1) return TokenConfig({sToken: sToken01, underlying: underlying01, symbolHash: symbolHash01, baseUnit: baseUnit01, priceSource: priceSource01, fixedPrice: fixedPrice01, uniswapMarket: uniswapMarket01, isUniswapReversed: isUniswapReversed01, isLP: isLP01});\r\n        if (i == 2) return TokenConfig({sToken: sToken02, underlying: underlying02, symbolHash: symbolHash02, baseUnit: baseUnit02, priceSource: priceSource02, fixedPrice: fixedPrice02, uniswapMarket: uniswapMarket02, isUniswapReversed: isUniswapReversed02, isLP: isLP02});\r\n        if (i == 3) return TokenConfig({sToken: sToken03, underlying: underlying03, symbolHash: symbolHash03, baseUnit: baseUnit03, priceSource: priceSource03, fixedPrice: fixedPrice03, uniswapMarket: uniswapMarket03, isUniswapReversed: isUniswapReversed03, isLP: isLP03});\r\n        if (i == 4) return TokenConfig({sToken: sToken04, underlying: underlying04, symbolHash: symbolHash04, baseUnit: baseUnit04, priceSource: priceSource04, fixedPrice: fixedPrice04, uniswapMarket: uniswapMarket04, isUniswapReversed: isUniswapReversed04, isLP: isLP04});\r\n        if (i == 5) return TokenConfig({sToken: sToken05, underlying: underlying05, symbolHash: symbolHash05, baseUnit: baseUnit05, priceSource: priceSource05, fixedPrice: fixedPrice05, uniswapMarket: uniswapMarket05, isUniswapReversed: isUniswapReversed05, isLP: isLP05});\r\n        if (i == 6) return TokenConfig({sToken: sToken06, underlying: underlying06, symbolHash: symbolHash06, baseUnit: baseUnit06, priceSource: priceSource06, fixedPrice: fixedPrice06, uniswapMarket: uniswapMarket06, isUniswapReversed: isUniswapReversed06, isLP: isLP06});\r\n        if (i == 7) return TokenConfig({sToken: sToken07, underlying: underlying07, symbolHash: symbolHash07, baseUnit: baseUnit07, priceSource: priceSource07, fixedPrice: fixedPrice07, uniswapMarket: uniswapMarket07, isUniswapReversed: isUniswapReversed07, isLP: isLP07});\r\n        if (i == 8) return TokenConfig({sToken: sToken08, underlying: underlying08, symbolHash: symbolHash08, baseUnit: baseUnit08, priceSource: priceSource08, fixedPrice: fixedPrice08, uniswapMarket: uniswapMarket08, isUniswapReversed: isUniswapReversed08, isLP: isLP08});\r\n        if (i == 9) return TokenConfig({sToken: sToken09, underlying: underlying09, symbolHash: symbolHash09, baseUnit: baseUnit09, priceSource: priceSource09, fixedPrice: fixedPrice09, uniswapMarket: uniswapMarket09, isUniswapReversed: isUniswapReversed09, isLP: isLP09});\r\n\r\n        if (i == 10) return TokenConfig({sToken: sToken10, underlying: underlying10, symbolHash: symbolHash10, baseUnit: baseUnit10, priceSource: priceSource10, fixedPrice: fixedPrice10, uniswapMarket: uniswapMarket10, isUniswapReversed: isUniswapReversed10, isLP: isLP10});\r\n        if (i == 11) return TokenConfig({sToken: sToken11, underlying: underlying11, symbolHash: symbolHash11, baseUnit: baseUnit11, priceSource: priceSource11, fixedPrice: fixedPrice11, uniswapMarket: uniswapMarket11, isUniswapReversed: isUniswapReversed11, isLP: isLP11});\r\n        if (i == 12) return TokenConfig({sToken: sToken12, underlying: underlying12, symbolHash: symbolHash12, baseUnit: baseUnit12, priceSource: priceSource12, fixedPrice: fixedPrice12, uniswapMarket: uniswapMarket12, isUniswapReversed: isUniswapReversed12, isLP: isLP12});\r\n        if (i == 13) return TokenConfig({sToken: sToken13, underlying: underlying13, symbolHash: symbolHash13, baseUnit: baseUnit13, priceSource: priceSource13, fixedPrice: fixedPrice13, uniswapMarket: uniswapMarket13, isUniswapReversed: isUniswapReversed13, isLP: isLP13});\r\n        if (i == 14) return TokenConfig({sToken: sToken14, underlying: underlying14, symbolHash: symbolHash14, baseUnit: baseUnit14, priceSource: priceSource14, fixedPrice: fixedPrice14, uniswapMarket: uniswapMarket14, isUniswapReversed: isUniswapReversed14, isLP: isLP14});\r\n        if (i == 15) return TokenConfig({sToken: sToken15, underlying: underlying15, symbolHash: symbolHash15, baseUnit: baseUnit15, priceSource: priceSource15, fixedPrice: fixedPrice15, uniswapMarket: uniswapMarket15, isUniswapReversed: isUniswapReversed15, isLP: isLP15});\r\n        if (i == 16) return TokenConfig({sToken: sToken16, underlying: underlying16, symbolHash: symbolHash16, baseUnit: baseUnit16, priceSource: priceSource16, fixedPrice: fixedPrice16, uniswapMarket: uniswapMarket16, isUniswapReversed: isUniswapReversed16, isLP: isLP16});\r\n        if (i == 17) return TokenConfig({sToken: sToken17, underlying: underlying17, symbolHash: symbolHash17, baseUnit: baseUnit17, priceSource: priceSource17, fixedPrice: fixedPrice17, uniswapMarket: uniswapMarket17, isUniswapReversed: isUniswapReversed17, isLP: isLP17});\r\n        if (i == 18) return TokenConfig({sToken: sToken18, underlying: underlying18, symbolHash: symbolHash18, baseUnit: baseUnit18, priceSource: priceSource18, fixedPrice: fixedPrice18, uniswapMarket: uniswapMarket18, isUniswapReversed: isUniswapReversed18, isLP: isLP18});\r\n        if (i == 19) return TokenConfig({sToken: sToken19, underlying: underlying19, symbolHash: symbolHash19, baseUnit: baseUnit19, priceSource: priceSource19, fixedPrice: fixedPrice19, uniswapMarket: uniswapMarket19, isUniswapReversed: isUniswapReversed19, isLP: isLP19});\r\n    }\r\n\r\n    /**\r\n     * @notice Get the config for symbol\r\n     * @param symbol The symbol of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\r\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\r\n    }\r\n\r\n    /**\r\n     * @notice Get the config for the symbolHash\r\n     * @param symbolHash The keccack256 of the symbol of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\r\n        uint index = getSymbolHashIndex(symbolHash);\r\n        if (index != uint(- 1)) {\r\n            return getTokenConfig(index);\r\n        }\r\n\r\n        revert(\"token config not found\");\r\n    }\r\n\r\n    /**\r\n     * @notice Get the config for the sToken\r\n     * @dev If a config for the sToken is not found, falls back to searching for the underlying.\r\n     * @param sToken The address of the sToken of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfigByCToken(address sToken) public view returns (TokenConfig memory) {\r\n        uint index = getCTokenIndex(sToken);\r\n        if (index != uint(- 1)) {\r\n            return getTokenConfig(index);\r\n        }\r\n\r\n        return getTokenConfigByUnderlying(CErc20(sToken).underlying());\r\n    }\r\n\r\n    /**\r\n     * @notice Get the config for an underlying asset\r\n     * @param underlying The address of the underlying asset of the config to get\r\n     * @return The config object\r\n     */\r\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\r\n        uint index = getUnderlyingIndex(underlying);\r\n        if (index != uint(- 1)) {\r\n            return getTokenConfig(index);\r\n        }\r\n\r\n        revert(\"token config not found\");\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// Based on code from https://github.com/Uniswap/uniswap-v2-periphery\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\r\n    // equivalent to encode(numerator).div(denominator)\r\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, \"FixedPoint: DIV_BY_ZERO\");\r\n        return uq112x112((uint224(numerator) << 112) / denominator);\r\n    }\r\n\r\n    // decode a uq112x112 into a uint with 18 decimals of precision\r\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\r\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\r\n        // instead, get close to:\r\n        //  (x * 1e18) >> 112\r\n        // without risk of overflowing, e.g.:\r\n        //  (x) / 2 ** (112 - lg(1e18))\r\n        return uint(self._x) / 5192296858534827;\r\n    }\r\n}\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(\r\n        address pair\r\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\r\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n}\r\n\r\n\r\n    struct Observation {\r\n        uint timestamp;\r\n        uint acc;\r\n    }\r\n\r\ncontract CheesePriceOracle is UniswapConfig {\r\n    using FixedPoint for *;\r\n\r\n    /// @notice The number of wei in 1 ETH\r\n    uint public constant ethBaseUnit = 1e18;\r\n\r\n    /// @notice A common scaling factor to maintain precision\r\n    uint public constant expScale = 1e18;\r\n\r\n    /// @notice The Price Oracle admin\r\n    address public immutable admin;\r\n\r\n    /// @notice The minimum amount of time in seconds required for the old uniswap price accumulator to be replaced\r\n    uint public immutable anchorPeriod;\r\n\r\n    /// @notice Official prices by symbol hash\r\n    mapping(bytes32 => uint) public prices;\r\n\r\n    /// @notice The old observation for each symbolHash\r\n    mapping(bytes32 => Observation) public oldObservations;\r\n\r\n    /// @notice The new observation for each symbolHash\r\n    mapping(bytes32 => Observation) public newObservations;\r\n\r\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\r\n    event PriceGuarded(string symbol, uint reporter, uint anchor);\r\n\r\n    /// @notice The event emitted when the stored price is updated\r\n    event PriceUpdated(string symbol, uint price);\r\n\r\n    /// @notice The event emitted when anchor price is updated\r\n    event AnchorPriceUpdated(string symbol, uint anchorPrice, uint oldTimestamp, uint newTimestamp);\r\n\r\n    /// @notice The event emitted when the uniswap window changes\r\n    event UniswapWindowUpdated(bytes32 indexed symbolHash, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\r\n\r\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\"ETH\"));\r\n\r\n    constructor(uint anchorPeriod_,\r\n        address[] memory sTokens_, address[] memory underlyings_,\r\n        bytes32[] memory symbolHashs_, uint256[] memory baseUints_,\r\n        PriceSource[] memory priceSources_, uint256[] memory fixedPrices_,\r\n        address[] memory uniswapMarkets_, bool[] memory isUniswapReverseds_,\r\n        bool[] memory isLP_)\r\n    UniswapConfig(sTokens_, underlyings_, symbolHashs_, baseUints_, priceSources_, fixedPrices_, uniswapMarkets_,\r\n        isUniswapReverseds_, isLP_) public {\r\n        admin = msg.sender;\r\n\r\n        anchorPeriod = anchorPeriod_;\r\n\r\n        for (uint i = 0; i < sTokens_.length; i++) {\r\n            TokenConfig memory config = TokenConfig({ sToken : sTokens_[i], underlying : underlyings_[i],\r\n            symbolHash : symbolHashs_[i], baseUnit : baseUints_[i],\r\n            priceSource: priceSources_[i], fixedPrice: fixedPrices_[i],\r\n            uniswapMarket : uniswapMarkets_[i], isUniswapReversed : isUniswapReverseds_[i],\r\n            isLP : isLP_[i]});\r\n            require(config.baseUnit > 0, \"baseUnit must be greater than zero\");\r\n            address uniswapMarket = config.uniswapMarket;\r\n            if (config.priceSource == PriceSource.REPORTER) {\r\n                require(uniswapMarket != address(0), \"reported prices must have an anchor\");\r\n                bytes32 symbolHash = config.symbolHash;\r\n                uint cumulativePrice = currentCumulativePrice(config);\r\n                oldObservations[symbolHash].timestamp = block.timestamp;\r\n                newObservations[symbolHash].timestamp = block.timestamp;\r\n                oldObservations[symbolHash].acc = cumulativePrice;\r\n                newObservations[symbolHash].acc = cumulativePrice;\r\n                emit UniswapWindowUpdated(symbolHash, block.timestamp, block.timestamp, cumulativePrice, cumulativePrice);\r\n            } else {\r\n                require(uniswapMarket == address(0), \"only reported prices utilize an anchor\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get the official price for a symbol\r\n     * @param symbol The symbol to fetch the price of\r\n     * @return Price denominated in USD, with 6 decimals\r\n     */\r\n    function price(string memory symbol) external view returns (uint) {\r\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\r\n        return priceInternal(config);\r\n    }\r\n\r\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\r\n        if (config.priceSource == PriceSource.REPORTER) return prices[config.symbolHash];\r\n        if (config.priceSource == PriceSource.FIXED_USD) return config.fixedPrice;\r\n        if (config.priceSource == PriceSource.FIXED_ETH) {\r\n            uint usdPerEth = prices[ethHash];\r\n            require(usdPerEth > 0, \"ETH price not set, cannot convert to dollars\");\r\n            return mul(usdPerEth, config.fixedPrice) / ethBaseUnit;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get the underlying price of a sToken\r\n     * @dev Implements the PriceOracle interface for Compound v2.\r\n     * @param sToken The sToken address for price retrieval\r\n     * @return Price denominated in USD, with 18 decimals, for the given sToken address\r\n     */\r\n    function getUnderlyingPrice(address sToken) external view returns (uint) {\r\n        TokenConfig memory config = getTokenConfigByCToken(sToken);\r\n        // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\r\n        // Since the prices in this view have 6 decimals, we must scale them by 1e(36 - 6 - baseUnit)\r\n        return mul(1e30, priceInternal(config)) / config.baseUnit;\r\n    }\r\n\r\n    function refresh(string[] calldata symbols) external {\r\n        uint ethPrice = fetchEthPrice();\r\n\r\n        // Try to update the view storage\r\n        for (uint i = 0; i < symbols.length; i++) {\r\n            postPriceInternal(symbols[i], ethPrice);\r\n        }\r\n    }\r\n\r\n    function postPriceInternal(string memory symbol, uint ethPrice) internal {\r\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\r\n\r\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\r\n        uint anchorPrice;\r\n        if (symbolHash == ethHash) {\r\n            anchorPrice = ethPrice;\r\n        } else if (config.isLP) {\r\n            anchorPrice = fetchLPAnchorPrice(symbol, config, ethPrice);\r\n        } else {\r\n            anchorPrice = fetchAnchorPrice(symbol, config, ethPrice);\r\n        }\r\n        prices[symbolHash] = anchorPrice;\r\n        emit PriceUpdated(symbol, anchorPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Fetches the current token/eth price accumulator from uniswap.\r\n     */\r\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\r\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\r\n        if (config.isUniswapReversed) {\r\n            return cumulativePrice1;\r\n        } else {\r\n            return cumulativePrice0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Fetches the current eth/usd price from uniswap, with 6 decimals of precision.\r\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\r\n     */\r\n    function fetchEthPrice() internal returns (uint) {\r\n        return fetchAnchorPrice(\"ETH\", getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\r\n    }\r\n\r\n    /**\r\n    * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\r\n    * @param ethPrice a 6 decimal ETH-USDT price in the case of other assets\r\n    */\r\n    function fetchLPAnchorPrice(string memory symbol, TokenConfig memory config, uint ethPrice) internal virtual returns (uint) {\r\n        //only support ETH pair\r\n        ERC20 wETH = ERC20(getTokenConfigBySymbolHash(ethHash).underlying);\r\n        uint wEthBalance = wETH.balanceOf(config.uniswapMarket);\r\n        uint pairBalance = mul(wEthBalance, 2);\r\n        uint totalValue = mul(pairBalance, ethPrice);\r\n\r\n        IUniswapV2Pair pair = IUniswapV2Pair(config.uniswapMarket);\r\n        uint anchorPrice = totalValue / pair.totalSupply();\r\n\r\n        return anchorPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\r\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\r\n     */\r\n    function fetchAnchorPrice(string memory symbol, TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\r\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\r\n\r\n        // This should be impossible, but better safe than sorry\r\n        require(block.timestamp > oldTimestamp, \"now must come after before\");\r\n        uint timeElapsed = block.timestamp - oldTimestamp;\r\n\r\n        // Calculate uniswap time-weighted average price\r\n        // Underflow is a property of the accumulators: https://uniswap.org/audit.html#orgc9b3190\r\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\r\n        uint rawUniswapPriceMantissa = priceAverage.decode112with18();\r\n        uint unscaledPriceMantissa = mul(rawUniswapPriceMantissa, conversionFactor);\r\n        uint anchorPrice;\r\n\r\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\r\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\r\n        if (config.isUniswapReversed) {\r\n            // unscaledPriceMantissa * ethBaseUnit / config.baseUnit / expScale, but we simplify bc ethBaseUnit == expScale\r\n            anchorPrice = unscaledPriceMantissa / config.baseUnit;\r\n        }else {\r\n            anchorPrice = mul(unscaledPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\r\n        }\r\n        emit AnchorPriceUpdated(symbol, anchorPrice, oldTimestamp, block.timestamp);\r\n\r\n        return anchorPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Get time-weighted average prices for a token at the current timestamp.\r\n     *  Update new and old observations of lagging window if period elapsed.\r\n     */\r\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\r\n        bytes32 symbolHash = config.symbolHash;\r\n        uint cumulativePrice = currentCumulativePrice(config);\r\n\r\n        Observation memory newObservation = newObservations[symbolHash];\r\n\r\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\r\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\r\n        if (timeElapsed >= anchorPeriod) {\r\n            oldObservations[symbolHash].timestamp = newObservation.timestamp;\r\n            oldObservations[symbolHash].acc = newObservation.acc;\r\n\r\n            newObservations[symbolHash].timestamp = block.timestamp;\r\n            newObservations[symbolHash].acc = cumulativePrice;\r\n            emit UniswapWindowUpdated(config.symbolHash, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\r\n        }\r\n        return (cumulativePrice, oldObservations[symbolHash].acc, oldObservations[symbolHash].timestamp);\r\n    }\r\n\r\n\r\n    /**\r\n     * @notice Recovers the source address which signed a message\r\n     * @dev Comparing to a claimed address would add nothing,\r\n     *  as the caller could simply perform the recover and claim that address.\r\n     * @param message The data that was presumably signed\r\n     * @param signature The fingerprint of the data + private key\r\n     * @return The source address which signed the message, presumably\r\n     */\r\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\r\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\r\n        bytes32 hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", keccak256(message)));\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /// @dev Overflow proof multiplication\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) return 0;\r\n        uint c = a * b;\r\n        require(c / a == b, \"multiplication overflow\");\r\n        return c;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"sTokens_\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"underlyings_\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"symbolHashs_\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"baseUints_\",\"type\":\"uint256[]\"},{\"internalType\":\"enum UniswapConfig.PriceSource[]\",\"name\":\"priceSources_\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"fixedPrices_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"uniswapMarkets_\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"isUniswapReverseds_\",\"type\":\"bool[]\"},{\"internalType\":\"bool[]\",\"name\":\"isLP_\",\"type\":\"bool[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLP\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"refresh\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "CheesePriceOracle", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000007080000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000078000000000000000000000000000000000000000000000000000000000000008c00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000b400000000000000000000000000000000000000000000000000000000000000009000000000000000000000000eab126ae68de4c65834ad9b6a570661cdbc2f6d0000000000000000000000000a80e737ded94e8d2483ec8d2e52892d9eb94cf1f000000000000000000000000c183fb180fdd6b9035c747019546c5f2a3d9d2510000000000000000000000005e181bdde2fa8af7265cb3124735e9a13779c0210000000000000000000000004c2a8a820940003cfe4a16294b239c8c55f296950000000000000000000000008c86fbb2ca7cd30b8102140180370c77061242f1000000000000000000000000609e0f0cb16e53878ba5e959a22fc7fcd81b124a0000000000000000000000004c529eb6262d86446ae64f8bfab6ec5623e0bcd90000000000000000000000007e4956688367fb28de3c0a62193f59b1526a00e70000000000000000000000000000000000000000000000000000000000000009000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a04bdb1f11413a84d1f6c1d4d4fed0208f2e68bf000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000b4e16d0168e52d35cacd2c6185b44281ec28c9dc0000000000000000000000000d4a11d5eeaac28ec3f61d100daf4d40471f1852000000000000000000000000a478c2975ab1ea89e8196811f51a7b7ade33eb11000000000000000000000000534f2675ff7b4161e46277b5914d33a5cb8dcf320000000000000000000000000000000000000000000000000000000000000009aaaebeba3810b1e6b70781f14b2d72c1cb89c0b2b320c43bb67ff79f562f5ff4a5e92f3efb6826155f1f728e162af9d7cda33a574a1153b58f03ea01cc37e568a71d57b33e6435de7069442788131320191d4f3e543e361f11b0f4750a20da68d6aca1be9729c13d677335161321649cccae6a591554772516700f986f942eaa8b1a1d9c2b109e527c9134b25b1a1833b16b6594f92daa9f6d9b7a6024bce9d011cd84a087178e2622dab73d88cf4101d377516c81f8b79370523670abac46847d1d5281772aefa96ec78ef554ca3b816d93cb06754ef3a3b50d8eafe8491e95e2e98ef8fbb19756ec0c22308c52651a5fe8239228bdce2a5026a470e64904bcb97819b98eeb20692f70dd4521554316600dc5dca65433e05bfc3288609491e500000000000000000000000000000000000000000000000000000000000000090000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000090000000000000000000000000d4a11d5eeaac28ec3f61d100daf4d40471f1852000000000000000000000000a478c2975ab1ea89e8196811f51a7b7ade33eb11000000000000000000000000534f2675ff7b4161e46277b5914d33a5cb8dcf3200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4e16d0168e52d35cacd2c6185b44281ec28c9dc0000000000000000000000000d4a11d5eeaac28ec3f61d100daf4d40471f1852000000000000000000000000a478c2975ab1ea89e8196811f51a7b7ade33eb11000000000000000000000000534f2675ff7b4161e46277b5914d33a5cb8dcfersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://57d9f281aff529221101d465e875fda2c1bbe224dcf21ca4e095f004e56f0610"}