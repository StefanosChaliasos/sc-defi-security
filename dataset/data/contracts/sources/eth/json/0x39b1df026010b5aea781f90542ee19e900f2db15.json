{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2021-04-19\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IKeep3rV1 {\r\n    function keepers(address keeper) external returns (bool);\r\n    function KPRH() external view returns (IKeep3rV1Helper);\r\n    function receipt(address credit, address keeper, uint amount) external;\r\n}\r\n\r\ninterface IKeep3rV1Helper {\r\n    function getQuoteLimit(uint gasUsed) external view returns (uint);\r\n}\r\n\r\n// sliding oracle that uses observations collected to provide moving price averages in the past\r\ncontract Keep3rV2Oracle {\r\n\r\n    constructor(address _pair) {\r\n        _factory = msg.sender;\r\n        pair = _pair;\r\n        (,,uint32 timestamp) = IUniswapV2Pair(_pair).getReserves();\r\n        uint112 _price0CumulativeLast = uint112(IUniswapV2Pair(_pair).price0CumulativeLast() * e10 / Q112);\r\n        uint112 _price1CumulativeLast = uint112(IUniswapV2Pair(_pair).price1CumulativeLast() * e10 / Q112);\r\n        observations[length++] = Observation(timestamp, _price0CumulativeLast, _price1CumulativeLast);\r\n    }\r\n\r\n    struct Observation {\r\n        uint32 timestamp;\r\n        uint112 price0Cumulative;\r\n        uint112 price1Cumulative;\r\n    }\r\n\r\n    modifier factory() {\r\n        require(msg.sender == _factory, \"!F\");\r\n        _;\r\n    }\r\n\r\n    Observation[65535] public observations;\r\n    uint16 public length;\r\n\r\n    address immutable _factory;\r\n    address immutable public pair;\r\n    // this is redundant with granularity and windowSize, but stored for gas savings & informational purposes.\r\n    uint constant periodSize = 1800;\r\n    uint Q112 = 2**112;\r\n    uint e10 = 10**18;\r\n\r\n    // Pre-cache slots for cheaper oracle writes\r\n    function cache(uint size) external {\r\n        uint _length = length+size;\r\n        for (uint i = length; i < _length; i++) observations[i].timestamp = 1;\r\n    }\r\n\r\n    // update the current feed for free\r\n    function update() external factory returns (bool) {\r\n        return _update();\r\n    }\r\n\r\n    function updateable() external view returns (bool) {\r\n        Observation memory _point = observations[length-1];\r\n        (,, uint timestamp) = IUniswapV2Pair(pair).getReserves();\r\n        uint timeElapsed = timestamp - _point.timestamp;\r\n        return timeElapsed > periodSize;\r\n    }\r\n\r\n    function _update() internal returns (bool) {\r\n        Observation memory _point = observations[length-1];\r\n        (,, uint32 timestamp) = IUniswapV2Pair(pair).getReserves();\r\n        uint32 timeElapsed = timestamp - _point.timestamp;\r\n        if (timeElapsed > periodSize) {\r\n            uint112 _price0CumulativeLast = uint112(IUniswapV2Pair(pair).price0CumulativeLast() * e10 / Q112);\r\n            uint112 _price1CumulativeLast = uint112(IUniswapV2Pair(pair).price1CumulativeLast() * e10 / Q112);\r\n            observations[length++] = Observation(timestamp, _price0CumulativeLast, _price1CumulativeLast);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function _computeAmountOut(uint start, uint end, uint elapsed, uint amountIn) internal view returns (uint amountOut) {\r\n        amountOut = amountIn * (end - start) / e10 / elapsed;\r\n    }\r\n\r\n    function current(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut, uint lastUpdatedAgo) {\r\n        (address token0,) = tokenIn < tokenOut ? (tokenIn, tokenOut) : (tokenOut, tokenIn);\r\n\r\n        Observation memory _observation = observations[length-1];\r\n        uint price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast() * e10 / Q112;\r\n        uint price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast() * e10 / Q112;\r\n        (,,uint timestamp) = IUniswapV2Pair(pair).getReserves();\r\n\r\n        // Handle edge cases where we have no updates, will revert on first reading set\r\n        if (timestamp == _observation.timestamp) {\r\n            _observation = observations[length-2];\r\n        }\r\n\r\n        uint timeElapsed = timestamp - _observation.timestamp;\r\n        timeElapsed = timeElapsed == 0 ? 1 : timeElapsed;\r\n        if (token0 == tokenIn) {\r\n            amountOut = _computeAmountOut(_observation.price0Cumulative, price0Cumulative, timeElapsed, amountIn);\r\n        } else {\r\n            amountOut = _computeAmountOut(_observation.price1Cumulative, price1Cumulative, timeElapsed, amountIn);\r\n        }\r\n        lastUpdatedAgo = timeElapsed;\r\n    }\r\n\r\n    function quote(address tokenIn, uint amountIn, address tokenOut, uint points) external view returns (uint amountOut, uint lastUpdatedAgo) {\r\n        (address token0,) = tokenIn < tokenOut ? (tokenIn, tokenOut) : (tokenOut, tokenIn);\r\n\r\n        uint priceAverageCumulative = 0;\r\n        uint _length = length-1;\r\n        uint i = _length - points;\r\n        Observation memory currentObservation;\r\n        Observation memory nextObservation;\r\n\r\n        uint nextIndex = 0;\r\n        if (token0 == tokenIn) {\r\n            for (; i < _length; i++) {\r\n                nextIndex = i+1;\r\n                currentObservation = observations[i];\r\n                nextObservation = observations[nextIndex];\r\n                priceAverageCumulative += _computeAmountOut(\r\n                    currentObservation.price0Cumulative,\r\n                    nextObservation.price0Cumulative,\r\n                    nextObservation.timestamp - currentObservation.timestamp, amountIn);\r\n            }\r\n        } else {\r\n            for (; i < _length; i++) {\r\n                nextIndex = i+1;\r\n                currentObservation = observations[i];\r\n                nextObservation = observations[nextIndex];\r\n                priceAverageCumulative += _computeAmountOut(\r\n                    currentObservation.price1Cumulative,\r\n                    nextObservation.price1Cumulative,\r\n                    nextObservation.timestamp - currentObservation.timestamp, amountIn);\r\n            }\r\n        }\r\n        amountOut = priceAverageCumulative / points;\r\n\r\n        (,,uint timestamp) = IUniswapV2Pair(pair).getReserves();\r\n        lastUpdatedAgo = timestamp - nextObservation.timestamp;\r\n    }\r\n\r\n    function sample(address tokenIn, uint amountIn, address tokenOut, uint points, uint window) external view returns (uint[] memory prices, uint lastUpdatedAgo) {\r\n        (address token0,) = tokenIn < tokenOut ? (tokenIn, tokenOut) : (tokenOut, tokenIn);\r\n        prices = new uint[](points);\r\n\r\n        if (token0 == tokenIn) {\r\n            {\r\n                uint _length = length-1;\r\n                uint i = _length - (points * window);\r\n                uint _index = 0;\r\n                Observation memory nextObservation;\r\n                for (; i < _length; i+=window) {\r\n                    Observation memory currentObservation;\r\n                    currentObservation = observations[i];\r\n                    nextObservation = observations[i + window];\r\n                    prices[_index] = _computeAmountOut(\r\n                        currentObservation.price0Cumulative,\r\n                        nextObservation.price0Cumulative,\r\n                        nextObservation.timestamp - currentObservation.timestamp, amountIn);\r\n                    _index = _index + 1;\r\n                }\r\n\r\n                (,,uint timestamp) = IUniswapV2Pair(pair).getReserves();\r\n                lastUpdatedAgo = timestamp - nextObservation.timestamp;\r\n            }\r\n        } else {\r\n            {\r\n                uint _length = length-1;\r\n                uint i = _length - (points * window);\r\n                uint _index = 0;\r\n                Observation memory nextObservation;\r\n                for (; i < _length; i+=window) {\r\n                    Observation memory currentObservation;\r\n                    currentObservation = observations[i];\r\n                    nextObservation = observations[i + window];\r\n                    prices[_index] = _computeAmountOut(\r\n                        currentObservation.price1Cumulative,\r\n                        nextObservation.price1Cumulative,\r\n                        nextObservation.timestamp - currentObservation.timestamp, amountIn);\r\n                    _index = _index + 1;\r\n                }\r\n\r\n                (,,uint timestamp) = IUniswapV2Pair(pair).getReserves();\r\n                lastUpdatedAgo = timestamp - nextObservation.timestamp;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Keep3rV2OracleFactory {\r\n\r\n    function pairForSushi(address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                0xc35DADB65012eC5796536bD9864eD8773aBc74C4,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\r\n            )))));\r\n    }\r\n\r\n    function pairForUni(address tokenA, address tokenB) internal pure returns (address pair) {\r\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\r\n        pair = address(uint160(uint256(keccak256(abi.encodePacked(\r\n                hex'ff',\r\n                0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f,\r\n                keccak256(abi.encodePacked(token0, token1)),\r\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\r\n            )))));\r\n    }\r\n\r\n    modifier keeper() {\r\n        require(KP3R.keepers(msg.sender), \"!K\");\r\n        _;\r\n    }\r\n\r\n    modifier upkeep() {\r\n        uint _gasUsed = gasleft();\r\n        require(KP3R.keepers(msg.sender), \"!K\");\r\n        _;\r\n        uint _received = KP3R.KPRH().getQuoteLimit(_gasUsed - gasleft());\r\n        KP3R.receipt(address(KP3R), msg.sender, _received);\r\n    }\r\n\r\n    address public governance;\r\n    address public pendingGovernance;\r\n\r\n    /**\r\n     * @notice Allows governance to change governance (for future upgradability)\r\n     * @param _governance new governance address to set\r\n     */\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!G\");\r\n        pendingGovernance = _governance;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\r\n     */\r\n    function acceptGovernance() external {\r\n        require(msg.sender == pendingGovernance, \"!pG\");\r\n        governance = pendingGovernance;\r\n    }\r\n\r\n    IKeep3rV1 public constant KP3R = IKeep3rV1(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);\r\n\r\n    address[] internal _pairs;\r\n    mapping(address => Keep3rV2Oracle) public feeds;\r\n\r\n    function pairs() external view returns (address[] memory) {\r\n        return _pairs;\r\n    }\r\n\r\n    constructor() {\r\n        governance = msg.sender;\r\n    }\r\n\r\n    function update(address pair) external keeper returns (bool) {\r\n        return feeds[pair].update();\r\n    }\r\n\r\n    function byteCode(address pair) external pure returns (bytes memory bytecode) {\r\n        bytecode = abi.encodePacked(type(Keep3rV2Oracle).creationCode, abi.encode(pair));\r\n    }\r\n\r\n    function deploy(address pair) external returns (address feed) {\r\n        require(msg.sender == governance, \"!G\");\r\n        require(address(feeds[pair]) == address(0), 'PE');\r\n        bytes memory bytecode = abi.encodePacked(type(Keep3rV2Oracle).creationCode, abi.encode(pair));\r\n        bytes32 salt = keccak256(abi.encodePacked(pair));\r\n        assembly {\r\n            feed := create2(0, add(bytecode, 0x20), mload(bytecode), salt)\r\n            if iszero(extcodesize(feed)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n        feeds[pair] = Keep3rV2Oracle(feed);\r\n        _pairs.push(pair);\r\n    }\r\n\r\n    function work() external upkeep {\r\n        require(workable(), \"!W\");\r\n        for (uint i = 0; i < _pairs.length; i++) {\r\n            feeds[_pairs[i]].update();\r\n        }\r\n    }\r\n\r\n    function work(address pair) external upkeep {\r\n        require(feeds[pair].update(), \"!W\");\r\n    }\r\n\r\n    function workForFree() external {\r\n        for (uint i = 0; i < _pairs.length; i++) {\r\n            feeds[_pairs[i]].update();\r\n        }\r\n    }\r\n\r\n    function workForFree(address pair) external {\r\n        feeds[pair].update();\r\n    }\r\n\r\n    function cache(uint size) external {\r\n        for (uint i = 0; i < _pairs.length; i++) {\r\n            feeds[_pairs[i]].cache(size);\r\n        }\r\n    }\r\n\r\n    function cache(address pair, uint size) external {\r\n        feeds[pair].cache(size);\r\n    }\r\n\r\n    function workable() public view returns (bool canWork) {\r\n        canWork = true;\r\n        for (uint i = 0; i < _pairs.length; i++) {\r\n            if (!feeds[_pairs[i]].updateable()) {\r\n                canWork = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function workable(address pair) public view returns (bool) {\r\n        return feeds[pair].updateable();\r\n    }\r\n\r\n    function sample(address tokenIn, uint amountIn, address tokenOut, uint points, uint window, bool sushiswap) external view returns (uint[] memory prices, uint lastUpdatedAgo) {\r\n        address _pair = sushiswap ? pairForSushi(tokenIn, tokenOut) : pairForUni(tokenIn, tokenOut);\r\n        return feeds[_pair].sample(tokenIn, amountIn, tokenOut, points, window);\r\n    }\r\n\r\n    function sample(address pair, address tokenIn, uint amountIn, address tokenOut, uint points, uint window) external view returns (uint[] memory prices, uint lastUpdatedAgo) {\r\n        return feeds[pair].sample(tokenIn, amountIn, tokenOut, points, window);\r\n    }\r\n\r\n    function quote(address tokenIn, uint amountIn, address tokenOut, uint points, bool sushiswap) external view returns (uint amountOut, uint lastUpdatedAgo) {\r\n        address _pair = sushiswap ? pairForSushi(tokenIn, tokenOut) : pairForUni(tokenIn, tokenOut);\r\n        return feeds[_pair].quote(tokenIn, amountIn, tokenOut, points);\r\n    }\r\n\r\n    function quote(address pair, address tokenIn, uint amountIn, address tokenOut, uint points) external view returns (uint amountOut, uint lastUpdatedAgo) {\r\n        return feeds[pair].quote(tokenIn, amountIn, tokenOut, points);\r\n    }\r\n\r\n    function current(address tokenIn, uint amountIn, address tokenOut, bool sushiswap) external view returns (uint amountOut, uint lastUpdatedAgo) {\r\n        address _pair = sushiswap ? pairForSushi(tokenIn, tokenOut) : pairForUni(tokenIn, tokenOut);\r\n        return feeds[_pair].current(tokenIn, amountIn, tokenOut);\r\n    }\r\n\r\n    function current(address pair, address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut, uint lastUpdatedAgo) {\r\n        return feeds[pair].current(tokenIn, amountIn, tokenOut);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"cache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedAgo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint112\",\"name\":\"price0Cumulative\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"price1Cumulative\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedAgo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"sample\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedAgo\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Keep3rV2Oracle", "CompilerVersion": "v0.8.3+commit.8d00100c", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000328dfd0139e26cb0fef7b0742b49b0fe4325f821", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2b1287cf3deac18489452cddca72d9b0093e996441e6bd33526be15bbecf339a"}