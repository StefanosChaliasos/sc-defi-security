{"SourceCode": "/*\r\n * Origin Protocol\r\n * https://originprotocol.com\r\n *\r\n * Released under the MIT license\r\n * https://github.com/OriginProtocol/origin-dollar\r\n *\r\n * Copyright 2020 Origin Protocol, Inc\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity >=0.4.24 <0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the `initializer` modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/interfaces/IStrategy.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n/**\r\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\r\n */\r\ninterface IStrategy {\r\n    /**\r\n     * @dev Deposit the given asset to Lending platform.\r\n     * @param _asset asset address\r\n     * @param _amount Amount to deposit\r\n     */\r\n    function deposit(address _asset, uint256 _amount)\r\n        external\r\n        returns (uint256 amountDeposited);\r\n\r\n    /**\r\n     * @dev Withdraw given asset from Lending platform\r\n     */\r\n    function withdraw(\r\n        address _recipient,\r\n        address _asset,\r\n        uint256 _amount\r\n    ) external returns (uint256 amountWithdrawn);\r\n\r\n    /**\r\n     * @dev Returns the current balance of the given asset.\r\n     */\r\n    function checkBalance(address _asset)\r\n        external\r\n        view\r\n        returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns bool indicating whether strategy supports asset.\r\n     */\r\n    function supportsAsset(address _asset) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Liquidate all assets in strategy and return them to Vault.\r\n     */\r\n    function liquidate() external;\r\n\r\n    /**\r\n     * @dev Collect reward tokens from the Strategy.\r\n     */\r\n    function collectRewardToken() external;\r\n\r\n    /**\r\n     * @dev The address of the reward token for the Strategy.\r\n     */\r\n    function rewardTokenAddress() external pure returns (address);\r\n\r\n    /**\r\n     * @dev The threshold (denominated in the reward token) over which the\r\n     * vault will auto harvest on allocate calls.\r\n     */\r\n    function rewardLiquidationThreshold() external pure returns (uint256);\r\n}\r\n\r\n// File: contracts/governance/Governable.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n/**\r\n * @title OUSD Governable Contract\r\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\r\n *      from owner to governor and renounce methods removed. Does not use\r\n *      Context.sol like Ownable.sol does for simplification.\r\n * @author Origin Protocol Inc\r\n */\r\ncontract Governable {\r\n    // Storage position of the owner and pendingOwner of the contract\r\n    bytes32\r\n        private constant governorPosition = 0x7bea13895fa79d2831e0a9e28edede30099005a50d652d8957cf8a607ee6ca4a;\r\n    //keccak256(\"OUSD.governor\");\r\n\r\n    bytes32\r\n        private constant pendingGovernorPosition = 0x44c4d30b2eaad5130ad70c3ba6972730566f3e6359ab83e800d905c61b1c51db;\r\n    //keccak256(\"OUSD.pending.governor\");\r\n\r\n    event PendingGovernorshipTransfer(\r\n        address indexed previousGovernor,\r\n        address indexed newGovernor\r\n    );\r\n\r\n    event GovernorshipTransferred(\r\n        address indexed previousGovernor,\r\n        address indexed newGovernor\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial Governor.\r\n     */\r\n    constructor() internal {\r\n        _setGovernor(msg.sender);\r\n        emit GovernorshipTransferred(address(0), _governor());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current Governor.\r\n     */\r\n    function governor() public view returns (address) {\r\n        return _governor();\r\n    }\r\n\r\n    function _governor() internal view returns (address governorOut) {\r\n        bytes32 position = governorPosition;\r\n        assembly {\r\n            governorOut := sload(position)\r\n        }\r\n    }\r\n\r\n    function _pendingGovernor()\r\n        internal\r\n        view\r\n        returns (address pendingGovernor)\r\n    {\r\n        bytes32 position = pendingGovernorPosition;\r\n        assembly {\r\n            pendingGovernor := sload(position)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the Governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        require(isGovernor(), \"Caller is not the Governor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current Governor.\r\n     */\r\n    function isGovernor() public view returns (bool) {\r\n        return msg.sender == _governor();\r\n    }\r\n\r\n    function _setGovernor(address newGovernor) internal {\r\n        bytes32 position = governorPosition;\r\n        assembly {\r\n            sstore(position, newGovernor)\r\n        }\r\n    }\r\n\r\n    function _setPendingGovernor(address newGovernor) internal {\r\n        bytes32 position = pendingGovernorPosition;\r\n        assembly {\r\n            sstore(position, newGovernor)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\r\n     * Can only be called by the current Governor. Must be claimed for this to complete\r\n     * @param _newGovernor Address of the new Governor\r\n     */\r\n    function transferGovernance(address _newGovernor) external onlyGovernor {\r\n        _setPendingGovernor(_newGovernor);\r\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\r\n    }\r\n\r\n    /**\r\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\r\n     * Can only be called by the new Governor.\r\n     */\r\n    function claimGovernance() external {\r\n        require(\r\n            msg.sender == _pendingGovernor(),\r\n            \"Only the pending Governor can complete the claim\"\r\n        );\r\n        _changeGovernor(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\r\n     * @param _newGovernor Address of the new Governor\r\n     */\r\n    function _changeGovernor(address _newGovernor) internal {\r\n        require(_newGovernor != address(0), \"New Governor is address(0)\");\r\n        emit GovernorshipTransferred(_governor(), _newGovernor);\r\n        _setGovernor(_newGovernor);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n// File: contracts/utils/InitializableERC20Detailed.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n */\r\ncontract InitializableERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\r\n     */\r\n    function _initialize(\r\n        string memory nameArg,\r\n        string memory symbolArg,\r\n        uint8 decimalsArg\r\n    ) internal {\r\n        _name = nameArg;\r\n        _symbol = symbolArg;\r\n        _decimals = decimalsArg;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/utils/InitializableToken.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n\r\ncontract InitializableToken is ERC20, InitializableERC20Detailed {\r\n    /**\r\n     * @dev Initialization function for implementing contract\r\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\r\n     */\r\n    function _initialize(string memory _nameArg, string memory _symbolArg)\r\n        internal\r\n    {\r\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\r\n    }\r\n}\r\n\r\n// File: contracts/utils/StableMath.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n// Based on StableMath from Stability Labs Pty. Ltd.\r\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\r\n\r\nlibrary StableMath {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Scaling unit for use in specific calculations,\r\n     * where 1 * 10**18, or 1e18 represents a unit '1'\r\n     */\r\n    uint256 private constant FULL_SCALE = 1e18;\r\n\r\n    /***************************************\r\n                    Helpers\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Adjust the scale of an integer\r\n     * @param adjustment Amount to adjust by e.g. scaleBy(1e18, -1) == 1e17\r\n     */\r\n    function scaleBy(uint256 x, int8 adjustment)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (adjustment > 0) {\r\n            x = x.mul(10**uint256(adjustment));\r\n        } else if (adjustment < 0) {\r\n            x = x.div(10**uint256(adjustment * -1));\r\n        }\r\n        return x;\r\n    }\r\n\r\n    /***************************************\r\n               Precise Arithmetic\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale\r\n     * @param x Left hand input to multiplication\r\n     * @param y Right hand input to multiplication\r\n     * @return Result after multiplying the two inputs and then dividing by the shared\r\n     *         scale unit\r\n     */\r\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return mulTruncateScale(x, y, FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\r\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\r\n     * @param x Left hand input to multiplication\r\n     * @param y Right hand input to multiplication\r\n     * @param scale Scale unit\r\n     * @return Result after multiplying the two inputs and then dividing by the shared\r\n     *         scale unit\r\n     */\r\n    function mulTruncateScale(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 scale\r\n    ) internal pure returns (uint256) {\r\n        // e.g. assume scale = fullScale\r\n        // z = 10e18 * 9e17 = 9e36\r\n        uint256 z = x.mul(y);\r\n        // return 9e38 / 1e18 = 9e18\r\n        return z.div(scale);\r\n    }\r\n\r\n    /**\r\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\r\n     * @param x Left hand input to multiplication\r\n     * @param y Right hand input to multiplication\r\n     * @return Result after multiplying the two inputs and then dividing by the shared\r\n     *          scale unit, rounded up to the closest base unit.\r\n     */\r\n    function mulTruncateCeil(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e17 * 17268172638 = 138145381104e17\r\n        uint256 scaled = x.mul(y);\r\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\r\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\r\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\r\n        return ceil.div(FULL_SCALE);\r\n    }\r\n\r\n    /**\r\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\r\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\r\n     * @param x Left hand input to division\r\n     * @param y Right hand input to division\r\n     * @return Result after multiplying the left operand by the scale, and\r\n     *         executing the division on the right hand input.\r\n     */\r\n    function divPrecisely(uint256 x, uint256 y)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        // e.g. 8e18 * 1e18 = 8e36\r\n        uint256 z = x.mul(FULL_SCALE);\r\n        // e.g. 8e36 / 10e18 = 8e17\r\n        return z.div(y);\r\n    }\r\n}\r\n\r\n// File: contracts/token/OUSD.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n/**\r\n * @title OUSD Token Contract\r\n * @dev ERC20 compatible contract for OUSD\r\n * @dev Implements an elastic supply\r\n * @author Origin Protocol Inc\r\n */\r\n\r\n\r\n\r\n\r\n\r\ncontract OUSD is Initializable, InitializableToken, Governable {\r\n    using SafeMath for uint256;\r\n    using StableMath for uint256;\r\n\r\n    event TotalSupplyUpdated(\r\n        uint256 totalSupply,\r\n        uint256 rebasingCredits,\r\n        uint256 rebasingCreditsPerToken\r\n    );\r\n\r\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\r\n\r\n    uint256 private _totalSupply;\r\n    uint256 public rebasingCredits;\r\n    // Exchange rate between internal credits and OUSD\r\n    uint256 public rebasingCreditsPerToken;\r\n\r\n    mapping(address => uint256) private _creditBalances;\r\n\r\n    // Allowances denominated in OUSD\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    address public vaultAddress = address(0);\r\n\r\n    // Frozen address/credits are non rebasing (value is held in contracts which\r\n    // do not receive yield unless they explicitly opt in)\r\n    uint256 public nonRebasingCredits;\r\n    uint256 public nonRebasingSupply;\r\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\r\n    enum RebaseOptions { NotSet, OptOut, OptIn }\r\n    mapping(address => RebaseOptions) public rebaseState;\r\n\r\n    function initialize(\r\n        string calldata _nameArg,\r\n        string calldata _symbolArg,\r\n        address _vaultAddress\r\n    ) external onlyGovernor initializer {\r\n        InitializableToken._initialize(_nameArg, _symbolArg);\r\n\r\n        _totalSupply = 0;\r\n        rebasingCredits = 0;\r\n        rebasingCreditsPerToken = 1e18;\r\n\r\n        vaultAddress = _vaultAddress;\r\n\r\n        nonRebasingCredits = 0;\r\n        nonRebasingSupply = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies that the caller is the Savings Manager contract\r\n     */\r\n    modifier onlyVault() {\r\n        require(vaultAddress == msg.sender, \"Caller is not the Vault\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return The total supply of OUSD.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _account Address to query the balance of.\r\n     * @return A uint256 representing the _amount of base units owned by the\r\n     *         specified address.\r\n     */\r\n    function balanceOf(address _account) public view returns (uint256) {\r\n        return\r\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the credits balance of the specified address.\r\n     * @param _account The address to query the balance of.\r\n     * @return (uint256, uint256) Credit balance and credits per token of the\r\n     *         address\r\n     */\r\n    function creditsBalanceOf(address _account)\r\n        public\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (_creditBalances[_account], _creditsPerToken(_account));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens to a specified address.\r\n     * @param _to the address to transfer to.\r\n     * @param _value the _amount to be transferred.\r\n     * @return true on success.\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0), \"Transfer to zero address\");\r\n\r\n        _executeTransfer(msg.sender, _to, _value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * @param _from The address you want to send tokens from.\r\n     * @param _to The address you want to transfer to.\r\n     * @param _value The _amount of tokens to be transferred.\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool) {\r\n        require(_to != address(0), \"Transfer to zero address\");\r\n\r\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\r\n            _value\r\n        );\r\n\r\n        _executeTransfer(_from, _to, _value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Update the count of non rebasing credits in response to a transfer\r\n     * @param _from The address you want to send tokens from.\r\n     * @param _to The address you want to transfer to.\r\n     * @param _value Amount of OUSD to transfer\r\n     */\r\n    function _executeTransfer(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal {\r\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\r\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\r\n\r\n        // Credits deducted and credited might be different due to the\r\n        // differing creditsPerToken used by each account\r\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\r\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\r\n\r\n        _creditBalances[_from] = _creditBalances[_from].sub(\r\n            creditsDeducted,\r\n            \"Transfer amount exceeds balance\"\r\n        );\r\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\r\n\r\n        if (isNonRebasingTo && !isNonRebasingFrom) {\r\n            // Transfer to non-rebasing account from rebasing account, credits\r\n            // are removed from the non rebasing tally\r\n            nonRebasingCredits = nonRebasingCredits.add(creditsCredited);\r\n            nonRebasingSupply = nonRebasingSupply.add(_value);\r\n            // Update rebasingCredits by subtracting the deducted amount\r\n            rebasingCredits = rebasingCredits.sub(creditsDeducted);\r\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\r\n            // Transfer to rebasing account from non-rebasing account\r\n            // Decreasing non-rebasing credits by the amount that was sent\r\n            nonRebasingCredits = nonRebasingCredits.sub(creditsDeducted);\r\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\r\n            // Update rebasingCredits by adding the credited amount\r\n            rebasingCredits = rebasingCredits.add(creditsCredited);\r\n        } else if (isNonRebasingTo && isNonRebasingFrom) {\r\n            // Transfer between two non rebasing accounts. They may have\r\n            // different exchange rates so update the count of non rebasing\r\n            // credits with the difference\r\n            nonRebasingCredits =\r\n                nonRebasingCredits +\r\n                creditsCredited -\r\n                creditsDeducted;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the _amount of tokens that an owner has allowed to a _spender.\r\n     * @param _owner The address which owns the funds.\r\n     * @param _spender The address which will spend the funds.\r\n     * @return The number of tokens still available for the _spender.\r\n     */\r\n    function allowance(address _owner, address _spender)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified _amount of tokens on behalf of\r\n     * msg.sender. This method is included for ERC20 compatibility.\r\n     * increaseAllowance and decreaseAllowance should be used instead.\r\n     * Changing an allowance with this method brings the risk that someone may transfer both\r\n     * the old and the new allowance - if they are both greater than zero - if a transfer\r\n     * transaction is mined before the later approve() call is mined.\r\n     *\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The _amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        _allowances[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the _amount of tokens that an owner has allowed to a _spender.\r\n     * This method should be used instead of approve() to avoid the double approval vulnerability\r\n     * described above.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The _amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address _spender, uint256 _addedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\r\n            .add(_addedValue);\r\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the _amount of tokens that an owner has allowed to a _spender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The _amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\r\n        public\r\n        returns (bool)\r\n    {\r\n        uint256 oldValue = _allowances[msg.sender][_spender];\r\n        if (_subtractedValue >= oldValue) {\r\n            _allowances[msg.sender][_spender] = 0;\r\n        } else {\r\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Mints new tokens, increasing totalSupply.\r\n     */\r\n    function mint(address _account, uint256 _amount) external onlyVault {\r\n        return _mint(_account, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address _account, uint256 _amount) internal {\r\n        require(_account != address(0), \"Mint to the zero address\");\r\n\r\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\r\n\r\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\r\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\r\n\r\n        // If the account is non rebasing and doesn't have a set creditsPerToken\r\n        // then set it i.e. this is a mint from a fresh contract\r\n        if (isNonRebasingAccount) {\r\n            nonRebasingCredits = nonRebasingCredits.add(creditAmount);\r\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\r\n        } else {\r\n            rebasingCredits = rebasingCredits.add(creditAmount);\r\n        }\r\n\r\n        _totalSupply = _totalSupply.add(_amount);\r\n\r\n        emit Transfer(address(0), _account, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns tokens, decreasing totalSupply.\r\n     */\r\n    function burn(address account, uint256 amount) external onlyVault {\r\n        return _burn(account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `_account` cannot be the zero address.\r\n     * - `_account` must have at least `_amount` tokens.\r\n     */\r\n    function _burn(address _account, uint256 _amount) internal {\r\n        require(_account != address(0), \"Burn from the zero address\");\r\n\r\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\r\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\r\n        uint256 currentCredits = _creditBalances[_account];\r\n\r\n        // Remove the credits, burning rounding errors\r\n        if (\r\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\r\n        ) {\r\n            // Handle dust from rounding\r\n            _creditBalances[_account] = 0;\r\n        } else if (currentCredits > creditAmount) {\r\n            _creditBalances[_account] = _creditBalances[_account].sub(\r\n                creditAmount\r\n            );\r\n        } else {\r\n            revert(\"Remove exceeds balance\");\r\n        }\r\n\r\n        // Remove from the credit tallies and non-rebasing supply\r\n        if (isNonRebasingAccount) {\r\n            nonRebasingCredits = nonRebasingCredits.sub(creditAmount);\r\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\r\n        } else {\r\n            rebasingCredits = rebasingCredits.sub(creditAmount);\r\n        }\r\n\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n\r\n        emit Transfer(_account, address(0), _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the credits per token for an account. Returns a fixed amount\r\n     *      if the account is non-rebasing.\r\n     * @param _account Address of the account.\r\n     */\r\n    function _creditsPerToken(address _account)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (nonRebasingCreditsPerToken[_account] != 0) {\r\n            return nonRebasingCreditsPerToken[_account];\r\n        } else {\r\n            return rebasingCreditsPerToken;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Is an accounts balance non rebasing, i.e. does not alter with rebases\r\n     * @param _account Address of the account.\r\n     */\r\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\r\n        if (Address.isContract(_account)) {\r\n            // Contracts by default opt out\r\n            if (rebaseState[_account] == RebaseOptions.OptIn) {\r\n                // If they've opted in explicitly it is not a non rebasing\r\n                // address\r\n                return false;\r\n            }\r\n            // Is a non rebasing account because no explicit opt in\r\n            // Make sure the rebasing/non-rebasing supply is updated and\r\n            // fixed credits per token is set for this account\r\n            _ensureRebasingMigration(_account);\r\n            return true;\r\n        } else {\r\n            // EOAs by default opt in\r\n            // Check for explicit opt out\r\n            return rebaseState[_account] == RebaseOptions.OptOut;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\r\n     *      supply is updated following deployment of frozen yield change.\r\n     */\r\n    function _ensureRebasingMigration(address _account) internal {\r\n        if (nonRebasingCreditsPerToken[_account] == 0) {\r\n            // Set fixed credits per token for this account\r\n            nonRebasingCreditsPerToken[_account] = rebasingCreditsPerToken;\r\n            // Update non rebasing supply\r\n            nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\r\n            // Update credit tallies\r\n            rebasingCredits = rebasingCredits.sub(_creditBalances[_account]);\r\n            nonRebasingCredits = nonRebasingCredits.add(\r\n                _creditBalances[_account]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Add a contract address to the non rebasing exception list. I.e. the\r\n     * address's balance will be part of rebases so the account will be exposed\r\n     * to upside and downside.\r\n     */\r\n    function rebaseOptIn() public {\r\n        require(_isNonRebasingAccount(msg.sender), \"Account has not opted out\");\r\n\r\n        // Convert balance into the same amount at the current exchange rate\r\n        uint256 newCreditBalance = _creditBalances[msg.sender]\r\n            .mul(rebasingCreditsPerToken)\r\n            .div(_creditsPerToken(msg.sender));\r\n\r\n        // Decreasing non rebasing supply\r\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\r\n        // Decrease non rebasing credits\r\n        nonRebasingCredits = nonRebasingCredits.sub(\r\n            _creditBalances[msg.sender]\r\n        );\r\n\r\n        _creditBalances[msg.sender] = newCreditBalance;\r\n\r\n        // Increase rebasing credits, totalSupply remains unchanged so no\r\n        // adjustment necessary\r\n        rebasingCredits = rebasingCredits.add(_creditBalances[msg.sender]);\r\n\r\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\r\n\r\n        // Delete any fixed credits per token\r\n        delete nonRebasingCreditsPerToken[msg.sender];\r\n    }\r\n\r\n    /**\r\n     * @dev Remove a contract address to the non rebasing exception list.\r\n     */\r\n    function rebaseOptOut() public {\r\n        require(!_isNonRebasingAccount(msg.sender), \"Account has not opted in\");\r\n\r\n        // Increase non rebasing supply\r\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\r\n        // Increase non rebasing credits\r\n        nonRebasingCredits = nonRebasingCredits.add(\r\n            _creditBalances[msg.sender]\r\n        );\r\n\r\n        // Set fixed credits per token\r\n        nonRebasingCreditsPerToken[msg.sender] = rebasingCreditsPerToken;\r\n\r\n        // Decrease rebasing credits, total supply remains unchanged so no\r\n        // adjustment necessary\r\n        rebasingCredits = rebasingCredits.sub(_creditBalances[msg.sender]);\r\n\r\n        // Mark explicitly opted out of rebasing\r\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\r\n    }\r\n\r\n    /**\r\n     * @dev Modify the supply without minting new tokens. This uses a change in\r\n     *      the exchange rate between \"credits\" and OUSD tokens to change balances.\r\n     * @param _newTotalSupply New total supply of OUSD.\r\n     * @return uint256 representing the new total supply.\r\n     */\r\n    function changeSupply(uint256 _newTotalSupply)\r\n        external\r\n        onlyVault\r\n        returns (uint256)\r\n    {\r\n        require(_totalSupply > 0, \"Cannot increase 0 supply\");\r\n\r\n        if (_totalSupply == _newTotalSupply) {\r\n            emit TotalSupplyUpdated(\r\n                _totalSupply,\r\n                rebasingCredits,\r\n                rebasingCreditsPerToken\r\n            );\r\n            return _totalSupply;\r\n        }\r\n\r\n        _totalSupply = _newTotalSupply;\r\n\r\n        if (_totalSupply > MAX_SUPPLY) _totalSupply = MAX_SUPPLY;\r\n\r\n        rebasingCreditsPerToken = rebasingCredits.divPrecisely(\r\n            _totalSupply.sub(nonRebasingSupply)\r\n        );\r\n\r\n        emit TotalSupplyUpdated(\r\n            _totalSupply,\r\n            rebasingCredits,\r\n            rebasingCreditsPerToken\r\n        );\r\n\r\n        return _totalSupply;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IBasicToken.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface IBasicToken {\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: contracts/utils/Helpers.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\nlibrary Helpers {\r\n    /**\r\n     * @notice Fetch the `symbol()` from an ERC20 token\r\n     * @dev Grabs the `symbol()` from a contract\r\n     * @param _token Address of the ERC20 token\r\n     * @return string Symbol of the ERC20 token\r\n     */\r\n    function getSymbol(address _token) internal view returns (string memory) {\r\n        string memory symbol = IBasicToken(_token).symbol();\r\n        return symbol;\r\n    }\r\n\r\n    /**\r\n     * @notice Fetch the `decimals()` from an ERC20 token\r\n     * @dev Grabs the `decimals()` from a contract and fails if\r\n     *      the decimal value does not live within a certain range\r\n     * @param _token Address of the ERC20 token\r\n     * @return uint256 Decimals of the ERC20 token\r\n     */\r\n    function getDecimals(address _token) internal view returns (uint256) {\r\n        uint256 decimals = IBasicToken(_token).decimals();\r\n        require(\r\n            decimals >= 4 && decimals <= 18,\r\n            \"Token must have sufficient decimal places\"\r\n        );\r\n\r\n        return decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/vault/VaultStorage.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n/**\r\n * @title OUSD VaultStorage Contract\r\n * @notice The VaultStorage contract defines the storage for the Vault contracts\r\n * @author Origin Protocol Inc\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract VaultStorage is Initializable, Governable {\r\n    using SafeMath for uint256;\r\n    using StableMath for uint256;\r\n    using SafeMath for int256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event AssetSupported(address _asset);\r\n    event StrategyAdded(address _addr);\r\n    event StrategyRemoved(address _addr);\r\n    event Mint(address _addr, uint256 _value);\r\n    event Redeem(address _addr, uint256 _value);\r\n    event StrategyWeightsUpdated(\r\n        address[] _strategyAddresses,\r\n        uint256[] weights\r\n    );\r\n    event DepositsPaused();\r\n    event DepositsUnpaused();\r\n\r\n    // Assets supported by the Vault, i.e. Stablecoins\r\n    struct Asset {\r\n        bool isSupported;\r\n    }\r\n    mapping(address => Asset) assets;\r\n    address[] allAssets;\r\n\r\n    // Strategies supported by the Vault\r\n    struct Strategy {\r\n        bool isSupported;\r\n        uint256 targetWeight; // 18 decimals. 100% = 1e18\r\n    }\r\n    mapping(address => Strategy) strategies;\r\n    address[] allStrategies;\r\n\r\n    // Address of the Oracle price provider contract\r\n    address public priceProvider;\r\n    // Pausing bools\r\n    bool public rebasePaused = false;\r\n    bool public depositPaused = true;\r\n    // Redemption fee in basis points\r\n    uint256 public redeemFeeBps;\r\n    // Buffer of assets to keep in Vault to handle (most) withdrawals\r\n    uint256 public vaultBuffer;\r\n    // Mints over this amount automatically allocate funds. 18 decimals.\r\n    uint256 public autoAllocateThreshold;\r\n    // Mints over this amount automatically rebase. 18 decimals.\r\n    uint256 public rebaseThreshold;\r\n\r\n    OUSD oUSD;\r\n\r\n    //keccak256(\"OUSD.vault.governor.admin.impl\");\r\n    bytes32 constant adminImplPosition = 0xa2bd3d3cf188a41358c8b401076eb59066b09dec5775650c0de4c55187d17bd9;\r\n\r\n    // Address of the contract responsible for post rebase syncs with AMMs\r\n    address public rebaseHooksAddr = address(0);\r\n\r\n    // Address of Uniswap\r\n    address public uniswapAddr = address(0);\r\n\r\n    address public strategistAddr = address(0);\r\n\r\n    /**\r\n     * @dev set the implementation for the admin, this needs to be in a base class else we cannot set it\r\n     * @param newImpl address pf the implementation\r\n     */\r\n    function setAdminImpl(address newImpl) external onlyGovernor {\r\n        bytes32 position = adminImplPosition;\r\n        assembly {\r\n            sstore(position, newImpl)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IMinMaxOracle.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface IMinMaxOracle {\r\n    //Assuming 8 decimals\r\n    function priceMin(string calldata symbol) external returns (uint256);\r\n\r\n    function priceMax(string calldata symbol) external returns (uint256);\r\n}\r\n\r\ninterface IViewMinMaxOracle {\r\n    function priceMin(string calldata symbol) external view returns (uint256);\r\n\r\n    function priceMax(string calldata symbol) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/IRebaseHooks.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface IRebaseHooks {\r\n    function postRebase(bool sync) external;\r\n}\r\n\r\n// File: contracts/interfaces/IVault.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface IVault {\r\n    event AssetSupported(address _asset);\r\n    event StrategyAdded(address _addr);\r\n    event StrategyRemoved(address _addr);\r\n    event Mint(address _addr, uint256 _value);\r\n    event Redeem(address _addr, uint256 _value);\r\n    event StrategyWeightsUpdated(\r\n        address[] _strategyAddresses,\r\n        uint256[] weights\r\n    );\r\n    event DepositsPaused();\r\n    event DepositsUnpaused();\r\n\r\n    // Governable.sol\r\n    function transferGovernance(address _newGovernor) external;\r\n\r\n    function claimGovernance() external;\r\n\r\n    function governor() external view returns (address);\r\n\r\n    // VaultAdmin.sol\r\n    function setPriceProvider(address _priceProvider) external;\r\n\r\n    function priceProvider() external view returns (address);\r\n\r\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\r\n\r\n    function redeemFeeBps() external view returns (uint256);\r\n\r\n    function setVaultBuffer(uint256 _vaultBuffer) external;\r\n\r\n    function vaultBuffer() external view returns (uint256);\r\n\r\n    function setAutoAllocateThreshold(uint256 _threshold) external;\r\n\r\n    function autoAllocateThreshold() external view returns (uint256);\r\n\r\n    function setRebaseThreshold(uint256 _threshold) external;\r\n\r\n    function rebaseThreshold() external view returns (uint256);\r\n\r\n    function setRebaseHooksAddr(address _address) external;\r\n\r\n    function rebaseHooksAddr() external view returns (address);\r\n\r\n    function setStrategistAddr(address _address) external;\r\n\r\n    function strategistAddr() external view returns (address);\r\n\r\n    function setUniswapAddr(address _address) external;\r\n\r\n    function uniswapAddr() external view returns (address);\r\n\r\n    function supportAsset(address _asset) external;\r\n\r\n    function addStrategy(address _addr, uint256 _targetWeight) external;\r\n\r\n    function removeStrategy(address _addr) external;\r\n\r\n    function setStrategyWeights(\r\n        address[] calldata _strategyAddresses,\r\n        uint256[] calldata _weights\r\n    ) external;\r\n\r\n    function pauseRebase() external;\r\n\r\n    function unpauseRebase() external;\r\n\r\n    function rebasePaused() external view returns (bool);\r\n\r\n    function pauseDeposits() external;\r\n\r\n    function unpauseDeposits() external;\r\n\r\n    function depositPaused() external view returns (bool);\r\n\r\n    function transferToken(address _asset, uint256 _amount) external;\r\n\r\n    function harvest() external;\r\n\r\n    function harvest(address _strategyAddr) external;\r\n\r\n    function priceUSDMint(string calldata symbol) external returns (uint256);\r\n\r\n    function priceUSDRedeem(string calldata symbol) external returns (uint256);\r\n\r\n    // VaultCore.sol\r\n    function mint(address _asset, uint256 _amount) external;\r\n\r\n    function mintMultiple(\r\n        address[] calldata _assets,\r\n        uint256[] calldata _amount\r\n    ) external;\r\n\r\n    function redeem(uint256 _amount) external;\r\n\r\n    function redeemAll() external;\r\n\r\n    function allocate() external;\r\n\r\n    function reallocate(\r\n        address _strategyFromAddress,\r\n        address _strategyToAddress,\r\n        address[] calldata _assets,\r\n        uint256[] calldata _amounts\r\n    ) external;\r\n\r\n    function rebase() external returns (uint256);\r\n\r\n    function totalValue() external view returns (uint256 value);\r\n\r\n    function checkBalance() external view returns (uint256);\r\n\r\n    function checkBalance(address _asset) external view returns (uint256);\r\n\r\n    function calculateRedeemOutputs(uint256 _amount)\r\n        external\r\n        returns (uint256[] memory);\r\n\r\n    function getAssetCount() external view returns (uint256);\r\n\r\n    function getAllAssets() external view returns (address[] memory);\r\n\r\n    function getStrategyCount() external view returns (uint256);\r\n\r\n    function isSupportedAsset(address _asset) external view returns (bool);\r\n}\r\n\r\n// File: contracts/vault/VaultCore.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\n/**\r\n * @title OUSD Vault Contract\r\n * @notice The Vault contract stores assets. On a deposit, OUSD will be minted\r\n           and sent to the depositor. On a withdrawal, OUSD will be burned and\r\n           assets will be sent to the withdrawer. The Vault accepts deposits of\r\n           interest form yield bearing strategies which will modify the supply\r\n           of OUSD.\r\n * @author Origin Protocol Inc\r\n */\r\n\r\n\r\n\r\n\r\ncontract VaultCore is VaultStorage {\r\n    uint256 constant MAX_UINT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    /**\r\n     * @dev Verifies that the rebasing is not paused.\r\n     */\r\n    modifier whenNotRebasePaused() {\r\n        require(!rebasePaused, \"Rebasing paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Verifies that the deposits are not paused.\r\n     */\r\n    modifier whenNotDepositPaused() {\r\n        require(!depositPaused, \"Deposits paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Deposit a supported asset and mint OUSD.\r\n     * @param _asset Address of the asset being deposited\r\n     * @param _amount Amount of the asset being deposited\r\n     */\r\n    function mint(address _asset, uint256 _amount)\r\n        external\r\n        whenNotDepositPaused\r\n    {\r\n        require(assets[_asset].isSupported, \"Asset is not supported\");\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n\r\n        uint256 price = IMinMaxOracle(priceProvider).priceMin(\r\n            Helpers.getSymbol(_asset)\r\n        );\r\n        if (price > 1e8) {\r\n            price = 1e8;\r\n        }\r\n        uint256 assetDecimals = Helpers.getDecimals(_asset);\r\n        uint256 unitAdjustedDeposit = _amount.scaleBy(int8(18 - assetDecimals));\r\n        uint256 priceAdjustedDeposit = _amount.mulTruncateScale(\r\n            price.scaleBy(int8(10)), // 18-8 because oracles have 8 decimals precision\r\n            10**assetDecimals\r\n        );\r\n\r\n        // Rebase must happen before any transfers occur.\r\n        if (unitAdjustedDeposit >= rebaseThreshold && !rebasePaused) {\r\n            rebase(true);\r\n        }\r\n\r\n        // Transfer the deposited coins to the vault\r\n        IERC20 asset = IERC20(_asset);\r\n        asset.safeTransferFrom(msg.sender, address(this), _amount);\r\n\r\n        // Mint matching OUSD\r\n        oUSD.mint(msg.sender, priceAdjustedDeposit);\r\n        emit Mint(msg.sender, priceAdjustedDeposit);\r\n\r\n        if (unitAdjustedDeposit >= autoAllocateThreshold) {\r\n            allocate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mint for multiple assets in the same call.\r\n     * @param _assets Addresses of assets being deposited\r\n     * @param _amounts Amount of each asset at the same index in the _assets\r\n     *                 to deposit.\r\n     */\r\n    function mintMultiple(\r\n        address[] calldata _assets,\r\n        uint256[] calldata _amounts\r\n    ) external whenNotDepositPaused {\r\n        require(_assets.length == _amounts.length, \"Parameter length mismatch\");\r\n\r\n        uint256 unitAdjustedTotal = 0;\r\n        uint256 priceAdjustedTotal = 0;\r\n        uint256[] memory assetPrices = _getAssetPrices(false);\r\n        for (uint256 i = 0; i < allAssets.length; i++) {\r\n            for (uint256 j = 0; j < _assets.length; j++) {\r\n                if (_assets[j] == allAssets[i]) {\r\n                    if (_amounts[j] > 0) {\r\n                        uint256 assetDecimals = Helpers.getDecimals(\r\n                            allAssets[i]\r\n                        );\r\n                        uint256 price = assetPrices[i];\r\n                        if (price > 1e18) {\r\n                            price = 1e18;\r\n                        }\r\n                        unitAdjustedTotal += _amounts[j].scaleBy(\r\n                            int8(18 - assetDecimals)\r\n                        );\r\n                        priceAdjustedTotal += _amounts[j].mulTruncateScale(\r\n                            price,\r\n                            10**assetDecimals\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Rebase must happen before any transfers occur.\r\n        if (unitAdjustedTotal >= rebaseThreshold && !rebasePaused) {\r\n            rebase(true);\r\n        }\r\n\r\n        for (uint256 i = 0; i < _assets.length; i++) {\r\n            IERC20 asset = IERC20(_assets[i]);\r\n            asset.safeTransferFrom(msg.sender, address(this), _amounts[i]);\r\n        }\r\n\r\n        oUSD.mint(msg.sender, priceAdjustedTotal);\r\n        emit Mint(msg.sender, priceAdjustedTotal);\r\n\r\n        if (unitAdjustedTotal >= autoAllocateThreshold) {\r\n            allocate();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw a supported asset and burn OUSD.\r\n     * @param _amount Amount of OUSD to burn\r\n     */\r\n    function redeem(uint256 _amount) public {\r\n        if (_amount > rebaseThreshold && !rebasePaused) {\r\n            rebase(false);\r\n        }\r\n        _redeem(_amount);\r\n    }\r\n\r\n    function _redeem(uint256 _amount) internal {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n\r\n        // Calculate redemption outputs\r\n        uint256[] memory outputs = _calculateRedeemOutputs(_amount);\r\n        // Send outputs\r\n        for (uint256 i = 0; i < allAssets.length; i++) {\r\n            if (outputs[i] == 0) continue;\r\n\r\n            IERC20 asset = IERC20(allAssets[i]);\r\n\r\n            if (asset.balanceOf(address(this)) >= outputs[i]) {\r\n                // Use Vault funds first if sufficient\r\n                asset.safeTransfer(msg.sender, outputs[i]);\r\n            } else {\r\n                address strategyAddr = _selectWithdrawStrategyAddr(\r\n                    allAssets[i],\r\n                    outputs[i]\r\n                );\r\n\r\n                if (strategyAddr != address(0)) {\r\n                    // Nothing in Vault, but something in Strategy, send from there\r\n                    IStrategy strategy = IStrategy(strategyAddr);\r\n                    strategy.withdraw(msg.sender, allAssets[i], outputs[i]);\r\n                } else {\r\n                    // Cant find funds anywhere\r\n                    revert(\"Liquidity error\");\r\n                }\r\n            }\r\n        }\r\n\r\n        oUSD.burn(msg.sender, _amount);\r\n\r\n        // Until we can prove that we won't affect the prices of our assets\r\n        // by withdrawing them, this should be here.\r\n        // It's possible that a strategy was off on its asset total, perhaps\r\n        // a reward token sold for more or for less than anticipated.\r\n        if (_amount > rebaseThreshold && !rebasePaused) {\r\n            rebase(true);\r\n        }\r\n\r\n        emit Redeem(msg.sender, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw a supported asset and burn all OUSD.\r\n     */\r\n    function redeemAll() external {\r\n        //unfortunately we have to do balanceOf twice\r\n        if (oUSD.balanceOf(msg.sender) > rebaseThreshold && !rebasePaused) {\r\n            rebase(false);\r\n        }\r\n        _redeem(oUSD.balanceOf(msg.sender));\r\n    }\r\n\r\n    /**\r\n     * @notice Allocate unallocated funds on Vault to strategies.\r\n     * @dev Allocate unallocated funds on Vault to strategies.\r\n     **/\r\n    function allocate() public {\r\n        _allocate();\r\n    }\r\n\r\n    /**\r\n     * @notice Allocate unallocated funds on Vault to strategies.\r\n     * @dev Allocate unallocated funds on Vault to strategies.\r\n     **/\r\n    function _allocate() internal {\r\n        uint256 vaultValue = _totalValueInVault();\r\n        // Nothing in vault to allocate\r\n        if (vaultValue == 0) return;\r\n        uint256 strategiesValue = _totalValueInStrategies();\r\n        // We have a method that does the same as this, gas optimisation\r\n        uint256 totalValue = vaultValue + strategiesValue;\r\n\r\n        // We want to maintain a buffer on the Vault so calculate a percentage\r\n        // modifier to multiply each amount being allocated by to enforce the\r\n        // vault buffer\r\n        uint256 vaultBufferModifier;\r\n        if (strategiesValue == 0) {\r\n            // Nothing in Strategies, allocate 100% minus the vault buffer to\r\n            // strategies\r\n            vaultBufferModifier = uint256(1e18).sub(vaultBuffer);\r\n        } else {\r\n            vaultBufferModifier = vaultBuffer.mul(totalValue).div(vaultValue);\r\n            if (1e18 > vaultBufferModifier) {\r\n                // E.g. 1e18 - (1e17 * 10e18)/5e18 = 8e17\r\n                // (5e18 * 8e17) / 1e18 = 4e18 allocated from Vault\r\n                vaultBufferModifier = uint256(1e18).sub(vaultBufferModifier);\r\n            } else {\r\n                // We need to let the buffer fill\r\n                return;\r\n            }\r\n        }\r\n        if (vaultBufferModifier == 0) return;\r\n\r\n        // Iterate over all assets in the Vault and allocate the the appropriate\r\n        // strategy\r\n        for (uint256 i = 0; i < allAssets.length; i++) {\r\n            IERC20 asset = IERC20(allAssets[i]);\r\n            uint256 assetBalance = asset.balanceOf(address(this));\r\n            // No balance, nothing to do here\r\n            if (assetBalance == 0) continue;\r\n\r\n            // Multiply the balance by the vault buffer modifier and truncate\r\n            // to the scale of the asset decimals\r\n            uint256 allocateAmount = assetBalance.mulTruncate(\r\n                vaultBufferModifier\r\n            );\r\n\r\n            // Get the target Strategy to maintain weightings\r\n            address depositStrategyAddr = _selectDepositStrategyAddr(\r\n                address(asset),\r\n                allocateAmount\r\n            );\r\n\r\n            if (depositStrategyAddr != address(0) && allocateAmount > 0) {\r\n                IStrategy strategy = IStrategy(depositStrategyAddr);\r\n                // Transfer asset to Strategy and call deposit method to\r\n                // mint or take required action\r\n                asset.safeTransfer(address(strategy), allocateAmount);\r\n                strategy.deposit(address(asset), allocateAmount);\r\n            }\r\n        }\r\n\r\n        // Harvest for all reward tokens above reward liquidation threshold\r\n        for (uint256 i = 0; i < allStrategies.length; i++) {\r\n            IStrategy strategy = IStrategy(allStrategies[i]);\r\n            address rewardTokenAddress = strategy.rewardTokenAddress();\r\n            if (rewardTokenAddress != address(0)) {\r\n                uint256 liquidationThreshold = strategy\r\n                    .rewardLiquidationThreshold();\r\n                if (liquidationThreshold == 0) {\r\n                    // No threshold set, always harvest from strategy\r\n                    IVault(address(this)).harvest(allStrategies[i]);\r\n                } else {\r\n                    // Check balance against liquidation threshold\r\n                    // Note some strategies don't hold the reward token balance\r\n                    // on their contract so the liquidation threshold should be\r\n                    // set to 0\r\n                    IERC20 rewardToken = IERC20(rewardTokenAddress);\r\n                    uint256 rewardTokenAmount = rewardToken.balanceOf(\r\n                        allStrategies[i]\r\n                    );\r\n                    if (rewardTokenAmount >= liquidationThreshold) {\r\n                        IVault(address(this)).harvest(allStrategies[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the total value of assets held by the Vault and all\r\n     *         strategies and update the supply of oUSD\r\n     */\r\n    function rebase() public whenNotRebasePaused returns (uint256) {\r\n        rebase(true);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate the total value of assets held by the Vault and all\r\n     *         strategies and update the supply of oUSD\r\n     */\r\n    function rebase(bool sync) internal whenNotRebasePaused returns (uint256) {\r\n        if (oUSD.totalSupply() == 0) return 0;\r\n        uint256 oldTotalSupply = oUSD.totalSupply();\r\n        uint256 newTotalSupply = _totalValue();\r\n        // Only rachet upwards\r\n        if (newTotalSupply > oldTotalSupply) {\r\n            oUSD.changeSupply(newTotalSupply);\r\n            if (rebaseHooksAddr != address(0)) {\r\n                IRebaseHooks(rebaseHooksAddr).postRebase(sync);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Determine the total value of assets held by the vault and its\r\n     *         strategies.\r\n     * @return uint256 value Total value in USD (1e18)\r\n     */\r\n    function totalValue() external view returns (uint256 value) {\r\n        value = _totalValue();\r\n    }\r\n\r\n    /**\r\n     * @dev Internal Calculate the total value of the assets held by the\r\n     *         vault and its strategies.\r\n     * @return uint256 value Total value in USD (1e18)\r\n     */\r\n    function _totalValue() internal view returns (uint256 value) {\r\n        return _totalValueInVault() + _totalValueInStrategies();\r\n    }\r\n\r\n    /**\r\n     * @dev Internal to calculate total value of all assets held in Vault.\r\n     * @return uint256 Total value in ETH (1e18)\r\n     */\r\n    function _totalValueInVault() internal view returns (uint256 value) {\r\n        value = 0;\r\n        for (uint256 y = 0; y < allAssets.length; y++) {\r\n            IERC20 asset = IERC20(allAssets[y]);\r\n            uint256 assetDecimals = Helpers.getDecimals(allAssets[y]);\r\n            uint256 balance = asset.balanceOf(address(this));\r\n            if (balance > 0) {\r\n                value += balance.scaleBy(int8(18 - assetDecimals));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal to calculate total value of all assets held in Strategies.\r\n     * @return uint256 Total value in ETH (1e18)\r\n     */\r\n    function _totalValueInStrategies() internal view returns (uint256 value) {\r\n        value = 0;\r\n        for (uint256 i = 0; i < allStrategies.length; i++) {\r\n            value += _totalValueInStrategy(allStrategies[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal to calculate total value of all assets held by strategy.\r\n     * @param _strategyAddr Address of the strategy\r\n     * @return uint256 Total value in ETH (1e18)\r\n     */\r\n    function _totalValueInStrategy(address _strategyAddr)\r\n        internal\r\n        view\r\n        returns (uint256 value)\r\n    {\r\n        value = 0;\r\n        IStrategy strategy = IStrategy(_strategyAddr);\r\n        for (uint256 y = 0; y < allAssets.length; y++) {\r\n            uint256 assetDecimals = Helpers.getDecimals(allAssets[y]);\r\n            if (strategy.supportsAsset(allAssets[y])) {\r\n                uint256 balance = strategy.checkBalance(allAssets[y]);\r\n                if (balance > 0) {\r\n                    value += balance.scaleBy(int8(18 - assetDecimals));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate difference in percent of asset allocation for a\r\n               strategy.\r\n     * @param _strategyAddr Address of the strategy\r\n     * @return unt256 Difference between current and target. 18 decimals.\r\n     *  NOTE: This is relative value! not the actual percentage\r\n     */\r\n    function _strategyWeightDifference(\r\n        address _strategyAddr,\r\n        address _asset,\r\n        uint256 _modAmount,\r\n        bool deposit\r\n    ) internal view returns (uint256 difference) {\r\n        // Since we are comparing relative weights, we should scale by weight so\r\n        // that even small weights will be triggered, ie 1% versus 20%\r\n        uint256 weight = strategies[_strategyAddr].targetWeight;\r\n        if (weight == 0) return 0;\r\n        uint256 assetDecimals = Helpers.getDecimals(_asset);\r\n        difference =\r\n            MAX_UINT -\r\n            (\r\n                deposit\r\n                    ? _totalValueInStrategy(_strategyAddr).add(\r\n                        _modAmount.scaleBy(int8(18 - assetDecimals))\r\n                    )\r\n                    : _totalValueInStrategy(_strategyAddr).sub(\r\n                        _modAmount.scaleBy(int8(18 - assetDecimals))\r\n                    )\r\n            )\r\n                .divPrecisely(weight);\r\n    }\r\n\r\n    /**\r\n     * @dev Select a strategy for allocating an asset to.\r\n     * @param _asset Address of asset\r\n     * @return address Address of the target strategy\r\n     */\r\n    function _selectDepositStrategyAddr(address _asset, uint256 depositAmount)\r\n        internal\r\n        view\r\n        returns (address depositStrategyAddr)\r\n    {\r\n        depositStrategyAddr = address(0);\r\n        uint256 maxDifference = 0;\r\n        for (uint256 i = 0; i < allStrategies.length; i++) {\r\n            IStrategy strategy = IStrategy(allStrategies[i]);\r\n            if (strategy.supportsAsset(_asset)) {\r\n                uint256 diff = _strategyWeightDifference(\r\n                    allStrategies[i],\r\n                    _asset,\r\n                    depositAmount,\r\n                    true\r\n                );\r\n                if (diff >= maxDifference) {\r\n                    maxDifference = diff;\r\n                    depositStrategyAddr = allStrategies[i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Select a strategy for withdrawing an asset from.\r\n     * @param _asset Address of asset\r\n     * @return address Address of the target strategy for withdrawal\r\n     */\r\n    function _selectWithdrawStrategyAddr(address _asset, uint256 _amount)\r\n        internal\r\n        view\r\n        returns (address withdrawStrategyAddr)\r\n    {\r\n        withdrawStrategyAddr = address(0);\r\n        uint256 minDifference = MAX_UINT;\r\n        for (uint256 i = 0; i < allStrategies.length; i++) {\r\n            IStrategy strategy = IStrategy(allStrategies[i]);\r\n            if (\r\n                strategy.supportsAsset(_asset) &&\r\n                strategy.checkBalance(_asset) > _amount\r\n            ) {\r\n                uint256 diff = _strategyWeightDifference(\r\n                    allStrategies[i],\r\n                    _asset,\r\n                    _amount,\r\n                    false\r\n                );\r\n                if (diff <= minDifference) {\r\n                    minDifference = diff;\r\n                    withdrawStrategyAddr = allStrategies[i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get the balance of an asset held in Vault and all strategies.\r\n     * @param _asset Address of asset\r\n     * @return uint256 Balance of asset in decimals of asset\r\n     */\r\n    function checkBalance(address _asset) external view returns (uint256) {\r\n        return _checkBalance(_asset);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the balance of an asset held in Vault and all strategies.\r\n     * @param _asset Address of asset\r\n     * @return uint256 Balance of asset in decimals of asset\r\n     */\r\n    function _checkBalance(address _asset)\r\n        internal\r\n        view\r\n        returns (uint256 balance)\r\n    {\r\n        IERC20 asset = IERC20(_asset);\r\n        balance = asset.balanceOf(address(this));\r\n        for (uint256 i = 0; i < allStrategies.length; i++) {\r\n            IStrategy strategy = IStrategy(allStrategies[i]);\r\n            if (strategy.supportsAsset(_asset)) {\r\n                balance += strategy.checkBalance(_asset);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get the balance of all assets held in Vault and all strategies.\r\n     * @return uint256 Balance of all assets (1e18)\r\n     */\r\n    function _checkBalance() internal view returns (uint256 balance) {\r\n        balance = 0;\r\n        for (uint256 i = 0; i < allAssets.length; i++) {\r\n            uint256 assetDecimals = Helpers.getDecimals(allAssets[i]);\r\n            balance += _checkBalance(allAssets[i]).scaleBy(\r\n                int8(18 - assetDecimals)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the outputs for a redeem function, i.e. the mix of\r\n     * coins that will be returned\r\n     */\r\n    function calculateRedeemOutputs(uint256 _amount)\r\n        external\r\n        returns (uint256[] memory)\r\n    {\r\n        return _calculateRedeemOutputs(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Calculate the outputs for a redeem function, i.e. the mix of\r\n     * coins that will be returned.\r\n     * @return Array of amounts respective to the supported assets\r\n     */\r\n    function _calculateRedeemOutputs(uint256 _amount)\r\n        internal\r\n        returns (uint256[] memory outputs)\r\n    {\r\n        // We always give out coins in proportion to how many we have,\r\n        // Now if all coins were the same value, this math would easy,\r\n        // just take the percentage of each coin, and multiply by the\r\n        // value to be given out. But if coins are worth more than $1,\r\n        // then we would end up handing out too many coins. We need to\r\n        // adjust by the total value of coins.\r\n        //\r\n        // To do this, we total up the value of our coins, by their\r\n        // percentages. Then divide what we would otherwise give out by\r\n        // this number.\r\n        //\r\n        // Let say we have 100 DAI at $1.06  and 200 USDT at $1.00.\r\n        // So for every 1 DAI we give out, we'll be handing out 2 USDT\r\n        // Our total output ratio is: 33% * 1.06 + 66% * 1.00 = 1.02\r\n        //\r\n        // So when calculating the output, we take the percentage of\r\n        // each coin, times the desired output value, divided by the\r\n        // totalOutputRatio.\r\n        //\r\n        // For example, withdrawing: 30 OUSD:\r\n        // DAI 33% * 30 / 1.02 = 9.80 DAI\r\n        // USDT = 66 % * 30 / 1.02 = 19.60 USDT\r\n        //\r\n        // Checking these numbers:\r\n        // 9.80 DAI * 1.06 = $10.40\r\n        // 19.60 USDT * 1.00 = $19.60\r\n        //\r\n        // And so the user gets $10.40 + $19.60 = $30 worth of value.\r\n\r\n        uint256 assetCount = getAssetCount();\r\n        uint256[] memory assetPrices = _getAssetPrices(true);\r\n        uint256[] memory assetBalances = new uint256[](assetCount);\r\n        uint256[] memory assetDecimals = new uint256[](assetCount);\r\n        uint256 totalBalance = 0;\r\n        uint256 totalOutputRatio = 0;\r\n        outputs = new uint256[](assetCount);\r\n\r\n        // Calculate redeem fee\r\n        if (redeemFeeBps > 0) {\r\n            uint256 redeemFee = _amount.mul(redeemFeeBps).div(10000);\r\n            _amount = _amount.sub(redeemFee);\r\n        }\r\n\r\n        // Calculate assets balances and decimals once,\r\n        // for a large gas savings.\r\n        for (uint256 i = 0; i < allAssets.length; i++) {\r\n            uint256 balance = _checkBalance(allAssets[i]);\r\n            uint256 decimals = Helpers.getDecimals(allAssets[i]);\r\n            assetBalances[i] = balance;\r\n            assetDecimals[i] = decimals;\r\n            totalBalance += balance.scaleBy(int8(18 - decimals));\r\n        }\r\n        // Calculate totalOutputRatio\r\n        for (uint256 i = 0; i < allAssets.length; i++) {\r\n            uint256 price = assetPrices[i];\r\n            // Never give out more than one\r\n            // stablecoin per dollar of OUSD\r\n            if (price < 1e18) {\r\n                price = 1e18;\r\n            }\r\n            uint256 ratio = assetBalances[i]\r\n                .scaleBy(int8(18 - assetDecimals[i]))\r\n                .mul(price)\r\n                .div(totalBalance);\r\n            totalOutputRatio += ratio;\r\n        }\r\n        // Calculate final outputs\r\n        uint256 factor = _amount.divPrecisely(totalOutputRatio);\r\n        for (uint256 i = 0; i < allAssets.length; i++) {\r\n            outputs[i] = assetBalances[i].mul(factor).div(totalBalance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get an array of the supported asset prices in USD.\r\n     * @return uint256[] Array of asset prices in USD (1e18)\r\n     */\r\n    function _getAssetPrices(bool useMax)\r\n        internal\r\n        returns (uint256[] memory assetPrices)\r\n    {\r\n        assetPrices = new uint256[](getAssetCount());\r\n\r\n        IMinMaxOracle oracle = IMinMaxOracle(priceProvider);\r\n        // Price from Oracle is returned with 8 decimals\r\n        // _amount is in assetDecimals\r\n\r\n        for (uint256 i = 0; i < allAssets.length; i++) {\r\n            string memory symbol = Helpers.getSymbol(allAssets[i]);\r\n            // Get all the USD prices of the asset in 1e18\r\n            if (useMax) {\r\n                assetPrices[i] = oracle.priceMax(symbol).scaleBy(int8(18 - 8));\r\n            } else {\r\n                assetPrices[i] = oracle.priceMin(symbol).scaleBy(int8(18 - 8));\r\n            }\r\n        }\r\n    }\r\n\r\n    /***************************************\r\n                    Utils\r\n    ****************************************/\r\n\r\n    /**\r\n     * @dev Return the number of assets suppported by the Vault.\r\n     */\r\n    function getAssetCount() public view returns (uint256) {\r\n        return allAssets.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Return all asset addresses in order\r\n     */\r\n    function getAllAssets() external view returns (address[] memory) {\r\n        return allAssets;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the number of strategies active on the Vault.\r\n     */\r\n    function getStrategyCount() public view returns (uint256) {\r\n        return allStrategies.length;\r\n    }\r\n\r\n    function isSupportedAsset(address _asset) external view returns (bool) {\r\n        return assets[_asset].isSupported;\r\n    }\r\n\r\n    /**\r\n     * @dev Falldown to the admin implementation\r\n     * @notice This is a catch all for all functions not declared in core\r\n     */\r\n    function() external payable {\r\n        bytes32 slot = adminImplPosition;\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don't know the size yet.\r\n            let result := delegatecall(gas, sload(slot), 0, calldatasize, 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            switch result\r\n                // delegatecall returns 0 on error.\r\n                case 0 {\r\n                    revert(0, returndatasize)\r\n                }\r\n                default {\r\n                    return(0, returndatasize)\r\n                }\r\n        }\r\n    }\r\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"depositPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintMultiple\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uniswapAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vaultBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"redeemAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStrategyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemOutputs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rebaseHooksAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"autoAllocateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setAdminImpl\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_strategyAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"StrategyWeightsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositsPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DepositsUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"}]", "ContractName": "VaultCore", "CompilerVersion": "v0.5.11+commit.c082d0b4", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://2c71f94d834ebba418b1ce11b67ec5816b522e3e59aa0527923f5caef3f14cd9"}