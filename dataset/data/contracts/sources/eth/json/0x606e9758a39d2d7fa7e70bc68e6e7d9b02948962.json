{"SourceCode": "pragma solidity ^0.5.0;\n\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint supply);\n    function balanceOf(address _owner) external view returns (uint balance);\n    function transfer(address _to, uint _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n    function approve(address _spender, uint _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\n    function decimals() external view returns(uint digits);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface ExchangeInterface {\n    function swapEtherToToken (uint _ethAmount, address _tokenAddress, uint _maxAmount) payable external returns(uint, uint);\n    function swapTokenToEther (address _tokenAddress, uint _amount, uint _maxAmount) external returns(uint);\n    function swapTokenToToken(address _src, address _dest, uint _amount) external payable returns(uint);\n\n    function getExpectedRate(address src, address dest, uint srcQty) external view\n        returns (uint expectedRate);\n}\n\ncontract TokenInterface {\n    function allowance(address, address) public returns (uint);\n    function balanceOf(address) public returns (uint);\n    function approve(address, uint) public;\n    function transfer(address, uint) public returns (bool);\n    function transferFrom(address, address, uint) public returns (bool);\n    function deposit() public payable;\n    function withdraw(uint) public;\n}\n\ncontract DSMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n    function div(uint x, uint y) internal pure returns (uint z) {\n        return x / y;\n    }\n\n    function min(uint x, uint y) internal pure returns (uint z) {\n        return x <= y ? x : y;\n    }\n    function max(uint x, uint y) internal pure returns (uint z) {\n        return x >= y ? x : y;\n    }\n    function imin(int x, int y) internal pure returns (int z) {\n        return x <= y ? x : y;\n    }\n    function imax(int x, int y) internal pure returns (int z) {\n        return x >= y ? x : y;\n    }\n\n    uint constant WAD = 10 ** 18;\n    uint constant RAY = 10 ** 27;\n\n    function wmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n    function rmul(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint x, uint n) internal pure returns (uint z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\ncontract SaverExchangeConstantAddresses {\n    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address payable public constant WALLET_ID = 0x322d58b9E75a6918f7e7849AEe0fF09369977e08;\n    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n\n    address public constant KYBER_WRAPPER = 0x8F337bD3b7F2b05d9A8dC8Ac518584e833424893;\n    address public constant UNISWAP_WRAPPER = 0x1e30124FDE14533231216D95F7798cD0061e5cf8;\n    address public constant OASIS_WRAPPER = 0x891f5A171f865031b0f3Eb9723bb8f68C901c9FE;\n\n    // Our contracts\n    address public constant ERC20_PROXY_0X = 0x95E6F48254609A6ee006F7D493c8e5fB97094ceF;\n}\n\ncontract Discount {\n\n    address public owner;\n    mapping (address => CustomServiceFee) public serviceFees;\n\n    uint constant MAX_SERVICE_FEE = 400;\n\n    struct CustomServiceFee {\n        bool active;\n        uint amount;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function isCustomFeeSet(address _user) public view returns (bool) {\n        return serviceFees[_user].active;\n    }\n\n    function getCustomServiceFee(address _user) public view returns (uint) {\n        return serviceFees[_user].amount;\n    }\n\n    function setServiceFee(address _user, uint _fee) public {\n        require(msg.sender == owner, \"Only owner\");\n        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n\n        serviceFees[_user] = CustomServiceFee({\n            active: true,\n            amount: _fee\n        });\n    }\n\n    function disableServiceFee(address _user) public {\n        require(msg.sender == owner, \"Only owner\");\n\n        serviceFees[_user] = CustomServiceFee({\n            active: false,\n            amount: 0\n        });\n    }\n}\n\ncontract SaverExchange is DSMath, SaverExchangeConstantAddresses {\n\n    uint public constant SERVICE_FEE = 800; // 0.125% Fee\n\n    event Swap(address src, address dest, uint amountSold, uint amountBought, address wrapper);\n\n    function swapTokenToToken(address _src, address _dest, uint _amount, uint _minPrice, uint _exchangeType, address _exchangeAddress, bytes memory _callData, uint _0xPrice) public payable {\n        // use this to avoid stack too deep error\n        address[3] memory orderAddresses = [_exchangeAddress, _src, _dest];\n\n        if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\n            require(msg.value >= _amount, \"msg.value smaller than amount\");\n        } else {\n            require(ERC20(orderAddresses[1]).transferFrom(msg.sender, address(this), _amount), \"Not able to withdraw wanted amount\");\n        }\n\n        uint fee = takeFee(_amount, orderAddresses[1]);\n        _amount = sub(_amount, fee);\n        // [tokensReturned, tokensLeft]\n        uint[2] memory tokens;\n        address wrapper;\n        uint price;\n        bool success;\n\n        // at the beggining tokensLeft equals _amount\n        tokens[1] = _amount;\n\n        if (_exchangeType == 4) {\n            if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n                ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _amount);\n            }\n\n            (success, tokens[0], ) = takeOrder(orderAddresses, _callData, address(this).balance, _amount);\n            // either it reverts or order doesn't exist anymore, we reverts as it was explicitely asked for this exchange\n            require(success && tokens[0] > 0, \"0x transaction failed\");\n            wrapper = address(_exchangeAddress);\n        }\n\n        if (tokens[0] == 0) {\n            (wrapper, price) = getBestPrice(_amount, orderAddresses[1], orderAddresses[2], _exchangeType);\n\n            require(price > _minPrice || _0xPrice > _minPrice, \"Slippage hit\");\n\n            // handle 0x exchange, if equal price, try 0x to use less gas\n            if (_0xPrice >= price) {\n                if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n                    ERC20(orderAddresses[1]).approve(address(ERC20_PROXY_0X), _amount);\n                }\n                (success, tokens[0], tokens[1]) = takeOrder(orderAddresses, _callData, address(this).balance, _amount);\n                // either it reverts or order doesn't exist anymore\n                if (success && tokens[0] > 0) {\n                    wrapper = address(_exchangeAddress);\n                    emit Swap(orderAddresses[1], orderAddresses[2], _amount, tokens[0], wrapper);\n                }\n            }\n\n            if (tokens[1] > 0) {\n                // in case 0x swapped just some amount of tokens and returned everything else\n                if (tokens[1] != _amount) {\n                    (wrapper, price) = getBestPrice(tokens[1], orderAddresses[1], orderAddresses[2], _exchangeType);\n                }\n\n                // in case 0x failed, price on other exchanges still needs to be higher than minPrice\n                require(price > _minPrice, \"Slippage hit onchain price\");\n                if (orderAddresses[1] == KYBER_ETH_ADDRESS) {\n                    (tokens[0],) = ExchangeInterface(wrapper).swapEtherToToken.value(tokens[1])(tokens[1], orderAddresses[2], uint(-1));\n                } else {\n                    ERC20(orderAddresses[1]).transfer(wrapper, tokens[1]);\n\n                    if (orderAddresses[2] == KYBER_ETH_ADDRESS) {\n                        tokens[0] = ExchangeInterface(wrapper).swapTokenToEther(orderAddresses[1], tokens[1], uint(-1));\n                    } else {\n                        tokens[0] = ExchangeInterface(wrapper).swapTokenToToken(orderAddresses[1], orderAddresses[2], tokens[1]);\n                    }\n                }\n\n                emit Swap(orderAddresses[1], orderAddresses[2], _amount, tokens[0], wrapper);\n            }\n        }\n\n        // return whatever is left in contract\n        if (address(this).balance > 0) {\n            msg.sender.transfer(address(this).balance);\n        }\n\n        // return if there is any tokens left\n        if (orderAddresses[2] != KYBER_ETH_ADDRESS) {\n            if (ERC20(orderAddresses[2]).balanceOf(address(this)) > 0) {\n                ERC20(orderAddresses[2]).transfer(msg.sender, ERC20(orderAddresses[2]).balanceOf(address(this)));\n            }\n        }\n\n        if (orderAddresses[1] != KYBER_ETH_ADDRESS) {\n            if (ERC20(orderAddresses[1]).balanceOf(address(this)) > 0) {\n                ERC20(orderAddresses[1]).transfer(msg.sender, ERC20(orderAddresses[1]).balanceOf(address(this)));\n            }\n        }\n    }\n\n    // @notice Takes order from 0x and returns bool indicating if it is successful\n    // @param _addresses [exchange, src, dst]\n    // @param _data Data to send with call\n    // @param _value Value to send with call\n    // @param _amount Amount being sold\n    function takeOrder(address[3] memory _addresses, bytes memory _data, uint _value, uint _amount) private returns(bool, uint, uint) {\n        bool success;\n\n        (success, ) = _addresses[0].call.value(_value)(_data);\n\n        uint tokensLeft = _amount;\n        uint tokensReturned = 0;\n        if (success){\n            // check how many tokens left from _src\n            if (_addresses[1] == KYBER_ETH_ADDRESS) {\n                tokensLeft = address(this).balance;\n            } else {\n                tokensLeft = ERC20(_addresses[1]).balanceOf(address(this));\n            }\n\n            // check how many tokens are returned\n            if (_addresses[2] == KYBER_ETH_ADDRESS) {\n                TokenInterface(WETH_ADDRESS).withdraw(TokenInterface(WETH_ADDRESS).balanceOf(address(this)));\n                tokensReturned = address(this).balance;\n            } else {\n                tokensReturned = ERC20(_addresses[2]).balanceOf(address(this));\n            }\n        }\n\n        return (success, tokensReturned, tokensLeft);\n    }\n\n    /// @notice Returns the best estimated price from 2 exchanges\n    /// @param _amount Amount of source tokens you want to exchange\n    /// @param _srcToken Address of the source token\n    /// @param _destToken Address of the destination token\n    /// @return (address, uint) The address of the best exchange and the exchange price\n    function getBestPrice(uint _amount, address _srcToken, address _destToken, uint _exchangeType) public returns (address, uint) {\n        uint expectedRateKyber;\n        uint expectedRateUniswap;\n        uint expectedRateOasis;\n\n\n        if (_exchangeType == 1) {\n            return (OASIS_WRAPPER, getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount));\n        }\n\n        if (_exchangeType == 2) {\n            return (KYBER_WRAPPER, getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount));\n        }\n\n        if (_exchangeType == 3) {\n            expectedRateUniswap = getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount);\n            expectedRateUniswap = expectedRateUniswap * (10 ** (18 - getDecimals(_destToken)));\n            return (UNISWAP_WRAPPER, expectedRateUniswap);\n        }\n\n        expectedRateKyber = getExpectedRate(KYBER_WRAPPER, _srcToken, _destToken, _amount);\n        expectedRateUniswap = getExpectedRate(UNISWAP_WRAPPER, _srcToken, _destToken, _amount);\n        expectedRateUniswap = expectedRateUniswap * (10 ** (18 - getDecimals(_destToken)));\n        expectedRateOasis = getExpectedRate(OASIS_WRAPPER, _srcToken, _destToken, _amount);\n\n        if ((expectedRateKyber >= expectedRateUniswap) && (expectedRateKyber >= expectedRateOasis)) {\n            return (KYBER_WRAPPER, expectedRateKyber);\n        }\n\n        if ((expectedRateOasis >= expectedRateKyber) && (expectedRateOasis >= expectedRateUniswap)) {\n            return (OASIS_WRAPPER, expectedRateOasis);\n        }\n\n        if ((expectedRateUniswap >= expectedRateKyber) && (expectedRateUniswap >= expectedRateOasis)) {\n            return (UNISWAP_WRAPPER, expectedRateUniswap);\n        }\n    }\n\n    function getExpectedRate(address _wrapper, address _srcToken, address _destToken, uint _amount) public returns(uint) {\n        bool success;\n        bytes memory result;\n\n        (success, result) = _wrapper.call(abi.encodeWithSignature(\"getExpectedRate(address,address,uint256)\", _srcToken, _destToken, _amount));\n\n        if (success) {\n            return sliceUint(result, 0);\n        } else {\n            return 0;\n        }\n    }\n\n    /// @notice Takes a feePercentage and sends it to wallet\n    /// @param _amount Dai amount of the whole trade\n    /// @return feeAmount Amount in Dai owner earned on the fee\n    function takeFee(uint _amount, address _token) internal returns (uint feeAmount) {\n        uint fee = SERVICE_FEE;\n\n        if (Discount(DISCOUNT_ADDRESS).isCustomFeeSet(msg.sender)) {\n            fee = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(msg.sender);\n        }\n\n        if (fee == 0) {\n            feeAmount = 0;\n        } else {\n            feeAmount = _amount / SERVICE_FEE;\n            if (_token == KYBER_ETH_ADDRESS) {\n                WALLET_ID.transfer(feeAmount);\n            } else {\n                ERC20(_token).transfer(WALLET_ID, feeAmount);\n            }\n        }\n    }\n\n\n    function getDecimals(address _token) internal view returns(uint) {\n        // DGD\n        if (_token == address(0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A)) {\n            return 9;\n        }\n        // USDC\n        if (_token == address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48)) {\n            return 6;\n        }\n        // WBTC\n        if (_token == address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599)) {\n            return 8;\n        }\n\n        return 18;\n    }\n\n    function sliceUint(bytes memory bs, uint start) internal pure returns (uint) {\n        require(bs.length >= start + 32, \"slicing out of range\");\n\n        uint x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n\n        return x;\n    }\n\n    // receive eth from wrappers\n    function() external payable {}\n}", "ABI": "[{\"constant\":true,\"inputs\":[],\"name\":\"WETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_ETH_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_exchangeType\",\"type\":\"uint256\"}],\"name\":\"getBestPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SERVICE_FEE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wrapper\",\"type\":\"address\"},{\"name\":\"_srcToken\",\"type\":\"address\"},{\"name\":\"_destToken\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getExpectedRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_src\",\"type\":\"address\"},{\"name\":\"_dest\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_minPrice\",\"type\":\"uint256\"},{\"name\":\"_exchangeType\",\"type\":\"uint256\"},{\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"name\":\"_callData\",\"type\":\"bytes\"},{\"name\":\"_0xPrice\",\"type\":\"uint256\"}],\"name\":\"swapTokenToToken\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DISCOUNT_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KYBER_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OASIS_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ERC20_PROXY_0X\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WALLET_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UNISWAP_WRAPPER\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amountBought\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"}]", "ContractName": "SaverExchange", "CompilerVersion": "v0.5.7+commit.6da8b019", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}