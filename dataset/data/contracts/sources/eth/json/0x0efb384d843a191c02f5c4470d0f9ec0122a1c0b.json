{"SourceCode": "// SPDX-License-Identifier: GPL-3.0-only\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/ElasticERC20.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This contract is based on the OpenZeppelin ERC20 implementation,\r\n * basically adding the elastic extensions.\r\n */\r\ncontract ElasticERC20 is Context, IERC20\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint8 constant UNSCALED_DECIMALS = 24;\r\n\tuint256 constant UNSCALED_FACTOR = 10 ** uint256(UNSCALED_DECIMALS);\r\n\r\n\tmapping (address => mapping (address => uint256)) private allowances_;\r\n\r\n\tmapping (address => uint256) private unscaledBalances_;\r\n\tuint256 private unscaledTotalSupply_;\r\n\r\n\tstring private name_;\r\n\tstring private symbol_;\r\n\tuint8 private decimals_;\r\n\r\n\tuint256 private scalingFactor_;\r\n\r\n\tconstructor (string memory _name, string memory _symbol) public\r\n\t{\r\n\t\tname_ = _name;\r\n\t\tsymbol_ = _symbol;\r\n\t\t_setupDecimals(18);\r\n\t}\r\n\r\n\tfunction name() public view returns (string memory _name)\r\n\t{\r\n\t\treturn name_;\r\n\t}\r\n\r\n\tfunction symbol() public view returns (string memory _symbol)\r\n\t{\r\n\t\treturn symbol_;\r\n\t}\r\n\r\n\tfunction decimals() public view returns (uint8 _decimals)\r\n\t{\r\n\t\treturn decimals_;\r\n\t}\r\n\r\n\tfunction totalSupply() public view override returns (uint256 _supply)\r\n\t{\r\n\t\treturn _scale(unscaledTotalSupply_, scalingFactor_);\r\n\t}\r\n\r\n\tfunction balanceOf(address _account) public view override returns (uint256 _balance)\r\n\t{\r\n\t\treturn _scale(unscaledBalances_[_account], scalingFactor_);\r\n\t}\r\n\r\n\tfunction allowance(address _owner, address _spender) public view virtual override returns (uint256 _allowance)\r\n\t{\r\n\t\treturn allowances_[_owner][_spender];\r\n\t}\r\n\r\n\tfunction approve(address _spender, uint256 _amount) public virtual override returns (bool _success)\r\n\t{\r\n\t\t_approve(_msgSender(), _spender, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address _spender, uint256 _addedValue) public virtual returns (bool _success)\r\n\t{\r\n\t\t_approve(_msgSender(), _spender, allowances_[_msgSender()][_spender].add(_addedValue));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual returns (bool _success)\r\n\t{\r\n\t\t_approve(_msgSender(), _spender, allowances_[_msgSender()][_spender].sub(_subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transfer(address _recipient, uint256 _amount) public virtual override returns (bool _success)\r\n\t{\r\n\t\t_transfer(_msgSender(), _recipient, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(address _sender, address _recipient, uint256 _amount) public virtual override returns (bool _success)\r\n\t{\r\n\t\t_transfer(_sender, _recipient, _amount);\r\n\t\t_approve(_sender, _msgSender(), allowances_[_sender][_msgSender()].sub(_amount, \"ERC20: transfer amount exceeds allowance\"));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _approve(address _owner, address _spender, uint256 _amount) internal virtual\r\n\t{\r\n\t\trequire(_owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(_spender != address(0), \"ERC20: approve to the zero address\");\r\n\t\tallowances_[_owner][_spender] = _amount;\r\n\t\temit Approval(_owner, _spender, _amount);\r\n\t}\r\n\r\n\tfunction _transfer(address _sender, address _recipient, uint256 _amount) internal virtual\r\n\t{\r\n\t\tuint256 _unscaledAmount = _unscale(_amount, scalingFactor_);\r\n\t\trequire(_sender != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(_recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\t\t_beforeTokenTransfer(_sender, _recipient, _amount);\r\n\t\tunscaledBalances_[_sender] = unscaledBalances_[_sender].sub(_unscaledAmount, \"ERC20: transfer amount exceeds balance\");\r\n\t\tunscaledBalances_[_recipient] = unscaledBalances_[_recipient].add(_unscaledAmount);\r\n\t\temit Transfer(_sender, _recipient, _amount);\r\n\t}\r\n\r\n\tfunction _mint(address _account, uint256 _amount) internal virtual\r\n\t{\r\n\t\tuint256 _unscaledAmount = _unscale(_amount, scalingFactor_);\r\n\t\trequire(_account != address(0), \"ERC20: mint to the zero address\");\r\n\t\t_beforeTokenTransfer(address(0), _account, _amount);\r\n\t\tunscaledTotalSupply_ = unscaledTotalSupply_.add(_unscaledAmount);\r\n\t\tuint256 _maxScalingFactor = _calcMaxScalingFactor(unscaledTotalSupply_);\r\n\t\trequire(scalingFactor_ <= _maxScalingFactor, \"unsupported scaling factor\");\r\n\t\tunscaledBalances_[_account] = unscaledBalances_[_account].add(_unscaledAmount);\r\n\t\temit Transfer(address(0), _account, _amount);\r\n\t}\r\n\r\n\tfunction _burn(address _account, uint256 _amount) internal virtual\r\n\t{\r\n\t\tuint256 _unscaledAmount = _unscale(_amount, scalingFactor_);\r\n\t\trequire(_account != address(0), \"ERC20: burn from the zero address\");\r\n\t\t_beforeTokenTransfer(_account, address(0), _amount);\r\n\t\tunscaledBalances_[_account] = unscaledBalances_[_account].sub(_unscaledAmount, \"ERC20: burn amount exceeds balance\");\r\n\t\tunscaledTotalSupply_ = unscaledTotalSupply_.sub(_unscaledAmount);\r\n\t\temit Transfer(_account, address(0), _amount);\r\n\t}\r\n\r\n\tfunction _setupDecimals(uint8 _decimals) internal\r\n\t{\r\n\t\tdecimals_ = _decimals;\r\n\t\tscalingFactor_ = 10 ** uint256(_decimals);\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal virtual { }\r\n\r\n\tfunction unscaledTotalSupply() public view returns (uint256 _supply)\r\n\t{\r\n\t\treturn unscaledTotalSupply_;\r\n\t}\r\n\r\n\tfunction unscaledBalanceOf(address _account) public view returns (uint256 _balance)\r\n\t{\r\n\t\treturn unscaledBalances_[_account];\r\n\t}\r\n\r\n\tfunction scalingFactor() public view returns (uint256 _scalingFactor)\r\n\t{\r\n\t\treturn scalingFactor_;\r\n\t}\r\n\r\n\tfunction maxScalingFactor() public view returns (uint256 _maxScalingFactor)\r\n\t{\r\n\t\treturn _calcMaxScalingFactor(unscaledTotalSupply_);\r\n\t}\r\n\r\n\tfunction _calcMaxScalingFactor(uint256 _unscaledTotalSupply) internal pure returns (uint256 _maxScalingFactor)\r\n\t{\r\n\t\treturn uint256(-1).div(_unscaledTotalSupply);\r\n\t}\r\n\r\n\tfunction _scale(uint256 _unscaledAmount, uint256 _scalingFactor) internal pure returns (uint256 _amount)\r\n\t{\r\n\t\treturn _unscaledAmount.mul(_scalingFactor).div(UNSCALED_FACTOR);\r\n\t}\r\n\r\n\tfunction _unscale(uint256 _amount, uint256 _scalingFactor) internal pure returns (uint256 _unscaledAmount)\r\n\t{\r\n\t\treturn _amount.mul(UNSCALED_FACTOR).div(_scalingFactor);\r\n\t}\r\n\r\n\tfunction _setScalingFactor(uint256 _scalingFactor) internal\r\n\t{\r\n\t\tuint256 _maxScalingFactor = _calcMaxScalingFactor(unscaledTotalSupply_);\r\n\t\trequire(0 < _scalingFactor && _scalingFactor <= _maxScalingFactor, \"unsupported scaling factor\");\r\n\t\tscalingFactor_ = _scalingFactor;\r\n\t}\r\n}\r\n\r\n// File: contracts/Executor.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library provides support for the dynamic execution of external\r\n * contract calls.\r\n */\r\nlibrary Executor\r\n{\r\n\tstruct Target {\r\n\t\taddress to;\r\n\t\tbytes data;\r\n\t}\r\n\r\n\tfunction addTarget(Target[] storage _targets, address _to, bytes memory _data) internal\r\n\t{\r\n\t\t_targets.push(Target({ to: _to, data: _data }));\r\n\t}\r\n\r\n\tfunction removeTarget(Target[] storage _targets, uint256 _index) internal\r\n\t{\r\n\t\trequire(_index < _targets.length, \"invalid index\");\r\n\t\t_targets[_index] = _targets[_targets.length - 1];\r\n\t\t_targets.pop();\r\n\t}\r\n\r\n\tfunction executeAll(Target[] storage _targets) internal\r\n\t{\r\n\t\tfor (uint256 _i = 0; _i < _targets.length; _i++) {\r\n\t\t\tTarget storage _target = _targets[_i];\r\n\t\t\tbool _success = _externalCall(_target.to, _target.data);\r\n\t\t\trequire(_success, \"call failed\");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _externalCall(address _to, bytes memory _data) private returns (bool _success)\r\n\t{\r\n\t\tassembly {\r\n\t\t\t_success := call(gas(), _to, 0, add(_data, 0x20), mload(_data), 0, 0)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// File: contracts/GElastic.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This interface exposes the base functionality of GElasticToken.\r\n */\r\ninterface GElastic\r\n{\r\n\t// view functions\r\n\tfunction referenceToken() external view returns (address _referenceToken);\r\n\tfunction treasury() external view returns (address _treasury);\r\n\tfunction rebaseMinimumDeviation() external view returns (uint256 _rebaseMinimumDeviation);\r\n\tfunction rebaseDampeningFactor() external view returns (uint256 _rebaseDampeningFactor);\r\n\tfunction rebaseTreasuryMintPercent() external view returns (uint256 _rebaseTreasuryMintPercent);\r\n\tfunction rebaseTimingParameters() external view returns (uint256 _rebaseMinimumInterval, uint256 _rebaseWindowOffset, uint256 _rebaseWindowLength);\r\n\tfunction rebaseActive() external view returns (bool _rebaseActive);\r\n\tfunction rebaseAvailable() external view returns (bool _available);\r\n\tfunction lastRebaseTime() external view returns (uint256 _lastRebaseTime);\r\n\tfunction epoch() external view returns (uint256 _epoch);\r\n\tfunction lastExchangeRate() external view returns (uint256 _exchangeRate);\r\n\tfunction currentExchangeRate() external view returns (uint256 _exchangeRate);\r\n\tfunction pair() external view returns (address _pair);\r\n\r\n\t// open functions\r\n\tfunction rebase() external;\r\n\r\n\t// priviledged functions\r\n\tfunction activateOracle(address _pair) external;\r\n\tfunction activateRebase() external;\r\n\tfunction setTreasury(address _newTreasury) external;\r\n\tfunction setRebaseMinimumDeviation(uint256 _newRebaseMinimumDeviation) external;\r\n\tfunction setRebaseDampeningFactor(uint256 _newRebaseDampeningFactor) external;\r\n\tfunction setRebaseTreasuryMintPercent(uint256 _newRebaseTreasuryMintPercent) external;\r\n\tfunction setRebaseTimingParameters(uint256 _newRebaseMinimumInterval, uint256 _newRebaseWindowOffset, uint256 _newRebaseWindowLength) external;\r\n\tfunction addPostRebaseTarget(address _to, bytes memory _data) external;\r\n\tfunction removePostRebaseTarget(uint256 _index) external;\r\n\r\n\t// emitted events\r\n\tevent Rebase(uint256 indexed _epoch, uint256 _oldScalingFactor, uint256 _newScalingFactor);\r\n\tevent ChangeTreasury(address _oldTreasury, address _newTreasury);\r\n\tevent ChangeRebaseMinimumDeviation(uint256 _oldRebaseMinimumDeviation, uint256 _newRebaseMinimumDeviation);\r\n\tevent ChangeRebaseDampeningFactor(uint256 _oldRebaseDampeningFactor, uint256 _newRebaseDampeningFactor);\r\n\tevent ChangeRebaseTreasuryMintPercent(uint256 _oldRebaseTreasuryMintPercent, uint256 _newRebaseTreasuryMintPercent);\r\n\tevent ChangeRebaseTimingParameters(uint256 _oldRebaseMinimumInterval, uint256 _oldRebaseWindowOffset, uint256 _oldRebaseWindowLength, uint256 _newRebaseMinimumInterval, uint256 _newRebaseWindowOffset, uint256 _newRebaseWindowLength);\r\n\tevent AddPostRebaseTarget(address indexed _to, bytes _data);\r\n\tevent RemovePostRebaseTarget(address indexed _to, bytes _data);\r\n}\r\n\r\n// File: contracts/GElasticTokenManager.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev This library helps managing rebase parameters and calculations.\r\n */\r\nlibrary GElasticTokenManager\r\n{\r\n\tusing SafeMath for uint256;\r\n\tusing GElasticTokenManager for GElasticTokenManager.Self;\r\n\r\n\tuint256 constant MAXIMUM_REBASE_TREASURY_MINT_PERCENT = 25e16; // 25%\r\n\r\n\tuint256 constant DEFAULT_REBASE_MINIMUM_INTERVAL = 24 hours;\r\n\tuint256 constant DEFAULT_REBASE_WINDOW_OFFSET = 17 hours; // 5PM UTC\r\n\tuint256 constant DEFAULT_REBASE_WINDOW_LENGTH = 1 hours;\r\n\tuint256 constant DEFAULT_REBASE_MINIMUM_DEVIATION = 5e16; // 5%\r\n\tuint256 constant DEFAULT_REBASE_DAMPENING_FACTOR = 10; // 10x to reach 100%\r\n\tuint256 constant DEFAULT_REBASE_TREASURY_MINT_PERCENT = 10e16; // 10%\r\n\r\n\tstruct Self {\r\n\t\taddress treasury;\r\n\r\n\t\tuint256 rebaseMinimumDeviation;\r\n\t\tuint256 rebaseDampeningFactor;\r\n\t\tuint256 rebaseTreasuryMintPercent;\r\n\r\n\t\tuint256 rebaseMinimumInterval;\r\n\t\tuint256 rebaseWindowOffset;\r\n\t\tuint256 rebaseWindowLength;\r\n\r\n\t\tbool rebaseActive;\r\n\t\tuint256 lastRebaseTime;\r\n\t\tuint256 epoch;\r\n\t}\r\n\r\n\tfunction init(Self storage _self, address _treasury) public\r\n\t{\r\n\t\t_self.treasury = _treasury;\r\n\r\n\t\t_self.rebaseMinimumDeviation = DEFAULT_REBASE_MINIMUM_DEVIATION;\r\n\t\t_self.rebaseDampeningFactor = DEFAULT_REBASE_DAMPENING_FACTOR;\r\n\t\t_self.rebaseTreasuryMintPercent = DEFAULT_REBASE_TREASURY_MINT_PERCENT;\r\n\r\n\t\t_self.rebaseMinimumInterval = DEFAULT_REBASE_MINIMUM_INTERVAL;\r\n\t\t_self.rebaseWindowOffset = DEFAULT_REBASE_WINDOW_OFFSET;\r\n\t\t_self.rebaseWindowLength = DEFAULT_REBASE_WINDOW_LENGTH;\r\n\r\n\t\t_self.rebaseActive = false;\r\n\t\t_self.lastRebaseTime = 0;\r\n\t\t_self.epoch = 0;\r\n\t}\r\n\r\n\tfunction activateRebase(Self storage _self) public\r\n\t{\r\n\t\trequire(!_self.rebaseActive, \"already active\");\r\n\t\t_self.rebaseActive = true;\r\n\t\t_self.lastRebaseTime = now.sub(now.mod(_self.rebaseMinimumInterval)).add(_self.rebaseWindowOffset);\r\n\t}\r\n\r\n\tfunction setTreasury(Self storage _self, address _treasury) public\r\n\t{\r\n\t\trequire(_treasury != address(0), \"invalid treasury\");\r\n\t\t_self.treasury = _treasury;\r\n\t}\r\n\r\n\tfunction setRebaseMinimumDeviation(Self storage _self, uint256 _rebaseMinimumDeviation) public\r\n\t{\r\n\t\trequire(_rebaseMinimumDeviation > 0, \"invalid minimum deviation\");\r\n\t\t_self.rebaseMinimumDeviation = _rebaseMinimumDeviation;\r\n\t}\r\n\r\n\tfunction setRebaseDampeningFactor(Self storage _self, uint256 _rebaseDampeningFactor) public\r\n\t{\r\n\t\trequire(_rebaseDampeningFactor > 0, \"invalid dampening factor\");\r\n\t\t_self.rebaseDampeningFactor = _rebaseDampeningFactor;\r\n\t}\r\n\r\n\tfunction setRebaseTreasuryMintPercent(Self storage _self, uint256 _rebaseTreasuryMintPercent) public\r\n\t{\r\n\t\trequire(_rebaseTreasuryMintPercent <= MAXIMUM_REBASE_TREASURY_MINT_PERCENT, \"invalid percent\");\r\n\t\t_self.rebaseTreasuryMintPercent = _rebaseTreasuryMintPercent;\r\n\t}\r\n\r\n\tfunction setRebaseTimingParameters(Self storage _self, uint256 _rebaseMinimumInterval, uint256 _rebaseWindowOffset, uint256 _rebaseWindowLength) public\r\n\t{\r\n\t\trequire(_rebaseMinimumInterval > 0, \"invalid interval\");\r\n\t\trequire(_rebaseWindowOffset.add(_rebaseWindowLength) <= _rebaseMinimumInterval, \"invalid window\");\r\n\t\t_self.rebaseMinimumInterval = _rebaseMinimumInterval;\r\n\t\t_self.rebaseWindowOffset = _rebaseWindowOffset;\r\n\t\t_self.rebaseWindowLength = _rebaseWindowLength;\r\n\t}\r\n\r\n\tfunction rebaseAvailable(Self storage _self) public view returns (bool _available)\r\n\t{\r\n\t\treturn _self._rebaseAvailable();\r\n\t}\r\n\r\n\tfunction rebase(Self storage _self, uint256 _exchangeRate, uint256 _totalSupply) public returns (uint256 _delta, bool _positive, uint256 _mintAmount)\r\n\t{\r\n\t\trequire(_self._rebaseAvailable(), \"not available\");\r\n\r\n\t\t_self.lastRebaseTime = now.sub(now.mod(_self.rebaseMinimumInterval)).add(_self.rebaseWindowOffset);\r\n\t\t_self.epoch = _self.epoch.add(1);\r\n\r\n\t\t_positive = _exchangeRate > 1e18;\r\n\r\n\t\tuint256 _deviation = _positive ? _exchangeRate.sub(1e18) : uint256(1e18).sub(_exchangeRate);\r\n\t\tif (_deviation < _self.rebaseMinimumDeviation) {\r\n\t\t\t_deviation = 0;\r\n\t\t\t_positive = false;\r\n\t\t}\r\n\r\n\t\t_delta = _deviation.div(_self.rebaseDampeningFactor);\r\n\r\n\t\t_mintAmount = 0;\r\n\t\tif (_positive) {\r\n\t\t\tuint256 _mintPercent = _delta.mul(_self.rebaseTreasuryMintPercent).div(1e18);\r\n\t\t\t_delta = _delta.sub(_mintPercent);\r\n\t\t\t_mintAmount = _totalSupply.mul(_mintPercent).div(1e18);\r\n\t\t}\r\n\r\n\t\treturn (_delta, _positive, _mintAmount);\r\n\t}\r\n\r\n\tfunction _rebaseAvailable(Self storage _self) internal view returns (bool _available)\r\n\t{\r\n\t\tif (!_self.rebaseActive) return false;\r\n\t\tif (now < _self.lastRebaseTime.add(_self.rebaseMinimumInterval)) return false;\r\n\t\tuint256 _offset = now.mod(_self.rebaseMinimumInterval);\r\n\t\treturn _self.rebaseWindowOffset <= _offset && _offset < _self.rebaseWindowOffset.add(_self.rebaseWindowLength);\r\n\t}\r\n}\r\n\r\n// File: @uniswap/lib/contracts/libraries/FullMath.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\r\n// license is CC-BY-4.0\r\nlibrary FullMath {\r\n    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\r\n        uint256 mm = mulmod(x, y, uint256(-1));\r\n        l = x * y;\r\n        h = mm - l;\r\n        if (mm < l) h -= 1;\r\n    }\r\n\r\n    function fullDiv(\r\n        uint256 l,\r\n        uint256 h,\r\n        uint256 d\r\n    ) private pure returns (uint256) {\r\n        uint256 pow2 = d & -d;\r\n        d /= pow2;\r\n        l /= pow2;\r\n        l += h * ((-pow2) / pow2 + 1);\r\n        uint256 r = 1;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        r *= 2 - d * r;\r\n        return l * r;\r\n    }\r\n\r\n    function mulDiv(\r\n        uint256 x,\r\n        uint256 y,\r\n        uint256 d\r\n    ) internal pure returns (uint256) {\r\n        (uint256 l, uint256 h) = fullMul(x, y);\r\n\r\n        uint256 mm = mulmod(x, y, d);\r\n        if (mm > l) h -= 1;\r\n        l -= mm;\r\n\r\n        if (h == 0) return l / d;\r\n\r\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\r\n        return fullDiv(l, h, d);\r\n    }\r\n}\r\n\r\n// File: @uniswap/lib/contracts/libraries/Babylonian.sol\r\n\r\n\r\npragma solidity >=0.4.0;\r\n\r\n// computes square roots using the babylonian method\r\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\r\nlibrary Babylonian {\r\n    // credit for this implementation goes to\r\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\r\n    function sqrt(uint256 x) internal pure returns (uint256) {\r\n        if (x == 0) return 0;\r\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\r\n        // however that code costs significantly more gas\r\n        uint256 xx = x;\r\n        uint256 r = 1;\r\n        if (xx >= 0x100000000000000000000000000000000) {\r\n            xx >>= 128;\r\n            r <<= 64;\r\n        }\r\n        if (xx >= 0x10000000000000000) {\r\n            xx >>= 64;\r\n            r <<= 32;\r\n        }\r\n        if (xx >= 0x100000000) {\r\n            xx >>= 32;\r\n            r <<= 16;\r\n        }\r\n        if (xx >= 0x10000) {\r\n            xx >>= 16;\r\n            r <<= 8;\r\n        }\r\n        if (xx >= 0x100) {\r\n            xx >>= 8;\r\n            r <<= 4;\r\n        }\r\n        if (xx >= 0x10) {\r\n            xx >>= 4;\r\n            r <<= 2;\r\n        }\r\n        if (xx >= 0x8) {\r\n            r <<= 1;\r\n        }\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1;\r\n        r = (r + x / r) >> 1; // Seven iterations should be enough\r\n        uint256 r1 = x / r;\r\n        return (r < r1 ? r : r1);\r\n    }\r\n}\r\n\r\n// File: @uniswap/lib/contracts/libraries/BitMath.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\nlibrary BitMath {\r\n    // returns the 0 indexed position of the most significant bit of the input x\r\n    // s.t. x >= 2**msb and x < 2**(msb+1)\r\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\r\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\r\n\r\n        if (x >= 0x100000000000000000000000000000000) {\r\n            x >>= 128;\r\n            r += 128;\r\n        }\r\n        if (x >= 0x10000000000000000) {\r\n            x >>= 64;\r\n            r += 64;\r\n        }\r\n        if (x >= 0x100000000) {\r\n            x >>= 32;\r\n            r += 32;\r\n        }\r\n        if (x >= 0x10000) {\r\n            x >>= 16;\r\n            r += 16;\r\n        }\r\n        if (x >= 0x100) {\r\n            x >>= 8;\r\n            r += 8;\r\n        }\r\n        if (x >= 0x10) {\r\n            x >>= 4;\r\n            r += 4;\r\n        }\r\n        if (x >= 0x4) {\r\n            x >>= 2;\r\n            r += 2;\r\n        }\r\n        if (x >= 0x2) r += 1;\r\n    }\r\n\r\n    // returns the 0 indexed position of the least significant bit of the input x\r\n    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\r\n    // i.e. the bit at the index is set and the mask of all lower bits is 0\r\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\r\n        require(x > 0, 'BitMath::leastSignificantBit: zero');\r\n\r\n        r = 255;\r\n        if (x & uint128(-1) > 0) {\r\n            r -= 128;\r\n        } else {\r\n            x >>= 128;\r\n        }\r\n        if (x & uint64(-1) > 0) {\r\n            r -= 64;\r\n        } else {\r\n            x >>= 64;\r\n        }\r\n        if (x & uint32(-1) > 0) {\r\n            r -= 32;\r\n        } else {\r\n            x >>= 32;\r\n        }\r\n        if (x & uint16(-1) > 0) {\r\n            r -= 16;\r\n        } else {\r\n            x >>= 16;\r\n        }\r\n        if (x & uint8(-1) > 0) {\r\n            r -= 8;\r\n        } else {\r\n            x >>= 8;\r\n        }\r\n        if (x & 0xf > 0) {\r\n            r -= 4;\r\n        } else {\r\n            x >>= 4;\r\n        }\r\n        if (x & 0x3 > 0) {\r\n            r -= 2;\r\n        } else {\r\n            x >>= 2;\r\n        }\r\n        if (x & 0x1 > 0) r -= 1;\r\n    }\r\n}\r\n\r\n// File: @uniswap/lib/contracts/libraries/FixedPoint.sol\r\n\r\npragma solidity >=0.4.0;\r\n\r\n\r\n\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\nlibrary FixedPoint {\r\n    // range: [0, 2**112 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq112x112 {\r\n        uint224 _x;\r\n    }\r\n\r\n    // range: [0, 2**144 - 1]\r\n    // resolution: 1 / 2**112\r\n    struct uq144x112 {\r\n        uint256 _x;\r\n    }\r\n\r\n    uint8 public constant RESOLUTION = 112;\r\n    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\r\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\r\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\r\n        return uq112x112(uint224(x) << RESOLUTION);\r\n    }\r\n\r\n    // encodes a uint144 as a UQ144x112\r\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\r\n        return uq144x112(uint256(x) << RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\r\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\r\n        return uint112(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\r\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\r\n        return uint144(self._x >> RESOLUTION);\r\n    }\r\n\r\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\r\n    // reverts on overflow\r\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\r\n        uint256 z = 0;\r\n        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\r\n        return uq144x112(z);\r\n    }\r\n\r\n    // multiply a UQ112x112 by an int and decode, returning an int\r\n    // reverts on overflow\r\n    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\r\n        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\r\n        require(z < 2**255, 'FixedPoint::muli: overflow');\r\n        return y < 0 ? -int256(z) : int256(z);\r\n    }\r\n\r\n    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\r\n    // lossy\r\n    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\r\n        if (self._x == 0 || other._x == 0) {\r\n            return uq112x112(0);\r\n        }\r\n        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\r\n        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\r\n        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\r\n        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\r\n\r\n        // partial products\r\n        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\r\n        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\r\n        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\r\n        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\r\n\r\n        // so the bit shift does not overflow\r\n        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\r\n\r\n        // this cannot exceed 256 bits, all values are 224 bits\r\n        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\r\n\r\n        // so the cast does not overflow\r\n        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\r\n\r\n        return uq112x112(uint224(sum));\r\n    }\r\n\r\n    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\r\n    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\r\n        require(other._x > 0, 'FixedPoint::divuq: division by zero');\r\n        if (self._x == other._x) {\r\n            return uq112x112(uint224(Q112));\r\n        }\r\n        if (self._x <= uint144(-1)) {\r\n            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\r\n            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\r\n            return uq112x112(uint224(value));\r\n        }\r\n\r\n        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\r\n        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\r\n        return uq112x112(uint224(result));\r\n    }\r\n\r\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\r\n    // can be lossy\r\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\r\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\r\n        if (numerator == 0) return FixedPoint.uq112x112(0);\r\n\r\n        if (numerator <= uint144(-1)) {\r\n            uint256 result = (numerator << RESOLUTION) / denominator;\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        } else {\r\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\r\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\r\n            return uq112x112(uint224(result));\r\n        }\r\n    }\r\n\r\n    // take the reciprocal of a UQ112x112\r\n    // reverts on overflow\r\n    // lossy\r\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\r\n        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\r\n        return uq112x112(uint224(Q224 / self._x));\r\n    }\r\n\r\n    // square root of a UQ112x112\r\n    // lossy between 0/1 and 40 bits\r\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\r\n        if (self._x <= uint144(-1)) {\r\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\r\n        }\r\n\r\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\r\n        safeShiftBits -= safeShiftBits % 2;\r\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\r\n    }\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\n\r\n// library with helper methods for oracles that are concerned with computing average prices\r\nlibrary UniswapV2OracleLibrary {\r\n    using FixedPoint for *;\r\n\r\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\r\n    function currentBlockTimestamp() internal view returns (uint32) {\r\n        return uint32(block.timestamp % 2 ** 32);\r\n    }\r\n\r\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\r\n    function currentCumulativePrices(\r\n        address pair\r\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\r\n        blockTimestamp = currentBlockTimestamp();\r\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\r\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\r\n\r\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\r\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\r\n        if (blockTimestampLast != blockTimestamp) {\r\n            // subtraction overflow is desired\r\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\r\n            // addition overflow is desired\r\n            // counterfactual\r\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\r\n            // counterfactual\r\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interop/UniswapV2.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for Uniswap V2 interoperability.\r\n */\r\ninterface Factory\r\n{\r\n\tfunction getPair(address _tokenA, address _tokenB) external view returns (address _pair);\r\n\tfunction createPair(address _tokenA, address _tokenB) external returns (address _pair);\r\n}\r\n\r\ninterface PoolToken is IERC20\r\n{\r\n}\r\n\r\ninterface Pair is PoolToken\r\n{\r\n\tfunction token0() external view returns (address _token0);\r\n\tfunction token1() external view returns (address _token1);\r\n\tfunction price0CumulativeLast() external view returns (uint256 _price0CumulativeLast);\r\n\tfunction price1CumulativeLast() external view returns (uint256 _price1CumulativeLast);\r\n\tfunction getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\r\n\tfunction mint(address _to) external returns (uint256 _liquidity);\r\n\tfunction sync() external;\r\n}\r\n\r\ninterface Router01\r\n{\r\n\tfunction WETH() external pure returns (address _token);\r\n\tfunction addLiquidity(address _tokenA, address _tokenB, uint256 _amountADesired, uint256 _amountBDesired, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB, uint256 _liquidity);\r\n\tfunction removeLiquidity(address _tokenA, address _tokenB, uint256 _liquidity, uint256 _amountAMin, uint256 _amountBMin, address _to, uint256 _deadline) external returns (uint256 _amountA, uint256 _amountB);\r\n\tfunction swapExactTokensForTokens(uint256 _amountIn, uint256 _amountOutMin, address[] calldata _path, address _to, uint256 _deadline) external returns (uint256[] memory _amounts);\r\n\tfunction swapETHForExactTokens(uint256 _amountOut, address[] calldata _path, address _to, uint256 _deadline) external payable returns (uint256[] memory _amounts);\r\n\tfunction getAmountOut(uint256 _amountIn, uint256 _reserveIn, uint256 _reserveOut) external pure returns (uint256 _amountOut);\r\n}\r\n\r\ninterface Router02 is Router01\r\n{\r\n}\r\n\r\n// File: contracts/GPriceOracle.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library implements a TWAP oracle on Uniswap V2. Based on\r\n * https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/examples/ExampleOracleSimple.sol\r\n */\r\nlibrary GPriceOracle\r\n{\r\n\tusing FixedPoint for FixedPoint.uq112x112;\r\n\tusing FixedPoint for FixedPoint.uq144x112;\r\n\tusing GPriceOracle for GPriceOracle.Self;\r\n\r\n\tuint256 constant DEFAULT_MINIMUM_INTERVAL = 23 hours;\r\n\r\n\tstruct Self {\r\n\t\taddress pair;\r\n\t\tbool use0;\r\n\r\n\t\tuint256 minimumInterval;\r\n\r\n\t\tuint256 priceCumulativeLast;\r\n\t\tuint32 blockTimestampLast;\r\n\t\tFixedPoint.uq112x112 priceAverage;\r\n\t}\r\n\r\n\tfunction init(Self storage _self) public\r\n\t{\r\n\t\t_self.pair = address(0);\r\n\r\n\t\t_self.minimumInterval = DEFAULT_MINIMUM_INTERVAL;\r\n\t}\r\n\r\n\tfunction active(Self storage _self) public view returns (bool _isActive)\r\n\t{\r\n\t\treturn _self._active();\r\n\t}\r\n\r\n\tfunction activate(Self storage _self, address _pair, bool _use0) public\r\n\t{\r\n\t\trequire(!_self._active(), \"already active\");\r\n\t\trequire(_pair != address(0), \"invalid pair\");\r\n\r\n\t\t_self.pair = _pair;\r\n\t\t_self.use0 = _use0;\r\n\r\n\t\t_self.priceCumulativeLast = _use0 ? Pair(_pair).price0CumulativeLast() : Pair(_pair).price1CumulativeLast();\r\n\r\n\t\tuint112 reserve0;\r\n\t\tuint112 reserve1;\r\n\t\t(reserve0, reserve1, _self.blockTimestampLast) = Pair(_pair).getReserves();\r\n\t\trequire(reserve0 > 0 && reserve1 > 0, \"no reserves\"); // ensure that there's liquidity in the pair\r\n\t}\r\n\r\n\tfunction changeMinimumInterval(Self storage _self, uint256 _minimumInterval) public\r\n\t{\r\n\t\trequire(_minimumInterval > 0, \"invalid interval\");\r\n\t\t_self.minimumInterval = _minimumInterval;\r\n\t}\r\n\r\n\tfunction consultLastPrice(Self storage _self, uint256 _amountIn) public view returns (uint256 _amountOut)\r\n\t{\r\n\t\trequire(_self._active(), \"not active\");\r\n\r\n\t\treturn _self.priceAverage.mul(_amountIn).decode144();\r\n\t}\r\n\r\n\tfunction consultCurrentPrice(Self storage _self, uint256 _amountIn) public view returns (uint256 _amountOut)\r\n\t{\r\n\t\trequire(_self._active(), \"not active\");\r\n\r\n\t\t(,, FixedPoint.uq112x112 memory _priceAverage) = _self._estimatePrice(false);\r\n\t\treturn _priceAverage.mul(_amountIn).decode144();\r\n\t}\r\n\r\n\tfunction updatePrice(Self storage _self) public\r\n\t{\r\n\t\trequire(_self._active(), \"not active\");\r\n\r\n\t\t(_self.priceCumulativeLast, _self.blockTimestampLast, _self.priceAverage) = _self._estimatePrice(true);\r\n\t}\r\n\r\n\tfunction _active(Self storage _self) internal view returns (bool _isActive)\r\n\t{\r\n\t\treturn _self.pair != address(0);\r\n\t}\r\n\r\n\tfunction _estimatePrice(Self storage _self, bool _enforceTimeElapsed) internal view returns (uint256 _priceCumulative, uint32 _blockTimestamp, FixedPoint.uq112x112 memory _priceAverage)\r\n\t{\r\n\t\tuint256 _price0Cumulative;\r\n\t\tuint256 _price1Cumulative;\r\n\t\t(_price0Cumulative, _price1Cumulative, _blockTimestamp) = UniswapV2OracleLibrary.currentCumulativePrices(_self.pair);\r\n\t\t_priceCumulative = _self.use0 ? _price0Cumulative : _price1Cumulative;\r\n\r\n\t\tuint32 _timeElapsed = _blockTimestamp - _self.blockTimestampLast; // overflow is desired\r\n\r\n\t\t// ensure that at least one full interval has passed since the last update\r\n\t\tif (_enforceTimeElapsed) {\r\n\t\t\trequire(_timeElapsed >= _self.minimumInterval, \"minimum interval not elapsed\");\r\n\t\t}\r\n\r\n\t\t// overflow is desired, casting never truncates\r\n\t\t// cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\r\n\t\t_priceAverage = FixedPoint.uq112x112(uint224((_priceCumulative - _self.priceCumulativeLast) / _timeElapsed));\r\n\t}\r\n}\r\n\r\n// File: contracts/modules/Math.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library implements auxiliary math definitions.\r\n */\r\nlibrary Math\r\n{\r\n\tfunction _min(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _minAmount)\r\n\t{\r\n\t\treturn _amount1 < _amount2 ? _amount1 : _amount2;\r\n\t}\r\n\r\n\tfunction _max(uint256 _amount1, uint256 _amount2) internal pure returns (uint256 _maxAmount)\r\n\t{\r\n\t\treturn _amount1 > _amount2 ? _amount1 : _amount2;\r\n\t}\r\n}\r\n\r\n// File: contracts/GElasticToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This contract implements an ERC20 compatible elastic token that\r\n * rebases according to the TWAP of another token. Inspired by AMPL and YAM.\r\n */\r\ncontract GElasticToken is ElasticERC20, Ownable, ReentrancyGuard, GElastic\r\n{\r\n\tusing SafeMath for uint256;\r\n\tusing GElasticTokenManager for GElasticTokenManager.Self;\r\n\tusing GPriceOracle for GPriceOracle.Self;\r\n\tusing Executor for Executor.Target[];\r\n\r\n\taddress public immutable override referenceToken;\r\n\r\n\tGElasticTokenManager.Self etm;\r\n\tGPriceOracle.Self oracle;\r\n\r\n\tExecutor.Target[] public targets;\r\n\r\n\tmodifier onlyEOA()\r\n\t{\r\n\t\trequire(tx.origin == _msgSender(), \"not an externally owned account\");\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _referenceToken, uint256 _initialSupply)\r\n\t\tElasticERC20(_name, _symbol) public\r\n\t{\r\n\t\taddress _treasury = msg.sender;\r\n\t\t_setupDecimals(_decimals);\r\n\t\tassert(_referenceToken != address(0));\r\n\t\treferenceToken = _referenceToken;\r\n\t\tetm.init(_treasury);\r\n\t\toracle.init();\r\n\t\t_mint(_treasury, _initialSupply);\r\n\t}\r\n\r\n\tfunction treasury() external view override returns (address _treasury)\r\n\t{\r\n\t\treturn etm.treasury;\r\n\t}\r\n\r\n\tfunction rebaseMinimumDeviation() external view override returns (uint256 _rebaseMinimumDeviation)\r\n\t{\r\n\t\treturn etm.rebaseMinimumDeviation;\r\n\t}\r\n\r\n\tfunction rebaseDampeningFactor() external view override returns (uint256 _rebaseDampeningFactor)\r\n\t{\r\n\t\treturn etm.rebaseDampeningFactor;\r\n\t}\r\n\r\n\tfunction rebaseTreasuryMintPercent() external view override returns (uint256 _rebaseTreasuryMintPercent)\r\n\t{\r\n\t\treturn etm.rebaseTreasuryMintPercent;\r\n\t}\r\n\r\n\tfunction rebaseTimingParameters() external view override returns (uint256 _rebaseMinimumInterval, uint256 _rebaseWindowOffset, uint256 _rebaseWindowLength)\r\n\t{\r\n\t\treturn (etm.rebaseMinimumInterval, etm.rebaseWindowOffset, etm.rebaseWindowLength);\r\n\t}\r\n\r\n\tfunction rebaseAvailable() external view override returns (bool _rebaseAvailable)\r\n\t{\r\n\t\treturn etm.rebaseAvailable();\r\n\t}\r\n\r\n\tfunction rebaseActive() external view override returns (bool _rebaseActive)\r\n\t{\r\n\t\treturn etm.rebaseActive;\r\n\t}\r\n\r\n\tfunction lastRebaseTime() external view override returns (uint256 _lastRebaseTime)\r\n\t{\r\n\t\treturn etm.lastRebaseTime;\r\n\t}\r\n\r\n\tfunction epoch() external view override returns (uint256 _epoch)\r\n\t{\r\n\t\treturn etm.epoch;\r\n\t}\r\n\r\n\tfunction lastExchangeRate() external view override returns (uint256 _exchangeRate)\r\n\t{\r\n\t\treturn oracle.consultLastPrice(10 ** uint256(decimals()));\r\n\t}\r\n\r\n\tfunction currentExchangeRate() external view override returns (uint256 _exchangeRate)\r\n\t{\r\n\t\treturn oracle.consultCurrentPrice(10 ** uint256(decimals()));\r\n\t}\r\n\r\n\tfunction pair() external view override returns (address _pair)\r\n\t{\r\n\t\treturn oracle.pair;\r\n\t}\r\n\r\n\tfunction rebase() external override onlyEOA nonReentrant\r\n\t{\r\n\t\toracle.updatePrice();\r\n\r\n\t\tuint256 _exchangeRate = oracle.consultLastPrice(10 ** uint256(decimals()));\r\n\r\n\t\tuint256 _totalSupply = totalSupply();\r\n\r\n\t\t(uint256 _delta, bool _positive, uint256 _mintAmount) = etm.rebase(_exchangeRate, _totalSupply);\r\n\r\n\t\t_rebase(etm.epoch, _delta, _positive);\r\n\r\n\t\tif (_mintAmount > 0) {\r\n\t\t\t_mint(etm.treasury, _mintAmount);\r\n\t\t}\r\n\r\n\t\t// updates cached reserve balances wherever necessary\r\n\t\tPair(oracle.pair).sync();\r\n\t\ttargets.executeAll();\r\n\t}\r\n\r\n\tfunction activateOracle(address _pair) external override onlyOwner nonReentrant\r\n\t{\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\taddress _token1 = Pair(_pair).token1();\r\n\t\trequire(_token0 == address(this) && _token1 == referenceToken || _token1 == address(this) && _token0 == referenceToken, \"invalid pair\");\r\n\t\toracle.activate(_pair, _token0 == address(this));\r\n\t}\r\n\r\n\tfunction activateRebase() external override onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(oracle.active(), \"not available\");\r\n\t\tetm.activateRebase();\r\n\t}\r\n\r\n\tfunction setTreasury(address _newTreasury) external override onlyOwner nonReentrant\r\n\t{\r\n\t\taddress _oldTreasury = etm.treasury;\r\n\t\tetm.setTreasury(_newTreasury);\r\n\t\temit ChangeTreasury(_oldTreasury, _newTreasury);\r\n\t}\r\n\r\n\tfunction setRebaseMinimumDeviation(uint256 _newRebaseMinimumDeviation) external override onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _oldRebaseMinimumDeviation = etm.rebaseMinimumDeviation;\r\n\t\tetm.setRebaseMinimumDeviation(_newRebaseMinimumDeviation);\r\n\t\temit ChangeRebaseMinimumDeviation(_oldRebaseMinimumDeviation, _newRebaseMinimumDeviation);\r\n\t}\r\n\r\n\tfunction setRebaseDampeningFactor(uint256 _newRebaseDampeningFactor) external override onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _oldRebaseDampeningFactor = etm.rebaseDampeningFactor;\r\n\t\tetm.setRebaseDampeningFactor(_newRebaseDampeningFactor);\r\n\t\temit ChangeRebaseDampeningFactor(_oldRebaseDampeningFactor, _newRebaseDampeningFactor);\r\n\t}\r\n\r\n\tfunction setRebaseTreasuryMintPercent(uint256 _newRebaseTreasuryMintPercent) external override onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _oldRebaseTreasuryMintPercent = etm.rebaseTreasuryMintPercent;\r\n\t\tetm.setRebaseTreasuryMintPercent(_newRebaseTreasuryMintPercent);\r\n\t\temit ChangeRebaseTreasuryMintPercent(_oldRebaseTreasuryMintPercent, _newRebaseTreasuryMintPercent);\r\n\t}\r\n\r\n\tfunction setRebaseTimingParameters(uint256 _newRebaseMinimumInterval, uint256 _newRebaseWindowOffset, uint256 _newRebaseWindowLength) external override onlyOwner nonReentrant\r\n\t{\r\n\t\tuint256 _oldRebaseMinimumInterval = etm.rebaseMinimumInterval;\r\n\t\tuint256 _oldRebaseWindowOffset = etm.rebaseWindowOffset;\r\n\t\tuint256 _oldRebaseWindowLength = etm.rebaseWindowLength;\r\n\t\tetm.setRebaseTimingParameters(_newRebaseMinimumInterval, _newRebaseWindowOffset, _newRebaseWindowLength);\r\n\t\toracle.changeMinimumInterval(_newRebaseMinimumInterval.sub(_newRebaseWindowLength));\r\n\t\temit ChangeRebaseTimingParameters(_oldRebaseMinimumInterval, _oldRebaseWindowOffset, _oldRebaseWindowLength, _newRebaseMinimumInterval, _newRebaseWindowOffset, _newRebaseWindowLength);\r\n\t}\r\n\r\n\tfunction addPostRebaseTarget(address _to, bytes memory _data) external override onlyOwner nonReentrant\r\n\t{\r\n\t\t_addPostRebaseTarget(_to, _data);\r\n\t}\r\n\r\n\tfunction removePostRebaseTarget(uint256 _index) external override onlyOwner nonReentrant\r\n\t{\r\n\t\t_removePostRebaseTarget(_index);\r\n\t}\r\n\r\n\tfunction addBalancerPostRebaseTarget(address _pool) external onlyOwner nonReentrant\r\n\t{\r\n\t\t_addPostRebaseTarget(_pool, abi.encodeWithSignature(\"gulp(address)\", address(this)));\r\n\t}\r\n\r\n\tfunction addUniswapV2PostRebaseTarget(address _pair) external onlyOwner nonReentrant\r\n\t{\r\n\t\t_addPostRebaseTarget(_pair, abi.encodeWithSignature(\"sync()\"));\r\n\t}\r\n\r\n\tfunction _addPostRebaseTarget(address _to, bytes memory _data) internal\r\n\t{\r\n\t\ttargets.addTarget(_to, _data);\r\n\t\temit AddPostRebaseTarget(_to, _data);\r\n\t}\r\n\r\n\tfunction _removePostRebaseTarget(uint256 _index) internal\r\n\t{\r\n\t\tExecutor.Target storage _target = targets[_index];\r\n\t\taddress _to = _target.to;\r\n\t\tbytes memory _data = _target.data;\r\n\t\ttargets.removeTarget(_index);\r\n\t\temit RemovePostRebaseTarget(_to, _data);\r\n\t}\r\n\r\n\tfunction _rebase(uint256 _epoch, uint256 _delta, bool _positive) internal virtual\r\n\t{\r\n\t\tuint256 _oldScalingFactor = scalingFactor();\r\n\t\tuint256 _newScalingFactor;\r\n\t\tif (_delta == 0) {\r\n\t\t\t_newScalingFactor = _oldScalingFactor;\r\n\t\t} else {\r\n\t\t\tif (_positive) {\r\n\t\t\t\t_newScalingFactor = _oldScalingFactor.mul(uint256(1e18).add(_delta)).div(1e18);\r\n\t\t\t} else {\r\n\t\t\t\t_newScalingFactor = _oldScalingFactor.mul(uint256(1e18).sub(_delta)).div(1e18);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (_newScalingFactor > _oldScalingFactor) {\r\n\t\t\t_newScalingFactor = Math._min(_newScalingFactor, maxScalingFactor());\r\n\t\t}\r\n\t\t_setScalingFactor(_newScalingFactor);\r\n\t\temit Rebase(_epoch, _oldScalingFactor, _newScalingFactor);\r\n\t}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n// File: contracts/GLPMining.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This interface exposes the base functionality of GLPMiningToken.\r\n */\r\ninterface GLPMining\r\n{\r\n\t// view functions\r\n\tfunction reserveToken() external view returns (address _reserveToken);\r\n\tfunction rewardsToken() external view returns (address _rewardsToken);\r\n\tfunction treasury() external view returns (address _treasury);\r\n\tfunction performanceFee() external view returns (uint256 _performanceFee);\r\n\tfunction rewardRatePerWeek() external view returns (uint256 _rewardRatePerWeek);\r\n\tfunction calcSharesFromCost(uint256 _cost) external view returns (uint256 _shares);\r\n\tfunction calcCostFromShares(uint256 _shares) external view returns (uint256 _cost);\r\n\tfunction calcSharesFromTokenAmount(address _token, uint256 _amount) external view returns (uint256 _shares);\r\n\tfunction calcTokenAmountFromShares(address _token, uint256 _shares) external view returns (uint256 _amount);\r\n\tfunction totalReserve() external view returns (uint256 _totalReserve);\r\n\tfunction rewardInfo() external view returns (uint256 _lockedReward, uint256 _unlockedReward, uint256 _rewardPerBlock);\r\n\tfunction pendingFees() external view returns (uint256 _feeShares);\r\n\r\n\t// open functions\r\n\tfunction deposit(uint256 _cost) external;\r\n\tfunction withdraw(uint256 _shares) external;\r\n\tfunction depositToken(address _token, uint256 _amount, uint256 _minShares) external;\r\n\tfunction withdrawToken(address _token, uint256 _shares, uint256 _minAmount) external;\r\n\tfunction gulpRewards(uint256 _minCost) external;\r\n\tfunction gulpFees() external;\r\n\r\n\t// priviledged functions\r\n\tfunction setTreasury(address _treasury) external;\r\n\tfunction setPerformanceFee(uint256 _performanceFee) external;\r\n\tfunction setRewardRatePerWeek(uint256 _rewardRatePerWeek) external;\r\n\r\n\t// emitted events\r\n\tevent ChangeTreasury(address _oldTreasury, address _newTreasury);\r\n\tevent ChangePerformanceFee(uint256 _oldPerformanceFee, uint256 _newPerformanceFee);\r\n\tevent ChangeRewardRatePerWeek(uint256 _oldRewardRatePerWeek, uint256 _newRewardRatePerWeek);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/modules/Transfers.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts ERC-20 operations in the context of the current\r\n * contract.\r\n */\r\nlibrary Transfers\r\n{\r\n\tusing SafeERC20 for IERC20;\r\n\r\n\t/**\r\n\t * @dev Retrieves a given ERC-20 token balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @return _balance The current contract balance of the given ERC-20 token.\r\n\t */\r\n\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\r\n\t{\r\n\t\treturn IERC20(_token).balanceOf(address(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Allows a spender to access a given ERC-20 balance for the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The spender address.\r\n\t * @param _amount The exact spending allowance amount.\r\n\t */\r\n\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tuint256 _allowance = IERC20(_token).allowance(address(this), _to);\r\n\t\tif (_allowance > _amount) {\r\n\t\t\tIERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\r\n\t\t}\r\n\t\telse\r\n\t\tif (_allowance < _amount) {\r\n\t\t\tIERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount into the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _from The source address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Transfer a given ERC-20 token amount from the current contract.\r\n\t * @param _token An ERC-20 compatible token address.\r\n\t * @param _to The target address.\r\n\t * @param _amount The amount to be transferred.\r\n\t */\r\n\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\r\n\t{\r\n\t\tif (_amount == 0) return;\r\n\t\tIERC20(_token).safeTransfer(_to, _amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/network/$.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev This library is provided for convenience. It is the single source for\r\n *      the current network and all related hardcoded contract addresses.\r\n */\r\nlibrary $\r\n{\r\n\taddress constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\r\n\r\n\taddress constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n\taddress constant UniswapV2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\r\n\r\n\taddress constant UniswapV2_ROUTER02 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n}\r\n\r\n// File: contracts/modules/UniswapV2LiquidityPoolAbstraction.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev This library provides functionality to facilitate adding/removing\r\n * single-asset liquidity to/from a Uniswap V2 pool.\r\n */\r\nlibrary UniswapV2LiquidityPoolAbstraction\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\tfunction _estimateJoinPool(address _pair, address _token, uint256 _amount) internal view returns (uint256 _shares)\r\n\t{\r\n\t\tif (_amount == 0) return 0;\r\n\t\taddress _router = $.UniswapV2_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\r\n\t\tuint256 _balance = _token == _token0 ? _reserve0 : _reserve1;\r\n\t\tuint256 _otherBalance = _token == _token0 ? _reserve1 : _reserve0;\r\n\t\tuint256 _totalSupply = Pair(_pair).totalSupply();\r\n\t\tuint256 _swapAmount = _calcSwapOutputFromInput(_balance, _amount);\r\n\t\tif (_swapAmount == 0) _swapAmount = _amount / 2;\r\n\t\tuint256 _leftAmount = _amount.sub(_swapAmount);\r\n\t\tuint256 _otherAmount = Router02(_router).getAmountOut(_swapAmount, _balance, _otherBalance);\r\n\t\t_shares = Math._min(_totalSupply.mul(_leftAmount) / _balance.add(_swapAmount), _totalSupply.mul(_otherAmount) / _otherBalance.sub(_otherAmount));\r\n\t\treturn _shares;\r\n\t}\r\n\r\n\tfunction _estimateExitPool(address _pair, address _token, uint256 _shares) internal view returns (uint256 _amount)\r\n\t{\r\n\t\tif (_shares == 0) return 0;\r\n\t\taddress _router = $.UniswapV2_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\r\n\t\tuint256 _balance = _token == _token0 ? _reserve0 : _reserve1;\r\n\t\tuint256 _otherBalance = _token == _token0 ? _reserve1 : _reserve0;\r\n\t\tuint256 _totalSupply = Pair(_pair).totalSupply();\r\n\t\tuint256 _baseAmount = _balance.mul(_shares) / _totalSupply;\r\n\t\tuint256 _swapAmount = _otherBalance.mul(_shares) / _totalSupply;\r\n\t\tuint256 _additionalAmount = Router02(_router).getAmountOut(_swapAmount, _otherBalance.sub(_swapAmount), _balance.sub(_baseAmount));\r\n\t\t_amount = _baseAmount.add(_additionalAmount);\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\tfunction _joinPool(address _pair, address _token, uint256 _amount, uint256 _minShares) internal returns (uint256 _shares)\r\n\t{\r\n\t\tif (_amount == 0) return 0;\r\n\t\taddress _router = $.UniswapV2_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\taddress _token1 = Pair(_pair).token1();\r\n\t\taddress _otherToken = _token == _token0 ? _token1 : _token0;\r\n\t\t(uint256 _reserve0, uint256 _reserve1,) = Pair(_pair).getReserves();\r\n\t\tuint256 _swapAmount = _calcSwapOutputFromInput(_token == _token0 ? _reserve0 : _reserve1, _amount);\r\n\t\tif (_swapAmount == 0) _swapAmount = _amount / 2;\r\n\t\tuint256 _leftAmount = _amount.sub(_swapAmount);\r\n\t\tTransfers._approveFunds(_token, _router, _amount);\r\n\t\taddress[] memory _path = new address[](2);\r\n\t\t_path[0] = _token;\r\n\t\t_path[1] = _otherToken;\r\n\t\tuint256 _otherAmount = Router02(_router).swapExactTokensForTokens(_swapAmount, 1, _path, address(this), uint256(-1))[1];\r\n\t\tTransfers._approveFunds(_otherToken, _router, _otherAmount);\r\n\t\t(,,_shares) = Router02(_router).addLiquidity(_token, _otherToken, _leftAmount, _otherAmount, 1, 1, address(this), uint256(-1));\r\n\t\trequire(_shares >= _minShares, \"high slippage\");\r\n\t\treturn _shares;\r\n\t}\r\n\r\n\tfunction _exitPool(address _pair, address _token, uint256 _shares, uint256 _minAmount) internal returns (uint256 _amount)\r\n\t{\r\n\t\tif (_shares == 0) return 0;\r\n\t\taddress _router = $.UniswapV2_ROUTER02;\r\n\t\taddress _token0 = Pair(_pair).token0();\r\n\t\taddress _token1 = Pair(_pair).token1();\r\n\t\taddress _otherToken = _token == _token0 ? _token1 : _token0;\r\n\t\tTransfers._approveFunds(_pair, _router, _shares);\r\n\t\t(uint256 _baseAmount, uint256 _swapAmount) = Router02(_router).removeLiquidity(_token, _otherToken, _shares, 1, 1, address(this), uint256(-1));\r\n\t\tTransfers._approveFunds(_otherToken, _router, _swapAmount);\r\n\t\taddress[] memory _path = new address[](2);\r\n\t\t_path[0] = _otherToken;\r\n\t\t_path[1] = _token;\r\n\t\tuint256 _additionalAmount = Router02(_router).swapExactTokensForTokens(_swapAmount, 1, _path, address(this), uint256(-1))[1];\r\n\t\t_amount = _baseAmount.add(_additionalAmount);\r\n\t        require(_amount >= _minAmount, \"high slippage\");\r\n\t\treturn _amount;\r\n\t}\r\n\r\n\tfunction _calcSwapOutputFromInput(uint256 _reserveAmount, uint256 _inputAmount) private pure returns (uint256)\r\n\t{\r\n\t\treturn Babylonian.sqrt(_reserveAmount.mul(_inputAmount.mul(3988000).add(_reserveAmount.mul(3988009)))).sub(_reserveAmount.mul(1997)) / 1994;\r\n\t}\r\n}\r\n\r\n// File: contracts/GLPMiningToken.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice This contract implements liquidity mining for staking Uniswap V2\r\n * shares.\r\n */\r\ncontract GLPMiningToken is ERC20, Ownable, ReentrancyGuard, GLPMining\r\n{\r\n\tuint256 constant MAXIMUM_PERFORMANCE_FEE = 50e16; // 50%\r\n\r\n\tuint256 constant BLOCKS_PER_WEEK = 7 days / uint256(13 seconds);\r\n\tuint256 constant DEFAULT_PERFORMANCE_FEE = 10e16; // 10%\r\n\tuint256 constant DEFAULT_REWARD_RATE_PER_WEEK = 10e16; // 10%\r\n\r\n\taddress public immutable override reserveToken;\r\n\taddress public immutable override rewardsToken;\r\n\r\n\taddress public override treasury;\r\n\r\n\tuint256 public override performanceFee = DEFAULT_PERFORMANCE_FEE;\r\n\tuint256 public override rewardRatePerWeek = DEFAULT_REWARD_RATE_PER_WEEK;\r\n\r\n\tuint256 lastContractBlock = block.number;\r\n\tuint256 lastRewardPerBlock = 0;\r\n\tuint256 lastUnlockedReward = 0;\r\n\tuint256 lastLockedReward = 0;\r\n\r\n\tuint256 lastTotalSupply = 1;\r\n\tuint256 lastTotalReserve = 1;\r\n\r\n\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, address _reserveToken, address _rewardsToken)\r\n\t\tERC20(_name, _symbol) public\r\n\t{\r\n\t\taddress _treasury = msg.sender;\r\n\t\t_setupDecimals(_decimals);\r\n\t\tassert(_reserveToken != address(0));\r\n\t\tassert(_rewardsToken != address(0));\r\n\t\tassert(_reserveToken != _rewardsToken);\r\n\t\treserveToken = _reserveToken;\r\n\t\trewardsToken = _rewardsToken;\r\n\t\ttreasury = _treasury;\r\n\t\t// just after creation it must transfer 1 wei from reserveToken\r\n\t\t// into this contract\r\n\t\t// this must be performed manually because we cannot approve\r\n\t\t// the spending by this contract before it exists\r\n\t\t// Transfers._pullFunds(_reserveToken, _from, 1);\r\n\t\t_mint(address(this), 1);\r\n\t}\r\n\r\n\tfunction calcSharesFromCost(uint256 _cost) public view override returns (uint256 _shares)\r\n\t{\r\n\t\treturn _cost.mul(totalSupply()).div(totalReserve());\r\n\t}\r\n\r\n\tfunction calcCostFromShares(uint256 _shares) public view override returns (uint256 _cost)\r\n\t{\r\n\t\treturn _shares.mul(totalReserve()).div(totalSupply());\r\n\t}\r\n\r\n\tfunction calcSharesFromTokenAmount(address _token, uint256 _amount) external view override returns (uint256 _shares)\r\n\t{\r\n\t\tuint256 _cost = UniswapV2LiquidityPoolAbstraction._estimateJoinPool(reserveToken, _token, _amount);\r\n\t\treturn calcSharesFromCost(_cost);\r\n\t}\r\n\r\n\tfunction calcTokenAmountFromShares(address _token, uint256 _shares) external view override returns (uint256 _amount)\r\n\t{\r\n\t\tuint256 _cost = calcCostFromShares(_shares);\r\n\t\treturn UniswapV2LiquidityPoolAbstraction._estimateExitPool(reserveToken, _token, _cost);\r\n\t}\r\n\r\n\tfunction totalReserve() public view override returns (uint256 _totalReserve)\r\n\t{\r\n\t\treturn Transfers._getBalance(reserveToken);\r\n\t}\r\n\r\n\tfunction rewardInfo() external view override returns (uint256 _lockedReward, uint256 _unlockedReward, uint256 _rewardPerBlock)\r\n\t{\r\n\t\t(, _rewardPerBlock, _unlockedReward, _lockedReward) = _calcCurrentRewards();\r\n\t\treturn (_lockedReward, _unlockedReward, _rewardPerBlock);\r\n\t}\r\n\r\n\tfunction pendingFees() external view override returns (uint256 _feeShares)\r\n\t{\r\n\t\treturn _calcFees();\r\n\t}\r\n\r\n\tfunction deposit(uint256 _cost) external override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _shares = calcSharesFromCost(_cost);\r\n\t\tTransfers._pullFunds(reserveToken, _from, _cost);\r\n\t\t_mint(_from, _shares);\r\n\t}\r\n\r\n\tfunction withdraw(uint256 _shares) external override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _cost = calcCostFromShares(_shares);\r\n\t\tTransfers._pushFunds(reserveToken, _from, _cost);\r\n\t\t_burn(_from, _shares);\r\n\t}\r\n\r\n\tfunction depositToken(address _token, uint256 _amount, uint256 _minShares) external override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _minCost = calcCostFromShares(_minShares);\r\n\t\tTransfers._pullFunds(_token, _from, _amount);\r\n\t\tuint256 _cost = UniswapV2LiquidityPoolAbstraction._joinPool(reserveToken, _token, _amount, _minCost);\r\n\t\tuint256 _shares = _cost.mul(totalSupply()).div(totalReserve().sub(_cost));\r\n\t\t_mint(_from, _shares);\r\n\t}\r\n\r\n\tfunction withdrawToken(address _token, uint256 _shares, uint256 _minAmount) external override nonReentrant\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _cost = calcCostFromShares(_shares);\r\n\t\tuint256 _amount = UniswapV2LiquidityPoolAbstraction._exitPool(reserveToken, _token, _cost, _minAmount);\r\n\t\tTransfers._pushFunds(_token, _from, _amount);\r\n\t\t_burn(_from, _shares);\r\n\t}\r\n\r\n\tfunction gulpRewards(uint256 _minCost) external override nonReentrant\r\n\t{\r\n\t\t_updateRewards();\r\n\t\tUniswapV2LiquidityPoolAbstraction._joinPool(reserveToken, rewardsToken, lastUnlockedReward, _minCost);\r\n\t\tlastUnlockedReward = 0;\r\n\t}\r\n\r\n\tfunction gulpFees() external override nonReentrant\r\n\t{\r\n\t\tuint256 _feeShares = _calcFees();\r\n\t\tif (_feeShares > 0) {\r\n\t\t\tlastTotalSupply = totalSupply();\r\n\t\t\tlastTotalReserve = totalReserve();\r\n\t\t\t_mint(treasury, _feeShares);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setTreasury(address _newTreasury) external override onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newTreasury != address(0), \"invalid address\");\r\n\t\taddress _oldTreasury = treasury;\r\n\t\ttreasury = _newTreasury;\r\n\t\temit ChangeTreasury(_oldTreasury, _newTreasury);\r\n\t}\r\n\r\n\tfunction setPerformanceFee(uint256 _newPerformanceFee) external override onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newPerformanceFee <= MAXIMUM_PERFORMANCE_FEE, \"invalid rate\");\r\n\t\tuint256 _oldPerformanceFee = performanceFee;\r\n\t\tperformanceFee = _newPerformanceFee;\r\n\t\temit ChangePerformanceFee(_oldPerformanceFee, _newPerformanceFee);\r\n\t}\r\n\r\n\tfunction setRewardRatePerWeek(uint256 _newRewardRatePerWeek) external override onlyOwner nonReentrant\r\n\t{\r\n\t\trequire(_newRewardRatePerWeek <= 1e18, \"invalid rate\");\r\n\t\tuint256 _oldRewardRatePerWeek = rewardRatePerWeek;\r\n\t\trewardRatePerWeek = _newRewardRatePerWeek;\r\n\t\temit ChangeRewardRatePerWeek(_oldRewardRatePerWeek, _newRewardRatePerWeek);\r\n\t}\r\n\r\n\tfunction _updateRewards() internal\r\n\t{\r\n\t\t(lastContractBlock, lastRewardPerBlock, lastUnlockedReward, lastLockedReward) = _calcCurrentRewards();\r\n\t\tuint256 _balanceReward = Transfers._getBalance(rewardsToken);\r\n\t\tuint256 _totalReward = lastLockedReward.add(lastUnlockedReward);\r\n\t\tif (_balanceReward > _totalReward) {\r\n\t\t\tuint256 _newLockedReward = _balanceReward.sub(_totalReward);\r\n\t\t\tuint256 _newRewardPerBlock = _calcRewardPerBlock(_newLockedReward);\r\n\t\t\tlastRewardPerBlock = lastRewardPerBlock.add(_newRewardPerBlock);\r\n\t\t\tlastLockedReward = lastLockedReward.add(_newLockedReward);\r\n\t\t}\r\n\t\telse\r\n\t\tif (_balanceReward < _totalReward) {\r\n\t\t\tuint256 _removedLockedReward = _totalReward.sub(_balanceReward);\r\n\t\t\tif (_removedLockedReward >= lastLockedReward) {\r\n\t\t\t\t_removedLockedReward = lastLockedReward;\r\n\t\t\t}\r\n\t\t\tuint256 _removedRewardPerBlock = _calcRewardPerBlock(_removedLockedReward);\r\n\t\t\tif (_removedLockedReward >= lastLockedReward) {\r\n\t\t\t\t_removedRewardPerBlock = lastRewardPerBlock;\r\n\t\t\t}\r\n\t\t\tlastRewardPerBlock = lastRewardPerBlock.sub(_removedRewardPerBlock);\r\n\t\t\tlastLockedReward = lastLockedReward.sub(_removedLockedReward);\r\n\t\t\tlastUnlockedReward = _balanceReward.sub(lastLockedReward);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _calcFees() internal view returns (uint256 _feeShares)\r\n\t{\r\n\t\tuint256 _oldTotalSupply = lastTotalSupply;\r\n\t\tuint256 _oldTotalReserve = lastTotalReserve;\r\n\r\n\t\tuint256 _newTotalSupply = totalSupply();\r\n\t\tuint256 _newTotalReserve = totalReserve();\r\n\r\n\t\t// calculates the profit using the following formula\r\n\t\t// ((P1 - P0) * S1 * f) / P1\r\n\t\t// where P1 = R1 / S1 and P0 = R0 / S0\r\n\t\tuint256 _positive = _oldTotalSupply.mul(_newTotalReserve);\r\n\t\tuint256 _negative = _newTotalSupply.mul(_oldTotalReserve);\r\n\t\tif (_positive > _negative) {\r\n\t\t\tuint256 _profitCost = _positive.sub(_negative).div(_oldTotalSupply);\r\n\t\t\tuint256 _feeCost = _profitCost.mul(performanceFee).div(1e18);\r\n\t\t\treturn calcSharesFromCost(_feeCost);\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction _calcCurrentRewards() internal view returns (uint256 _currentContractBlock, uint256 _currentRewardPerBlock, uint256 _currentUnlockedReward, uint256 _currentLockedReward)\r\n\t{\r\n\t\tuint256 _contractBlock = lastContractBlock;\r\n\t\tuint256 _rewardPerBlock = lastRewardPerBlock;\r\n\t\tuint256 _unlockedReward = lastUnlockedReward;\r\n\t\tuint256 _lockedReward = lastLockedReward;\r\n\t\tif (_contractBlock < block.number) {\r\n\t\t\tuint256 _week = _contractBlock.div(BLOCKS_PER_WEEK);\r\n\t\t\tuint256 _offset = _contractBlock.mod(BLOCKS_PER_WEEK);\r\n\r\n\t\t\t_contractBlock = block.number;\r\n\t\t\tuint256 _currentWeek = _contractBlock.div(BLOCKS_PER_WEEK);\r\n\t\t\tuint256 _currentOffset = _contractBlock.mod(BLOCKS_PER_WEEK);\r\n\r\n\t\t\twhile (_week < _currentWeek) {\r\n\t\t\t\tuint256 _blocks = BLOCKS_PER_WEEK.sub(_offset);\r\n\t\t\t\tuint256 _reward = _blocks.mul(_rewardPerBlock);\r\n\t\t\t\t_unlockedReward = _unlockedReward.add(_reward);\r\n\t\t\t\t_lockedReward = _lockedReward.sub(_reward);\r\n\t\t\t\t_rewardPerBlock = _calcRewardPerBlock(_lockedReward);\r\n\t\t\t\t_week++;\r\n\t\t\t\t_offset = 0;\r\n\t\t\t}\r\n\r\n\t\t\tuint256 _blocks = _currentOffset.sub(_offset);\r\n\t\t\tuint256 _reward = _blocks.mul(_rewardPerBlock);\r\n\t\t\t_unlockedReward = _unlockedReward.add(_reward);\r\n\t\t\t_lockedReward = _lockedReward.sub(_reward);\r\n\t\t}\r\n\t\treturn (_contractBlock, _rewardPerBlock, _unlockedReward, _lockedReward);\r\n\t}\r\n\r\n\tfunction _calcRewardPerBlock(uint256 _lockedReward) internal view returns (uint256 _rewardPerBlock)\r\n\t{\r\n\t\treturn _lockedReward.mul(rewardRatePerWeek).div(1e18).div(BLOCKS_PER_WEEK);\r\n\t}\r\n}\r\n\r\n// File: contracts/interop/WrappedEther.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @dev Minimal set of declarations for WETH interoperability.\r\n */\r\ninterface WETH is IERC20\r\n{\r\n\tfunction deposit() external payable;\r\n\tfunction withdraw(uint256 _amount) external;\r\n}\r\n\r\n// File: contracts/modules/Wrapping.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This library abstracts Wrapped Ether operations.\r\n */\r\nlibrary Wrapping\r\n{\r\n\t/**\r\n\t * @dev Sends some ETH to the Wrapped Ether contract in exchange for WETH.\r\n\t * @param _amount The amount of ETH to be wrapped.\r\n\t */\r\n\tfunction _wrap(uint256 _amount) internal\r\n\t{\r\n\t\tWETH($.WETH).deposit{value: _amount}();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Receives some ETH from the Wrapped Ether contract in exchange for WETH.\r\n\t *      Note that the contract using this library function must declare a\r\n\t *      payable receive/fallback function.\r\n\t * @param _amount The amount of ETH to be unwrapped.\r\n\t */\r\n\tfunction _unwrap(uint256 _amount) internal\r\n\t{\r\n\t\tWETH($.WETH).withdraw(_amount);\r\n\t}\r\n}\r\n\r\n// File: contracts/GEtherBridge.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\ncontract GEtherBridge\r\n{\r\n\tfunction deposit(address _stakeToken, uint256 _minShares) external payable\r\n\t{\r\n\t\taddress _from = msg.sender;\r\n\t\tuint256 _amount = msg.value;\r\n\t\taddress _token = $.WETH;\r\n\t\tWrapping._wrap(_amount);\r\n\t\tTransfers._approveFunds(_token, _stakeToken, _amount);\r\n\t\tGLPMining(_stakeToken).depositToken(_token, _amount, _minShares);\r\n\t\tuint256 _shares = Transfers._getBalance(_stakeToken);\r\n\t\tTransfers._pushFunds(_stakeToken, _from, _shares);\r\n\t}\r\n\r\n\tfunction withdraw(address _stakeToken, uint256 _shares, uint256 _minAmount) external\r\n\t{\r\n\t\taddress payable _from = msg.sender;\r\n\t\taddress _token = $.WETH;\r\n\t\tTransfers._pullFunds(_stakeToken, _from, _shares);\r\n\t\tGLPMining(_stakeToken).withdrawToken(_token, _shares, _minAmount);\r\n\t\tuint256 _amount = Transfers._getBalance(_token);\r\n\t\tWrapping._unwrap(_amount);\r\n\t\t_from.transfer(_amount);\r\n\t}\r\n\r\n\treceive() external payable {} // not to be used directly\r\n}\r\n\r\n// File: contracts/GTokens.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice Definition of rAAVE. It is an elastic supply token that uses AAVE\r\n * as reference token.\r\n */\r\ncontract rAAVE is GElasticToken\r\n{\r\n\tconstructor (uint256 _initialSupply)\r\n\t\tGElasticToken(\"rebase AAVE\", \"rAAVE\", 18, $.AAVE, _initialSupply) public\r\n\t{\r\n\t}\r\n}\r\n\r\n/**\r\n * @notice Definition of stkAAVE/rAAVE. It provides mining or reward rAAVE when\r\n * providing liquidity to the AAVE/rAAVE pool.\r\n */\r\ncontract stkAAVE_rAAVE is GLPMiningToken\r\n{\r\n\tconstructor (address _AAVE_rAAVE, address _rAAVE)\r\n\t\tGLPMiningToken(\"staked AAVE/rAAVE\", \"stkAAVE/rAAVE\", 18, _AAVE_rAAVE, _rAAVE) public\r\n\t{\r\n\t}\r\n}\r\n\r\n/**\r\n * @notice Definition of stkGRO/rAAVE. It provides mining or reward rAAVE when\r\n * providing liquidity to the GRO/rAAVE pool.\r\n */\r\ncontract stkGRO_rAAVE is GLPMiningToken\r\n{\r\n\tconstructor (address _GRO_rAAVE, address _rAAVE)\r\n\t\tGLPMiningToken(\"staked GRO/rAAVE\", \"stkGRO/rAAVE\", 18, _GRO_rAAVE, _rAAVE) public\r\n\t{\r\n\t}\r\n}\r\n\r\n/**\r\n * @notice Definition of stkETH/rAAVE. It provides mining or reward rAAVE when\r\n * providing liquidity to the WETH/rAAVE pool.\r\n */\r\ncontract stkETH_rAAVE is GLPMiningToken\r\n{\r\n\tconstructor (address _ETH_rAAVE, address _rAAVE)\r\n\t\tGLPMiningToken(\"staked ETH/rAAVE\", \"stkETH/rAAVE\", 18, _ETH_rAAVE, _rAAVE) public\r\n\t{\r\n\t}\r\n}\r\n\r\n// File: contracts/GTokenRegistry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n/**\r\n * @notice This contract allows external agents to detect when new GTokens\r\n *         are deployed to the network.\r\n */\r\ncontract GTokenRegistry is Ownable\r\n{\r\n\t/**\r\n\t * @notice Registers a new gToken.\r\n\t * @param _growthToken The address of the token being registered.\r\n\t * @param _oldGrowthToken The address of the token implementation\r\n\t *                        being replaced, for upgrades, or 0x0 0therwise.\r\n\t */\r\n\tfunction registerNewToken(address _growthToken, address _oldGrowthToken) public onlyOwner\r\n\t{\r\n\t\temit NewToken(_growthToken, _oldGrowthToken);\r\n\t}\r\n\r\n\tevent NewToken(address indexed _growthToken, address indexed _oldGrowthToken);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_GRO_rAAVE\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rAAVE\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPerformanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"ChangePerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldRewardRatePerWeek\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newRewardRatePerWeek\",\"type\":\"uint256\"}],\"name\":\"ChangeRewardRatePerWeek\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"ChangeTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calcCostFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"calcSharesFromCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcSharesFromTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calcTokenAmountFromShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minShares\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gulpFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCost\",\"type\":\"uint256\"}],\"name\":\"gulpRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockedReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRatePerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRewardRatePerWeek\",\"type\":\"uint256\"}],\"name\":\"setRewardRatePerWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalReserve\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "stkGRO_rAAVE", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000fb8e17b39fa9f2375202bc1ed549797606ec93160000000000000000000000003371de12e8734c76f70479dae3a9f3dc80cdceab", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0943dce7d219a2bb45725e8f1ac421ed223e672b6e1da7dd834f7aa48f19c4a7"}