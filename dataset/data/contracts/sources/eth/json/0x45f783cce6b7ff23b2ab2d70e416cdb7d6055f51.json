{"SourceCode": "# (c) Curve.Fi, 2020\r\n\r\n\r\n# External Contracts\r\ncontract ERC20m:\r\n    def totalSupply() -> uint256: constant\r\n    def allowance(_owner: address, _spender: address) -> uint256: constant\r\n    def transfer(_to: address, _value: uint256) -> bool: modifying\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool: modifying\r\n    def approve(_spender: address, _value: uint256) -> bool: modifying\r\n    def mint(_to: address, _value: uint256): modifying\r\n    def burn(_value: uint256): modifying\r\n    def burnFrom(_to: address, _value: uint256): modifying\r\n    def name() -> string[64]: constant\r\n    def symbol() -> string[32]: constant\r\n    def decimals() -> uint256: constant\r\n    def balanceOf(arg0: address) -> uint256: constant\r\n    def set_minter(_minter: address): modifying\r\n\r\n\r\n\r\n# External Contracts\r\ncontract yERC20:\r\n    def totalSupply() -> uint256: constant\r\n    def allowance(_owner: address, _spender: address) -> uint256: constant\r\n    def transfer(_to: address, _value: uint256) -> bool: modifying\r\n    def transferFrom(_from: address, _to: address, _value: uint256) -> bool: modifying\r\n    def approve(_spender: address, _value: uint256) -> bool: modifying\r\n    def name() -> string[64]: constant\r\n    def symbol() -> string[32]: constant\r\n    def decimals() -> uint256: constant\r\n    def balanceOf(arg0: address) -> uint256: constant\r\n    def deposit(depositAmount: uint256): modifying\r\n    def withdraw(withdrawTokens: uint256): modifying\r\n    def getPricePerFullShare() -> uint256: constant\r\n\r\n\r\nfrom vyper.interfaces import ERC20\r\n\r\n# Tether transfer-only ABI\r\ncontract USDT:\r\n    def transfer(_to: address, _value: uint256): modifying\r\n    def transferFrom(_from: address, _to: address, _value: uint256): modifying\r\n\r\n# This can (and needs to) be changed at compile time\r\nN_COINS: constant(int128) = 4  # <- change\r\n\r\nZERO256: constant(uint256) = 0  # This hack is really bad XXX\r\nZEROS: constant(uint256[N_COINS]) = [ZERO256, ZERO256, ZERO256, ZERO256]  # <- change\r\n\r\nTETHERED: constant(bool[N_COINS]) = [False, False, True, False]\r\n\r\nFEE_DENOMINATOR: constant(uint256) = 10 ** 10\r\nPRECISION: constant(uint256) = 10 ** 18  # The precision to convert to\r\nPRECISION_MUL: constant(uint256[N_COINS]) = [convert(1, uint256), convert(1000000000000, uint256), convert(1000000000000, uint256), convert(1, uint256)]\r\n# PRECISION_MUL: constant(uint256[N_COINS]) = [\r\n#     PRECISION / convert(10 ** 18, uint256),  # DAI\r\n#     PRECISION / convert(10 ** 6, uint256),   # USDC\r\n#     PRECISION / convert(10 ** 6, uint256),   # USDT\r\n#     PRECISION / convert(10 ** 18, uint256)]  # TUSD\r\n\r\nadmin_actions_delay: constant(uint256) = 3 * 86400\r\n\r\n# Events\r\nTokenExchange: event({buyer: indexed(address), sold_id: int128, tokens_sold: uint256, bought_id: int128, tokens_bought: uint256})\r\nTokenExchangeUnderlying: event({buyer: indexed(address), sold_id: int128, tokens_sold: uint256, bought_id: int128, tokens_bought: uint256})\r\nAddLiquidity: event({provider: indexed(address), token_amounts: uint256[N_COINS], fees: uint256[N_COINS], invariant: uint256, token_supply: uint256})\r\nRemoveLiquidity: event({provider: indexed(address), token_amounts: uint256[N_COINS], fees: uint256[N_COINS], token_supply: uint256})\r\nRemoveLiquidityImbalance: event({provider: indexed(address), token_amounts: uint256[N_COINS], fees: uint256[N_COINS], invariant: uint256, token_supply: uint256})\r\nCommitNewAdmin: event({deadline: indexed(timestamp), admin: indexed(address)})\r\nNewAdmin: event({admin: indexed(address)})\r\nCommitNewParameters: event({deadline: indexed(timestamp), A: uint256, fee: uint256, admin_fee: uint256})\r\nNewParameters: event({A: uint256, fee: uint256, admin_fee: uint256})\r\n\r\ncoins: public(address[N_COINS])\r\nunderlying_coins: public(address[N_COINS])\r\nbalances: public(uint256[N_COINS])\r\nA: public(uint256)  # 2 x amplification coefficient\r\nfee: public(uint256)  # fee * 1e10\r\nadmin_fee: public(uint256)  # admin_fee * 1e10\r\nmax_admin_fee: constant(uint256) = 5 * 10 ** 9\r\n\r\nowner: public(address)\r\ntoken: ERC20m\r\n\r\nadmin_actions_deadline: public(timestamp)\r\ntransfer_ownership_deadline: public(timestamp)\r\nfuture_A: public(uint256)\r\nfuture_fee: public(uint256)\r\nfuture_admin_fee: public(uint256)\r\nfuture_owner: public(address)\r\n\r\nkill_deadline: timestamp\r\nkill_deadline_dt: constant(uint256) = 2 * 30 * 86400\r\nis_killed: bool\r\n\r\n\r\n@public\r\ndef __init__(_coins: address[N_COINS], _underlying_coins: address[N_COINS],\r\n             _pool_token: address,\r\n             _A: uint256, _fee: uint256):\r\n    \"\"\"\r\n    _coins: Addresses of ERC20 contracts of coins (y-tokens) involved\r\n    _underlying_coins: Addresses of plain coins (ERC20)\r\n    _pool_token: Address of the token representing LP share\r\n    _A: Amplification coefficient multiplied by n * (n - 1)\r\n    _fee: Fee to charge for exchanges\r\n    \"\"\"\r\n    for i in range(N_COINS):\r\n        assert _coins[i] != ZERO_ADDRESS\r\n        assert _underlying_coins[i] != ZERO_ADDRESS\r\n        self.balances[i] = 0\r\n    self.coins = _coins\r\n    self.underlying_coins = _underlying_coins\r\n    self.A = _A\r\n    self.fee = _fee\r\n    self.admin_fee = 0\r\n    self.owner = msg.sender\r\n    self.kill_deadline = block.timestamp + kill_deadline_dt\r\n    self.is_killed = False\r\n    self.token = ERC20m(_pool_token)\r\n\r\n\r\n@private\r\n@constant\r\ndef _stored_rates() -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = PRECISION_MUL\r\n    for i in range(N_COINS):\r\n        result[i] *= yERC20(self.coins[i]).getPricePerFullShare()\r\n    return result\r\n\r\n\r\n@private\r\n@constant\r\ndef _xp(rates: uint256[N_COINS]) -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = rates\r\n    for i in range(N_COINS):\r\n        result[i] = result[i] * self.balances[i] / PRECISION\r\n    return result\r\n\r\n\r\n@private\r\n@constant\r\ndef _xp_mem(rates: uint256[N_COINS], _balances: uint256[N_COINS]) -> uint256[N_COINS]:\r\n    result: uint256[N_COINS] = rates\r\n    for i in range(N_COINS):\r\n        result[i] = result[i] * _balances[i] / PRECISION\r\n    return result\r\n\r\n\r\n@private\r\n@constant\r\ndef get_D(xp: uint256[N_COINS]) -> uint256:\r\n    S: uint256 = 0\r\n    for _x in xp:\r\n        S += _x\r\n    if S == 0:\r\n        return 0\r\n\r\n    Dprev: uint256 = 0\r\n    D: uint256 = S\r\n    Ann: uint256 = self.A * N_COINS\r\n    for _i in range(255):\r\n        D_P: uint256 = D\r\n        for _x in xp:\r\n            D_P = D_P * D / (_x * N_COINS + 1)  # +1 is to prevent /0\r\n        Dprev = D\r\n        D = (Ann * S + D_P * N_COINS) * D / ((Ann - 1) * D + (N_COINS + 1) * D_P)\r\n        # Equality with the precision of 1\r\n        if D > Dprev:\r\n            if D - Dprev <= 1:\r\n                break\r\n        else:\r\n            if Dprev - D <= 1:\r\n                break\r\n    return D\r\n\r\n\r\n@private\r\n@constant\r\ndef get_D_mem(rates: uint256[N_COINS], _balances: uint256[N_COINS]) -> uint256:\r\n    return self.get_D(self._xp_mem(rates, _balances))\r\n\r\n\r\n@public\r\n@constant\r\ndef get_virtual_price() -> uint256:\r\n    \"\"\"\r\n    Returns portfolio virtual price (for calculating profit)\r\n    scaled up by 1e18\r\n    \"\"\"\r\n    D: uint256 = self.get_D(self._xp(self._stored_rates()))\r\n    # D is in the units similar to DAI (e.g. converted to precision 1e18)\r\n    # When balanced, D = n * x_u - total virtual value of the portfolio\r\n    token_supply: uint256 = self.token.totalSupply()\r\n    return D * PRECISION / token_supply\r\n\r\n\r\n@public\r\n@constant\r\ndef calc_token_amount(amounts: uint256[N_COINS], deposit: bool) -> uint256:\r\n    \"\"\"\r\n    Simplified method to calculate addition or reduction in token supply at\r\n    deposit or withdrawal without taking fees into account (but looking at\r\n    slippage).\r\n    Needed to prevent front-running, not for precise calculations!\r\n    \"\"\"\r\n    _balances: uint256[N_COINS] = self.balances\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    D0: uint256 = self.get_D_mem(rates, _balances)\r\n    for i in range(N_COINS):\r\n        if deposit:\r\n            _balances[i] += amounts[i]\r\n        else:\r\n            _balances[i] -= amounts[i]\r\n    D1: uint256 = self.get_D_mem(rates, _balances)\r\n    token_amount: uint256 = self.token.totalSupply()\r\n    diff: uint256 = 0\r\n    if deposit:\r\n        diff = D1 - D0\r\n    else:\r\n        diff = D0 - D1\r\n    return diff * token_amount / D0\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef add_liquidity(amounts: uint256[N_COINS], min_mint_amount: uint256):\r\n    # Amounts is amounts of c-tokens\r\n    assert not self.is_killed\r\n\r\n    fees: uint256[N_COINS] = ZEROS\r\n    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    _admin_fee: uint256 = self.admin_fee\r\n\r\n    token_supply: uint256 = self.token.totalSupply()\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    # Initial invariant\r\n    D0: uint256 = 0\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    if token_supply > 0:\r\n        D0 = self.get_D_mem(rates, old_balances)\r\n    new_balances: uint256[N_COINS] = old_balances\r\n\r\n    for i in range(N_COINS):\r\n        if token_supply == 0:\r\n            assert amounts[i] > 0\r\n        # balances store amounts of c-tokens\r\n        new_balances[i] = old_balances[i] + amounts[i]\r\n\r\n    # Invariant after change\r\n    D1: uint256 = self.get_D_mem(rates, new_balances)\r\n    assert D1 > D0\r\n\r\n    # We need to recalculate the invariant accounting for fees\r\n    # to calculate fair user's share\r\n    D2: uint256 = D1\r\n    if token_supply > 0:\r\n        # Only account for fees if we are not the first to deposit\r\n        for i in range(N_COINS):\r\n            ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n            difference: uint256 = 0\r\n            if ideal_balance > new_balances[i]:\r\n                difference = ideal_balance - new_balances[i]\r\n            else:\r\n                difference = new_balances[i] - ideal_balance\r\n            fees[i] = _fee * difference / FEE_DENOMINATOR\r\n            self.balances[i] = new_balances[i] - fees[i] * _admin_fee / FEE_DENOMINATOR\r\n            new_balances[i] -= fees[i]\r\n        D2 = self.get_D_mem(rates, new_balances)\r\n    else:\r\n        self.balances = new_balances\r\n\r\n    # Calculate, how much pool tokens to mint\r\n    mint_amount: uint256 = 0\r\n    if token_supply == 0:\r\n        mint_amount = D1  # Take the dust if there was any\r\n    else:\r\n        mint_amount = token_supply * (D2 - D0) / D0\r\n\r\n    assert mint_amount >= min_mint_amount, \"Slippage screwed you\"\r\n\r\n    # Take coins from the sender\r\n    for i in range(N_COINS):\r\n        assert_modifiable(\r\n            yERC20(self.coins[i]).transferFrom(msg.sender, self, amounts[i]))\r\n\r\n\r\n    # Mint pool tokens\r\n    self.token.mint(msg.sender, mint_amount)\r\n\r\n    log.AddLiquidity(msg.sender, amounts, fees, D1, token_supply + mint_amount)\r\n\r\n\r\n@private\r\n@constant\r\ndef get_y(i: int128, j: int128, x: uint256, _xp: uint256[N_COINS]) -> uint256:\r\n    # x in the input is converted to the same price/precision\r\n\r\n    assert (i != j) and (i >= 0) and (j >= 0) and (i < N_COINS) and (j < N_COINS)\r\n\r\n    D: uint256 = self.get_D(_xp)\r\n    c: uint256 = D\r\n    S_: uint256 = 0\r\n    Ann: uint256 = self.A * N_COINS\r\n\r\n    _x: uint256 = 0\r\n    for _i in range(N_COINS):\r\n        if _i == i:\r\n            _x = x\r\n        elif _i != j:\r\n            _x = _xp[_i]\r\n        else:\r\n            continue\r\n        S_ += _x\r\n        c = c * D / (_x * N_COINS)\r\n    c = c * D / (Ann * N_COINS)\r\n    b: uint256 = S_ + D / Ann  # - D\r\n    y_prev: uint256 = 0\r\n    y: uint256 = D\r\n    for _i in range(255):\r\n        y_prev = y\r\n        y = (y*y + c) / (2 * y + b - D)\r\n        # Equality with the precision of 1\r\n        if y > y_prev:\r\n            if y - y_prev <= 1:\r\n                break\r\n        else:\r\n            if y_prev - y <= 1:\r\n                break\r\n    return y\r\n\r\n\r\n@public\r\n@constant\r\ndef get_dy(i: int128, j: int128, dx: uint256) -> uint256:\r\n    # dx and dy in c-units\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    xp: uint256[N_COINS] = self._xp(rates)\r\n\r\n    x: uint256 = xp[i] + dx * rates[i] / PRECISION\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = (xp[j] - y) * PRECISION / rates[j]\r\n    _fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return dy - _fee\r\n\r\n\r\n@public\r\n@constant\r\ndef get_dx(i: int128, j: int128, dy: uint256) -> uint256:\r\n    # dx and dy in c-units\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    xp: uint256[N_COINS] = self._xp(rates)\r\n\r\n    y: uint256 = xp[j] - (dy * FEE_DENOMINATOR / (FEE_DENOMINATOR - self.fee)) * rates[j] / PRECISION\r\n    x: uint256 = self.get_y(j, i, y, xp)\r\n    dx: uint256 = (x - xp[i]) * PRECISION / rates[i]\r\n    return dx\r\n\r\n\r\n@public\r\n@constant\r\ndef get_dy_underlying(i: int128, j: int128, dx: uint256) -> uint256:\r\n    # dx and dy in underlying units\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    xp: uint256[N_COINS] = self._xp(rates)\r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n\r\n    x: uint256 = xp[i] + dx * precisions[i]\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = (xp[j] - y) / precisions[j]\r\n    _fee: uint256 = self.fee * dy / FEE_DENOMINATOR\r\n    return dy - _fee\r\n\r\n\r\n@public\r\n@constant\r\ndef get_dx_underlying(i: int128, j: int128, dy: uint256) -> uint256:\r\n    # dx and dy in underlying units\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    xp: uint256[N_COINS] = self._xp(rates)\r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n\r\n    y: uint256 = xp[j] - (dy * FEE_DENOMINATOR / (FEE_DENOMINATOR - self.fee)) * precisions[j]\r\n    x: uint256 = self.get_y(j, i, y, xp)\r\n    dx: uint256 = (x - xp[i]) / precisions[i]\r\n    return dx\r\n\r\n\r\n@private\r\ndef _exchange(i: int128, j: int128, dx: uint256, rates: uint256[N_COINS]) -> uint256:\r\n    assert not self.is_killed\r\n    # dx and dy are in c-tokens\r\n\r\n    xp: uint256[N_COINS] = self._xp(rates)\r\n\r\n    x: uint256 = xp[i] + dx * rates[i] / PRECISION\r\n    y: uint256 = self.get_y(i, j, x, xp)\r\n    dy: uint256 = xp[j] - y\r\n    dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\r\n    dy_admin_fee: uint256 = dy_fee * self.admin_fee / FEE_DENOMINATOR\r\n    self.balances[i] = x * PRECISION / rates[i]\r\n    self.balances[j] = (y + (dy_fee - dy_admin_fee)) * PRECISION / rates[j]\r\n\r\n    _dy: uint256 = (dy - dy_fee) * PRECISION / rates[j]\r\n\r\n    return _dy\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef exchange(i: int128, j: int128, dx: uint256, min_dy: uint256):\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    dy: uint256 = self._exchange(i, j, dx, rates)\r\n    assert dy >= min_dy, \"Exchange resulted in fewer coins than expected\"\r\n\r\n    assert_modifiable(yERC20(self.coins[i]).transferFrom(msg.sender, self, dx))\r\n\r\n    assert_modifiable(yERC20(self.coins[j]).transfer(msg.sender, dy))\r\n\r\n    log.TokenExchange(msg.sender, i, dx, j, dy)\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef exchange_underlying(i: int128, j: int128, dx: uint256, min_dy: uint256):\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n    precisions: uint256[N_COINS] = PRECISION_MUL\r\n    rate_i: uint256 = rates[i] / precisions[i]\r\n    rate_j: uint256 = rates[j] / precisions[j]\r\n    dx_: uint256 = dx * PRECISION / rate_i\r\n\r\n    dy_: uint256 = self._exchange(i, j, dx_, rates)\r\n    dy: uint256 = dy_ * rate_j / PRECISION\r\n    assert dy >= min_dy, \"Exchange resulted in fewer coins than expected\"\r\n    tethered: bool[N_COINS] = TETHERED\r\n\r\n    ok: uint256 = 0\r\n    if tethered[i]:\r\n        USDT(self.underlying_coins[i]).transferFrom(msg.sender, self, dx)\r\n    else:\r\n        assert_modifiable(ERC20(self.underlying_coins[i])\\\r\n            .transferFrom(msg.sender, self, dx))\r\n    ERC20(self.underlying_coins[i]).approve(self.coins[i], dx)\r\n    yERC20(self.coins[i]).deposit(dx)\r\n    yERC20(self.coins[j]).withdraw(dy_)\r\n\r\n    # y-tokens calculate imprecisely - use all available\r\n    dy = ERC20(self.underlying_coins[j]).balanceOf(self)\r\n    assert dy >= min_dy, \"Exchange resulted in fewer coins than expected\"\r\n\r\n    if tethered[j]:\r\n        USDT(self.underlying_coins[j]).transfer(msg.sender, dy)\r\n    else:\r\n        assert_modifiable(ERC20(self.underlying_coins[j])\\\r\n            .transfer(msg.sender, dy))\r\n\r\n\r\n    log.TokenExchangeUnderlying(msg.sender, i, dx, j, dy)\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef remove_liquidity(_amount: uint256, min_amounts: uint256[N_COINS]):\r\n    total_supply: uint256 = self.token.totalSupply()\r\n    amounts: uint256[N_COINS] = ZEROS\r\n    fees: uint256[N_COINS] = ZEROS\r\n\r\n    for i in range(N_COINS):\r\n        value: uint256 = self.balances[i] * _amount / total_supply\r\n        assert value >= min_amounts[i], \"Withdrawal resulted in fewer coins than expected\"\r\n        self.balances[i] -= value\r\n        amounts[i] = value\r\n        assert_modifiable(yERC20(self.coins[i]).transfer(\r\n            msg.sender, value))\r\n\r\n    self.token.burnFrom(msg.sender, _amount)  # Will raise if not enough\r\n\r\n    log.RemoveLiquidity(msg.sender, amounts, fees, total_supply - _amount)\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef remove_liquidity_imbalance(amounts: uint256[N_COINS], max_burn_amount: uint256):\r\n    assert not self.is_killed\r\n\r\n    token_supply: uint256 = self.token.totalSupply()\r\n    assert token_supply > 0\r\n    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\r\n    _admin_fee: uint256 = self.admin_fee\r\n    rates: uint256[N_COINS] = self._stored_rates()\r\n\r\n    old_balances: uint256[N_COINS] = self.balances\r\n    new_balances: uint256[N_COINS] = old_balances\r\n    D0: uint256 = self.get_D_mem(rates, old_balances)\r\n    for i in range(N_COINS):\r\n        new_balances[i] -= amounts[i]\r\n    D1: uint256 = self.get_D_mem(rates, new_balances)\r\n    fees: uint256[N_COINS] = ZEROS\r\n    for i in range(N_COINS):\r\n        ideal_balance: uint256 = D1 * old_balances[i] / D0\r\n        difference: uint256 = 0\r\n        if ideal_balance > new_balances[i]:\r\n            difference = ideal_balance - new_balances[i]\r\n        else:\r\n            difference = new_balances[i] - ideal_balance\r\n        fees[i] = _fee * difference / FEE_DENOMINATOR\r\n        self.balances[i] = new_balances[i] - fees[i] * _admin_fee / FEE_DENOMINATOR\r\n        new_balances[i] -= fees[i]\r\n    D2: uint256 = self.get_D_mem(rates, new_balances)\r\n\r\n    token_amount: uint256 = (D0 - D2) * token_supply / D0\r\n    assert token_amount > 0\r\n    assert token_amount <= max_burn_amount, \"Slippage screwed you\"\r\n\r\n    for i in range(N_COINS):\r\n        assert_modifiable(yERC20(self.coins[i]).transfer(msg.sender, amounts[i]))\r\n    self.token.burnFrom(msg.sender, token_amount)  # Will raise if not enough\r\n\r\n    log.RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, token_supply - token_amount)\r\n\r\n\r\n### Admin functions ###\r\n@public\r\ndef commit_new_parameters(amplification: uint256,\r\n                          new_fee: uint256,\r\n                          new_admin_fee: uint256):\r\n    assert msg.sender == self.owner\r\n    assert self.admin_actions_deadline == 0\r\n    assert new_admin_fee <= max_admin_fee\r\n\r\n    _deadline: timestamp = block.timestamp + admin_actions_delay\r\n    self.admin_actions_deadline = _deadline\r\n    self.future_A = amplification\r\n    self.future_fee = new_fee\r\n    self.future_admin_fee = new_admin_fee\r\n\r\n    log.CommitNewParameters(_deadline, amplification, new_fee, new_admin_fee)\r\n\r\n\r\n@public\r\ndef apply_new_parameters():\r\n    assert msg.sender == self.owner\r\n    assert self.admin_actions_deadline <= block.timestamp\\\r\n        and self.admin_actions_deadline > 0\r\n\r\n    self.admin_actions_deadline = 0\r\n    _A: uint256 = self.future_A\r\n    _fee: uint256 = self.future_fee\r\n    _admin_fee: uint256 = self.future_admin_fee\r\n    self.A = _A\r\n    self.fee = _fee\r\n    self.admin_fee = _admin_fee\r\n\r\n    log.NewParameters(_A, _fee, _admin_fee)\r\n\r\n\r\n@public\r\ndef revert_new_parameters():\r\n    assert msg.sender == self.owner\r\n\r\n    self.admin_actions_deadline = 0\r\n\r\n\r\n@public\r\ndef commit_transfer_ownership(_owner: address):\r\n    assert msg.sender == self.owner\r\n    assert self.transfer_ownership_deadline == 0\r\n\r\n    _deadline: timestamp = block.timestamp + admin_actions_delay\r\n    self.transfer_ownership_deadline = _deadline\r\n    self.future_owner = _owner\r\n\r\n    log.CommitNewAdmin(_deadline, _owner)\r\n\r\n\r\n@public\r\ndef apply_transfer_ownership():\r\n    assert msg.sender == self.owner\r\n    assert block.timestamp >= self.transfer_ownership_deadline\\\r\n        and self.transfer_ownership_deadline > 0\r\n\r\n    self.transfer_ownership_deadline = 0\r\n    _owner: address = self.future_owner\r\n    self.owner = _owner\r\n\r\n    log.NewAdmin(_owner)\r\n\r\n\r\n@public\r\ndef revert_transfer_ownership():\r\n    assert msg.sender == self.owner\r\n\r\n    self.transfer_ownership_deadline = 0\r\n\r\n\r\n@public\r\ndef withdraw_admin_fees():\r\n    assert msg.sender == self.owner\r\n    _precisions: uint256[N_COINS] = PRECISION_MUL\r\n\r\n    for i in range(N_COINS):\r\n        c: address = self.coins[i]\r\n        value: uint256 = yERC20(c).balanceOf(self) - self.balances[i]\r\n        if value > 0:\r\n            assert_modifiable(yERC20(c).transfer(msg.sender, value))\r\n\r\n\r\n@public\r\ndef kill_me():\r\n    assert msg.sender == self.owner\r\n    assert self.kill_deadline > block.timestamp\r\n    self.is_killed = True\r\n\r\n\r\n@public\r\ndef unkill_me():\r\n    assert msg.sender == self.owner\r\n    self.is_killed = False", "ABI": "[{\"name\":\"TokenExchange\",\"inputs\":[{\"type\":\"address\",\"name\":\"buyer\",\"indexed\":true},{\"type\":\"int128\",\"name\":\"sold_id\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"tokens_sold\",\"indexed\":false},{\"type\":\"int128\",\"name\":\"bought_id\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"tokens_bought\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TokenExchangeUnderlying\",\"inputs\":[{\"type\":\"address\",\"name\":\"buyer\",\"indexed\":true},{\"type\":\"int128\",\"name\":\"sold_id\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"tokens_sold\",\"indexed\":false},{\"type\":\"int128\",\"name\":\"bought_id\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"tokens_bought\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"AddLiquidity\",\"inputs\":[{\"type\":\"address\",\"name\":\"provider\",\"indexed\":true},{\"type\":\"uint256[4]\",\"name\":\"token_amounts\",\"indexed\":false},{\"type\":\"uint256[4]\",\"name\":\"fees\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"invariant\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"token_supply\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidity\",\"inputs\":[{\"type\":\"address\",\"name\":\"provider\",\"indexed\":true},{\"type\":\"uint256[4]\",\"name\":\"token_amounts\",\"indexed\":false},{\"type\":\"uint256[4]\",\"name\":\"fees\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"token_supply\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"RemoveLiquidityImbalance\",\"inputs\":[{\"type\":\"address\",\"name\":\"provider\",\"indexed\":true},{\"type\":\"uint256[4]\",\"name\":\"token_amounts\",\"indexed\":false},{\"type\":\"uint256[4]\",\"name\":\"fees\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"invariant\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"token_supply\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitNewAdmin\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"deadline\",\"indexed\":true,\"unit\":\"sec\"},{\"type\":\"address\",\"name\":\"admin\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewAdmin\",\"inputs\":[{\"type\":\"address\",\"name\":\"admin\",\"indexed\":true}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitNewParameters\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"deadline\",\"indexed\":true,\"unit\":\"sec\"},{\"type\":\"uint256\",\"name\":\"A\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"fee\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"admin_fee\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"NewParameters\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"A\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"fee\",\"indexed\":false},{\"type\":\"uint256\",\"name\":\"admin_fee\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"outputs\":[],\"inputs\":[{\"type\":\"address[4]\",\"name\":\"_coins\"},{\"type\":\"address[4]\",\"name\":\"_underlying_coins\"},{\"type\":\"address\",\"name\":\"_pool_token\"},{\"type\":\"uint256\",\"name\":\"_A\"},{\"type\":\"uint256\",\"name\":\"_fee\"}],\"constant\":false,\"payable\":false,\"type\":\"constructor\"},{\"name\":\"get_virtual_price\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":1535185},{\"name\":\"calc_token_amount\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"uint256[4]\",\"name\":\"amounts\"},{\"type\":\"bool\",\"name\":\"deposit\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":6067881},{\"name\":\"add_liquidity\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256[4]\",\"name\":\"amounts\"},{\"type\":\"uint256\",\"name\":\"min_mint_amount\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":9327083},{\"name\":\"get_dy\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dx\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":3454227},{\"name\":\"get_dx\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dy\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":3454232},{\"name\":\"get_dy_underlying\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dx\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":3454087},{\"name\":\"get_dx_underlying\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dy\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":3454093},{\"name\":\"exchange\",\"outputs\":[],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dx\"},{\"type\":\"uint256\",\"name\":\"min_dy\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":7030208},{\"name\":\"exchange_underlying\",\"outputs\":[],\"inputs\":[{\"type\":\"int128\",\"name\":\"i\"},{\"type\":\"int128\",\"name\":\"j\"},{\"type\":\"uint256\",\"name\":\"dx\"},{\"type\":\"uint256\",\"name\":\"min_dy\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":7050194},{\"name\":\"remove_liquidity\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"_amount\"},{\"type\":\"uint256[4]\",\"name\":\"min_amounts\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":240409},{\"name\":\"remove_liquidity_imbalance\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256[4]\",\"name\":\"amounts\"},{\"type\":\"uint256\",\"name\":\"max_burn_amount\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":9326310},{\"name\":\"commit_new_parameters\",\"outputs\":[],\"inputs\":[{\"type\":\"uint256\",\"name\":\"amplification\"},{\"type\":\"uint256\",\"name\":\"new_fee\"},{\"type\":\"uint256\",\"name\":\"new_admin_fee\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":145867},{\"name\":\"apply_new_parameters\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":133482},{\"name\":\"revert_new_parameters\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":21805},{\"name\":\"commit_transfer_ownership\",\"outputs\":[],\"inputs\":[{\"type\":\"address\",\"name\":\"_owner\"}],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":74482},{\"name\":\"apply_transfer_ownership\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":60538},{\"name\":\"revert_transfer_ownership\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":21895},{\"name\":\"withdraw_admin_fees\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":22667},{\"name\":\"kill_me\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":37848},{\"name\":\"unkill_me\",\"outputs\":[],\"inputs\":[],\"constant\":false,\"payable\":false,\"type\":\"function\",\"gas\":21985},{\"name\":\"coins\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2160},{\"name\":\"underlying_coins\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2190},{\"name\":\"balances\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[{\"type\":\"int128\",\"name\":\"arg0\"}],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2220},{\"name\":\"A\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2051},{\"name\":\"fee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2081},{\"name\":\"admin_fee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2111},{\"name\":\"owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2141},{\"name\":\"admin_actions_deadline\",\"outputs\":[{\"type\":\"uint256\",\"unit\":\"sec\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2171},{\"name\":\"transfer_ownership_deadline\",\"outputs\":[{\"type\":\"uint256\",\"unit\":\"sec\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2201},{\"name\":\"future_A\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2231},{\"name\":\"future_fee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2261},{\"name\":\"future_admin_fee\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2291},{\"name\":\"future_owner\",\"outputs\":[{\"type\":\"address\",\"name\":\"out\"}],\"inputs\":[],\"constant\":true,\"payable\":false,\"type\":\"function\",\"gas\":2321}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.1.0b16", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "00000000000000000000000016de59092dae5ccf4a1e6439d611fd0653f0bd01000000000000000000000000d6ad7a6750a7593e092a9b218d66c0a814a3436e00000000000000000000000083f798e925bcd4017eb265844fddabb448f1707d00000000000000000000000073a052500105205d34daf004eab301916da8190f0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000085d4780b73119b644ae5ecd22b376000000000000000000000000df5e0e81dff6faf3a7e52ba697820c5e32d806a8000000000000000000000000000000000000000000000000000000000000070800000000000000000000000000000000000000000000000000000000003d0900", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": ""}