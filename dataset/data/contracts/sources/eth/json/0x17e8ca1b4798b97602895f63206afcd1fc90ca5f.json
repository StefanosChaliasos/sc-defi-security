{"SourceCode": "// File: localhost/contracts/lib/LibParam.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary LibParam {\r\n    bytes32 private constant STATIC_MASK =\r\n        0x0100000000000000000000000000000000000000000000000000000000000000;\r\n    bytes32 private constant PARAMS_MASK =\r\n        0x0000000000000000000000000000000000000000000000000000000000000001;\r\n    bytes32 private constant REFS_MASK =\r\n        0x00000000000000000000000000000000000000000000000000000000000000FF;\r\n    bytes32 private constant RETURN_NUM_MASK =\r\n        0x00FF000000000000000000000000000000000000000000000000000000000000;\r\n\r\n    uint256 private constant REFS_LIMIT = 22;\r\n    uint256 private constant PARAMS_SIZE_LIMIT = 64;\r\n    uint256 private constant RETURN_NUM_OFFSET = 240;\r\n\r\n    function isStatic(bytes32 conf) internal pure returns (bool) {\r\n        if (conf & STATIC_MASK == 0) return true;\r\n        else return false;\r\n    }\r\n\r\n    function isReferenced(bytes32 conf) internal pure returns (bool) {\r\n        if (getReturnNum(conf) == 0) return false;\r\n        else return true;\r\n    }\r\n\r\n    function getReturnNum(bytes32 conf) internal pure returns (uint256 num) {\r\n        bytes32 temp = (conf & RETURN_NUM_MASK) >> RETURN_NUM_OFFSET;\r\n        num = uint256(temp);\r\n    }\r\n\r\n    function getParams(bytes32 conf)\r\n        internal\r\n        pure\r\n        returns (uint256[] memory refs, uint256[] memory params)\r\n    {\r\n        require(!isStatic(conf), \"Static params\");\r\n        uint256 n = 0;\r\n        while (conf & REFS_MASK == REFS_MASK && n < REFS_LIMIT) {\r\n            n++;\r\n            conf = conf >> 8;\r\n        }\r\n        n = REFS_LIMIT - n;\r\n        require(n > 0, \"No dynamic param\");\r\n        refs = new uint256[](n);\r\n        params = new uint256[](n);\r\n        for (uint256 i = 0; i < n; i++) {\r\n            refs[i] = uint256(conf & REFS_MASK);\r\n            conf = conf >> 8;\r\n        }\r\n        uint256 i = 0;\r\n        for (uint256 k = 0; k < PARAMS_SIZE_LIMIT; k++) {\r\n            if (conf & PARAMS_MASK != 0) {\r\n                require(i < n, \"Location count exceeds ref count\");\r\n                params[i] = k * 32 + 4;\r\n                i++;\r\n            }\r\n            conf = conf >> 1;\r\n        }\r\n        require(i == n, \"Location count less than ref count\");\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/lib/LibStack.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary LibStack {\r\n    function setAddress(bytes32[] storage _stack, address _input) internal {\r\n        _stack.push(bytes32(uint256(uint160(_input))));\r\n    }\r\n\r\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\r\n        _stack.push(_input);\r\n    }\r\n\r\n    function setHandlerType(bytes32[] storage _stack, uint256 _input) internal {\r\n        require(_input < uint96(-1), \"Invalid Handler Type\");\r\n        _stack.push(bytes12(uint96(_input)));\r\n    }\r\n\r\n    function getAddress(bytes32[] storage _stack)\r\n        internal\r\n        returns (address ret)\r\n    {\r\n        ret = address(uint160(uint256(peek(_stack))));\r\n        _stack.pop();\r\n    }\r\n\r\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\r\n        ret = bytes4(peek(_stack));\r\n        _stack.pop();\r\n    }\r\n\r\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\r\n        ret = peek(_stack);\r\n        _stack.pop();\r\n    }\r\n\r\n    function peek(bytes32[] storage _stack)\r\n        internal\r\n        view\r\n        returns (bytes32 ret)\r\n    {\r\n        require(_stack.length > 0, \"stack empty\");\r\n        ret = _stack[_stack.length - 1];\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/lib/LibCache.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary LibCache {\r\n    function set(\r\n        mapping(bytes32 => bytes32) storage _cache,\r\n        bytes32 _key,\r\n        bytes32 _value\r\n    ) internal {\r\n        _cache[_key] = _value;\r\n    }\r\n\r\n    function setAddress(\r\n        mapping(bytes32 => bytes32) storage _cache,\r\n        bytes32 _key,\r\n        address _value\r\n    ) internal {\r\n        _cache[_key] = bytes32(uint256(uint160(_value)));\r\n    }\r\n\r\n    function setUint256(\r\n        mapping(bytes32 => bytes32) storage _cache,\r\n        bytes32 _key,\r\n        uint256 _value\r\n    ) internal {\r\n        _cache[_key] = bytes32(_value);\r\n    }\r\n\r\n    function getAddress(\r\n        mapping(bytes32 => bytes32) storage _cache,\r\n        bytes32 _key\r\n    ) internal view returns (address ret) {\r\n        ret = address(uint160(uint256(_cache[_key])));\r\n    }\r\n\r\n    function getUint256(\r\n        mapping(bytes32 => bytes32) storage _cache,\r\n        bytes32 _key\r\n    ) internal view returns (uint256 ret) {\r\n        ret = uint256(_cache[_key]);\r\n    }\r\n\r\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\r\n        internal\r\n        view\r\n        returns (bytes32 ret)\r\n    {\r\n        ret = _cache[_key];\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Storage.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/// @notice A cache structure composed by a bytes32 array\r\ncontract Storage {\r\n    using LibCache for mapping(bytes32 => bytes32);\r\n    using LibStack for bytes32[];\r\n\r\n    bytes32[] public stack;\r\n    mapping(bytes32 => bytes32) public cache;\r\n\r\n    // keccak256 hash of \"msg.sender\"\r\n    // prettier-ignore\r\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\r\n\r\n    // keccak256 hash of \"cube.counter\"\r\n    // prettier-ignore\r\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\r\n\r\n    modifier isStackEmpty() {\r\n        require(stack.length == 0, \"Stack not empty\");\r\n        _;\r\n    }\r\n\r\n    modifier isCubeCounterZero() {\r\n        require(_getCubeCounter() == 0, \"Cube counter not zero\");\r\n        _;\r\n    }\r\n\r\n    function _setSender() internal {\r\n        if (_getSender() == address(0))\r\n            cache.setAddress(MSG_SENDER_KEY, msg.sender);\r\n    }\r\n\r\n    function _resetSender() internal {\r\n        cache.setAddress(MSG_SENDER_KEY, address(0));\r\n    }\r\n\r\n    function _getSender() internal view returns (address) {\r\n        return cache.getAddress(MSG_SENDER_KEY);\r\n    }\r\n\r\n    function _addCubeCounter() internal {\r\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\r\n    }\r\n\r\n    function _resetCubeCounter() internal {\r\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\r\n    }\r\n\r\n    function _getCubeCounter() internal view returns (uint256) {\r\n        return cache.getUint256(CUBE_COUNTER_KEY);\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Config.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Config {\r\n    // function signature of \"postProcess()\"\r\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\r\n\r\n    // The base amount of percentage function\r\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\r\n\r\n    // Handler post-process type. Others should not happen now.\r\n    enum HandlerType {Token, Custom, Others}\r\n}\r\n\r\n// File: localhost/contracts/interface/IRegistry.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\ninterface IRegistry {\r\n    function infos(address) external view returns (bytes32);\r\n\r\n    function isValid(address handler) external view returns (bool result);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: localhost/contracts/Proxy.sol\r\n\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title The entrance of Furucombo\r\n * @author Ben Huang\r\n */\r\ncontract Proxy is Storage, Config {\r\n    using Address for address;\r\n    using SafeERC20 for IERC20;\r\n    using LibParam for bytes32;\r\n\r\n    // keccak256 hash of \"furucombo.handler.registry\"\r\n    // prettier-ignore\r\n    bytes32 private constant HANDLER_REGISTRY = 0x6874162fd62902201ea0f4bf541086067b3b88bd802fac9e150fd2d1db584e19;\r\n\r\n    constructor(address registry) public {\r\n        bytes32 slot = HANDLER_REGISTRY;\r\n        assembly {\r\n            sstore(slot, registry)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Direct transfer from EOA should be reverted.\r\n     * @dev Callback function will be handled here.\r\n     */\r\n    fallback() external payable {\r\n        require(Address.isContract(msg.sender), \"Not allowed from EOA\");\r\n\r\n        // If triggered by a function call, caller should be registered in registry.\r\n        // The function call will then be forwarded to the location registered in\r\n        // registry.\r\n        if (msg.data.length != 0) {\r\n            require(_isValid(msg.sender), \"Invalid caller\");\r\n\r\n            address target =\r\n                address(bytes20(IRegistry(_getRegistry()).infos(msg.sender)));\r\n            bytes memory result = _exec(target, msg.data);\r\n\r\n            // return result for aave v2 flashloan()\r\n            uint256 size = result.length;\r\n            assembly {\r\n                let loc := add(result, 0x20)\r\n                return(loc, size)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Combo execution function. Including three phases: pre-process,\r\n     * exection and post-process.\r\n     * @param tos The handlers of combo.\r\n     * @param configs The configurations of executing cubes.\r\n     * @param datas The combo datas.\r\n     */\r\n    function batchExec(\r\n        address[] memory tos,\r\n        bytes32[] memory configs,\r\n        bytes[] memory datas\r\n    ) public payable {\r\n        _preProcess();\r\n        _execs(tos, configs, datas);\r\n        _postProcess();\r\n    }\r\n\r\n    /**\r\n     * @notice The execution interface for callback function to be executed.\r\n     * @dev This function can only be called through the handler, which makes\r\n     * the caller become proxy itself.\r\n     */\r\n    function execs(\r\n        address[] memory tos,\r\n        bytes32[] memory configs,\r\n        bytes[] memory datas\r\n    ) public payable {\r\n        require(msg.sender == address(this), \"Does not allow external calls\");\r\n        require(_getSender() != address(0), \"Sender should be initialized\");\r\n        _execs(tos, configs, datas);\r\n    }\r\n\r\n    /**\r\n     * @notice The execution phase.\r\n     * @param tos The handlers of combo.\r\n     * @param configs The configurations of executing cubes.\r\n     * @param datas The combo datas.\r\n     */\r\n    function _execs(\r\n        address[] memory tos,\r\n        bytes32[] memory configs,\r\n        bytes[] memory datas\r\n    ) internal {\r\n        bytes32[256] memory localStack;\r\n        uint256 index = 0;\r\n\r\n        require(\r\n            tos.length == datas.length,\r\n            \"Tos and datas length inconsistent\"\r\n        );\r\n        require(\r\n            tos.length == configs.length,\r\n            \"Tos and configs length inconsistent\"\r\n        );\r\n        for (uint256 i = 0; i < tos.length; i++) {\r\n            // Check if the data contains dynamic parameter\r\n            if (!configs[i].isStatic()) {\r\n                // If so, trim the exectution data base on the configuration and stack content\r\n                _trim(datas[i], configs[i], localStack, index);\r\n            }\r\n            // Check if the output will be referenced afterwards\r\n            if (configs[i].isReferenced()) {\r\n                // If so, parse the output and place it into local stack\r\n                uint256 num = configs[i].getReturnNum();\r\n                uint256 newIndex =\r\n                    _parse(localStack, _exec(tos[i], datas[i]), index);\r\n                require(\r\n                    newIndex == index + num,\r\n                    \"Return num and parsed return num not matched\"\r\n                );\r\n                index = newIndex;\r\n            } else {\r\n                _exec(tos[i], datas[i]);\r\n            }\r\n            // Setup the process to be triggered in the post-process phase\r\n            _setPostProcess(tos[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Trimming the execution data.\r\n     * @param data The execution data.\r\n     * @param config The configuration.\r\n     * @param localStack The stack the be referenced.\r\n     * @param index Current element count of localStack.\r\n     */\r\n    function _trim(\r\n        bytes memory data,\r\n        bytes32 config,\r\n        bytes32[256] memory localStack,\r\n        uint256 index\r\n    ) internal pure {\r\n        // Fetch the parameter configuration from config\r\n        (uint256[] memory refs, uint256[] memory params) = config.getParams();\r\n        // Trim the data with the reference and parameters\r\n        for (uint256 i = 0; i < refs.length; i++) {\r\n            require(refs[i] < index, \"Reference to out of localStack\");\r\n            bytes32 ref = localStack[refs[i]];\r\n            uint256 offset = params[i];\r\n            uint256 base = PERCENTAGE_BASE;\r\n            assembly {\r\n                let loc := add(add(data, 0x20), offset)\r\n                let m := mload(loc)\r\n                // Adjust the value by multiplier if a dynamic parameter is not zero\r\n                if iszero(iszero(m)) {\r\n                    // Assert no overflow first\r\n                    let p := mul(m, ref)\r\n                    if iszero(eq(div(p, m), ref)) {\r\n                        revert(0, 0)\r\n                    } // require(p / m == ref)\r\n                    ref := div(p, base)\r\n                }\r\n                mstore(loc, ref)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Parse the return data to the local stack.\r\n     * @param localStack The local stack to place the return values.\r\n     * @param ret The return data.\r\n     * @param index The current tail.\r\n     */\r\n    function _parse(\r\n        bytes32[256] memory localStack,\r\n        bytes memory ret,\r\n        uint256 index\r\n    ) internal pure returns (uint256 newIndex) {\r\n        uint256 len = ret.length;\r\n        // Estimate the tail after the process.\r\n        newIndex = index + len / 32;\r\n        require(newIndex <= 256, \"stack overflow\");\r\n        assembly {\r\n            let offset := shl(5, index)\r\n            // Store the data into localStack\r\n            for {\r\n                let i := 0\r\n            } lt(i, len) {\r\n                i := add(i, 0x20)\r\n            } {\r\n                mstore(\r\n                    add(localStack, add(i, offset)),\r\n                    mload(add(add(ret, i), 0x20))\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice The execution of a single cube.\r\n     * @param _to The handler of cube.\r\n     * @param _data The cube execution data.\r\n     */\r\n    function _exec(address _to, bytes memory _data)\r\n        internal\r\n        returns (bytes memory result)\r\n    {\r\n        require(_isValid(_to), \"Invalid handler\");\r\n        _addCubeCounter();\r\n        assembly {\r\n            let succeeded := delegatecall(\r\n                sub(gas(), 5000),\r\n                _to,\r\n                add(_data, 0x20),\r\n                mload(_data),\r\n                0,\r\n                0\r\n            )\r\n            let size := returndatasize()\r\n\r\n            result := mload(0x40)\r\n            mstore(\r\n                0x40,\r\n                add(result, and(add(add(size, 0x20), 0x1f), not(0x1f)))\r\n            )\r\n            mstore(result, size)\r\n            returndatacopy(add(result, 0x20), 0, size)\r\n\r\n            switch iszero(succeeded)\r\n                case 1 {\r\n                    revert(add(result, 0x20), size)\r\n                }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Setup the post-process.\r\n     * @param _to The handler of post-process.\r\n     */\r\n    function _setPostProcess(address _to) internal {\r\n        // If the stack length equals 0, just skip\r\n        // If the top is a custom post-process, replace it with the handler\r\n        // address.\r\n        if (stack.length == 0) {\r\n            return;\r\n        } else if (\r\n            stack.peek() == bytes32(bytes12(uint96(HandlerType.Custom)))\r\n        ) {\r\n            stack.pop();\r\n            // Check if the handler is already set.\r\n            if (bytes4(stack.peek()) != 0x00000000) stack.setAddress(_to);\r\n            stack.setHandlerType(uint256(HandlerType.Custom));\r\n        }\r\n    }\r\n\r\n    /// @notice The pre-process phase.\r\n    function _preProcess() internal virtual isStackEmpty isCubeCounterZero {\r\n        // Set the sender.\r\n        _setSender();\r\n    }\r\n\r\n    /// @notice The post-process phase.\r\n    function _postProcess() internal {\r\n        // If the top of stack is HandlerType.Custom (which makes it being zero\r\n        // address when `stack.getAddress()`), get the handler address and execute\r\n        // the handler with it and the post-process function selector.\r\n        // If not, use it as token address and send the token back to user.\r\n        while (stack.length > 0) {\r\n            address addr = stack.getAddress();\r\n            if (addr == address(0)) {\r\n                addr = stack.getAddress();\r\n                _exec(addr, abi.encodeWithSelector(POSTPROCESS_SIG));\r\n            } else {\r\n                uint256 amount = IERC20(addr).balanceOf(address(this));\r\n                if (amount > 0) IERC20(addr).safeTransfer(msg.sender, amount);\r\n            }\r\n        }\r\n\r\n        // Balance should also be returned to user\r\n        uint256 amount = address(this).balance;\r\n        if (amount > 0) msg.sender.transfer(amount);\r\n\r\n        // Reset the msg.sender and cube counter\r\n        _resetSender();\r\n        _resetCubeCounter();\r\n    }\r\n\r\n    /// @notice Get the registry contract address.\r\n    function _getRegistry() internal view returns (address registry) {\r\n        bytes32 slot = HANDLER_REGISTRY;\r\n        assembly {\r\n            registry := sload(slot)\r\n        }\r\n    }\r\n\r\n    /// @notice Check if the handler is valid in registry.\r\n    function _isValid(address handler) internal view returns (bool result) {\r\n        return IRegistry(_getRegistry()).isValid(handler);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"configs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"batchExec\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"configs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"execs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Proxy", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d4258b13c9fadb7623ca4b15dda34b7b85b842c7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://05daa6c0f08ef29d3ed91c7a405e01599c80776675051ed6192403c9feb744c5"}